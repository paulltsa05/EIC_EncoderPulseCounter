

Microchip Technology PIC LITE Macro Assembler V1.41 build -162212810 
                                                                                               Thu Aug 09 17:49:46 2018

Microchip Technology Omniscient Code Generator v1.41 (Free mode) build 201701250102
     1                           	processor	16F18344
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	stringtext,global,class=STRCODE,delta=2
     6                           	psect	nvBANK2,global,class=BANK2,space=1,delta=1
     7                           	psect	cinit,global,class=CODE,merge=1,delta=2
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    11                           	psect	bssBANK2,global,class=BANK2,space=1,delta=1
    12                           	psect	bssBANK3,global,class=BANK3,space=1,delta=1
    13                           	psect	clrtext,global,class=CODE,delta=2
    14                           	psect	cstackBANK2,global,class=BANK2,space=1,delta=1
    15                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    18                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    19                           	psect	text1,local,class=CODE,merge=1,delta=2
    20                           	psect	text2,local,class=CODE,merge=1,delta=2
    21                           	psect	text3,local,class=CODE,merge=1,delta=2
    22                           	psect	text4,local,class=CODE,merge=1,delta=2
    23                           	psect	text5,local,class=CODE,merge=1,delta=2
    24                           	psect	text6,local,class=CODE,merge=1,delta=2
    25                           	psect	text7,local,class=CODE,merge=1,delta=2
    26                           	psect	text8,local,class=CODE,merge=1,delta=2
    27                           	psect	text9,local,class=CODE,merge=1,delta=2
    28                           	psect	text10,local,class=CODE,merge=1,delta=2
    29                           	psect	text11,local,class=CODE,merge=1,delta=2
    30                           	psect	text12,local,class=CODE,merge=1,delta=2
    31                           	psect	text13,local,class=CODE,merge=1,delta=2
    32                           	psect	text14,local,class=CODE,merge=1,delta=2
    33                           	psect	text15,local,class=CODE,merge=1,delta=2
    34                           	psect	text16,local,class=CODE,merge=1,delta=2
    35                           	psect	text17,local,class=CODE,merge=1,delta=2
    36                           	psect	text18,local,class=CODE,merge=1,delta=2
    37                           	psect	text19,local,class=CODE,merge=1,delta=2
    38                           	psect	text20,local,class=CODE,merge=1,delta=2
    39                           	psect	text21,local,class=CODE,merge=1,delta=2
    40                           	psect	text22,local,class=CODE,merge=1,delta=2
    41                           	psect	text23,local,class=CODE,merge=1,delta=2
    42                           	psect	text24,local,class=CODE,merge=1,delta=2
    43                           	psect	text25,local,class=CODE,merge=1,delta=2
    44                           	psect	text26,local,class=CODE,merge=1,delta=2
    45                           	psect	text27,local,class=CODE,merge=1,delta=2
    46                           	psect	text28,local,class=CODE,merge=1,delta=2
    47                           	psect	text29,local,class=CODE,merge=1,delta=2
    48                           	psect	text30,local,class=CODE,merge=1,delta=2
    49                           	psect	text31,local,class=CODE,merge=1,delta=2
    50                           	psect	text32,local,class=CODE,merge=1,delta=2
    51                           	psect	text33,local,class=CODE,merge=1,delta=2
    52                           	psect	text34,local,class=CODE,merge=1,delta=2
    53                           	psect	text35,local,class=CODE,merge=1,delta=2
    54                           	psect	text36,local,class=CODE,merge=1,delta=2
    55                           	psect	text37,local,class=CODE,merge=1,delta=2
    56                           	psect	text38,local,class=CODE,merge=1,delta=2
    57                           	psect	text39,local,class=CODE,merge=1,delta=2
    58                           	psect	text40,local,class=CODE,merge=1,delta=2,group=2
    59                           	psect	text41,local,class=CODE,merge=1,delta=2,group=2
    60                           	psect	intentry,global,class=CODE,delta=2
    61                           	psect	text43,local,class=CODE,merge=1,delta=2
    62                           	psect	text44,local,class=CODE,merge=1,delta=2
    63                           	psect	text45,local,class=CODE,merge=1,delta=2
    64                           	psect	text46,local,class=CODE,merge=1,delta=2
    65                           	psect	text47,local,class=CODE,merge=1,delta=2
    66                           	psect	text48,local,class=CODE,merge=1,delta=2
    67                           	psect	text49,local,class=CODE,merge=1,delta=2,group=2
    68                           	psect	text50,local,class=CODE,merge=1,delta=2
    69                           	psect	text51,local,class=CODE,merge=1,delta=2
    70                           	psect	text52,local,class=CODE,merge=1,delta=2
    71                           	psect	text53,local,class=CODE,merge=1,delta=2
    72                           	psect	text54,local,class=CODE,merge=1,delta=2
    73                           	psect	text55,local,class=CODE,merge=1,delta=2
    74                           	psect	text56,local,class=CODE,merge=1,delta=2
    75                           	psect	text57,local,class=CODE,merge=1,delta=2
    76                           	psect	text58,local,class=CODE,merge=1,delta=2
    77                           	psect	text59,local,class=CODE,merge=1,delta=2
    78                           	psect	text60,local,class=CODE,merge=1,delta=2
    79                           	psect	text61,local,class=CODE,merge=1,delta=2
    80                           	psect	text62,local,class=CODE,merge=1,delta=2
    81                           	psect	text63,local,class=CODE,merge=1,delta=2
    82                           	psect	text64,local,class=CODE,merge=1,delta=2
    83                           	psect	text65,local,class=CODE,merge=1,delta=2
    84                           	psect	text66,local,class=CODE,merge=1,delta=2
    85                           	psect	text67,local,class=CODE,merge=1,delta=2
    86                           	psect	text68,local,class=CODE,merge=1,delta=2
    87                           	psect	text69,local,class=CODE,merge=1,delta=2
    88                           	dabs	1,0x320,16
    89                           	dabs	1,0x2A0,80
    90                           	dabs	1,0x26B,5
    91                           	dabs	1,0x218B,0,_Rbuff
    92                           	dabs	1,0x7E,2
    93  0000                     
    94                           ; Version 1.41
    95                           ; Generated 25/01/2017 GMT
    96                           ; 
    97                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    98                           ; All rights reserved.
    99                           ; 
   100                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
   101                           ; 
   102                           ; Redistribution and use in source and binary forms, with or without modification, are
   103                           ; permitted provided that the following conditions are met:
   104                           ; 
   105                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
   106                           ;        conditions and the following disclaimer.
   107                           ; 
   108                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   109                           ;        of conditions and the following disclaimer in the documentation and/or other
   110                           ;        materials provided with the distribution.
   111                           ; 
   112                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   113                           ;        software without specific prior written permission.
   114                           ; 
   115                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   116                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   117                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   118                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   119                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   120                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   121                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   122                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   123                           ; 
   124                           ; 
   125                           ; Code-generator required, PIC16F18344 Definitions
   126                           ; 
   127                           ; SFR Addresses
   128  0000                     	;# 
   129  0001                     	;# 
   130  0002                     	;# 
   131  0003                     	;# 
   132  0004                     	;# 
   133  0005                     	;# 
   134  0006                     	;# 
   135  0007                     	;# 
   136  0008                     	;# 
   137  0009                     	;# 
   138  000A                     	;# 
   139  000B                     	;# 
   140  000C                     	;# 
   141  000D                     	;# 
   142  000E                     	;# 
   143  0010                     	;# 
   144  0011                     	;# 
   145  0012                     	;# 
   146  0013                     	;# 
   147  0014                     	;# 
   148  0015                     	;# 
   149  0015                     	;# 
   150  0016                     	;# 
   151  0016                     	;# 
   152  0017                     	;# 
   153  0018                     	;# 
   154  0019                     	;# 
   155  0019                     	;# 
   156  001A                     	;# 
   157  001B                     	;# 
   158  001C                     	;# 
   159  001D                     	;# 
   160  001E                     	;# 
   161  001F                     	;# 
   162  008C                     	;# 
   163  008D                     	;# 
   164  008E                     	;# 
   165  0090                     	;# 
   166  0091                     	;# 
   167  0092                     	;# 
   168  0093                     	;# 
   169  0094                     	;# 
   170  0097                     	;# 
   171  009B                     	;# 
   172  009B                     	;# 
   173  009C                     	;# 
   174  009D                     	;# 
   175  009E                     	;# 
   176  009F                     	;# 
   177  010C                     	;# 
   178  010D                     	;# 
   179  010E                     	;# 
   180  0111                     	;# 
   181  0112                     	;# 
   182  0113                     	;# 
   183  0114                     	;# 
   184  0115                     	;# 
   185  0116                     	;# 
   186  0117                     	;# 
   187  0118                     	;# 
   188  0119                     	;# 
   189  018C                     	;# 
   190  018D                     	;# 
   191  018E                     	;# 
   192  0197                     	;# 
   193  0199                     	;# 
   194  0199                     	;# 
   195  0199                     	;# 
   196  019A                     	;# 
   197  019A                     	;# 
   198  019A                     	;# 
   199  019B                     	;# 
   200  019B                     	;# 
   201  019B                     	;# 
   202  019B                     	;# 
   203  019B                     	;# 
   204  019C                     	;# 
   205  019C                     	;# 
   206  019C                     	;# 
   207  019D                     	;# 
   208  019D                     	;# 
   209  019D                     	;# 
   210  019E                     	;# 
   211  019E                     	;# 
   212  019E                     	;# 
   213  019F                     	;# 
   214  019F                     	;# 
   215  019F                     	;# 
   216  019F                     	;# 
   217  019F                     	;# 
   218  020C                     	;# 
   219  020D                     	;# 
   220  020E                     	;# 
   221  0211                     	;# 
   222  0211                     	;# 
   223  0212                     	;# 
   224  0212                     	;# 
   225  0213                     	;# 
   226  0213                     	;# 
   227  0214                     	;# 
   228  0214                     	;# 
   229  0215                     	;# 
   230  0215                     	;# 
   231  0215                     	;# 
   232  0215                     	;# 
   233  0216                     	;# 
   234  0216                     	;# 
   235  0217                     	;# 
   236  0217                     	;# 
   237  028C                     	;# 
   238  028D                     	;# 
   239  028E                     	;# 
   240  0291                     	;# 
   241  0291                     	;# 
   242  0292                     	;# 
   243  0293                     	;# 
   244  0294                     	;# 
   245  0295                     	;# 
   246  0295                     	;# 
   247  0296                     	;# 
   248  0297                     	;# 
   249  0298                     	;# 
   250  029F                     	;# 
   251  030C                     	;# 
   252  030D                     	;# 
   253  030E                     	;# 
   254  0311                     	;# 
   255  0311                     	;# 
   256  0312                     	;# 
   257  0313                     	;# 
   258  0314                     	;# 
   259  0315                     	;# 
   260  0315                     	;# 
   261  0316                     	;# 
   262  0317                     	;# 
   263  0318                     	;# 
   264  038C                     	;# 
   265  038D                     	;# 
   266  038E                     	;# 
   267  0391                     	;# 
   268  0392                     	;# 
   269  0393                     	;# 
   270  0394                     	;# 
   271  0395                     	;# 
   272  0396                     	;# 
   273  0397                     	;# 
   274  0398                     	;# 
   275  0399                     	;# 
   276  039A                     	;# 
   277  039C                     	;# 
   278  039D                     	;# 
   279  039E                     	;# 
   280  039F                     	;# 
   281  0411                     	;# 
   282  0411                     	;# 
   283  0412                     	;# 
   284  0413                     	;# 
   285  0414                     	;# 
   286  0415                     	;# 
   287  0416                     	;# 
   288  0417                     	;# 
   289  0418                     	;# 
   290  0418                     	;# 
   291  0419                     	;# 
   292  041A                     	;# 
   293  041B                     	;# 
   294  041C                     	;# 
   295  041D                     	;# 
   296  041E                     	;# 
   297  041F                     	;# 
   298  0498                     	;# 
   299  0498                     	;# 
   300  0499                     	;# 
   301  049A                     	;# 
   302  049B                     	;# 
   303  049B                     	;# 
   304  049C                     	;# 
   305  049D                     	;# 
   306  049E                     	;# 
   307  049F                     	;# 
   308  0617                     	;# 
   309  0618                     	;# 
   310  0619                     	;# 
   311  0619                     	;# 
   312  061A                     	;# 
   313  061B                     	;# 
   314  061C                     	;# 
   315  061C                     	;# 
   316  061F                     	;# 
   317  0691                     	;# 
   318  0692                     	;# 
   319  0693                     	;# 
   320  0694                     	;# 
   321  0695                     	;# 
   322  0696                     	;# 
   323  0697                     	;# 
   324  0698                     	;# 
   325  0699                     	;# 
   326  0711                     	;# 
   327  0712                     	;# 
   328  0713                     	;# 
   329  0714                     	;# 
   330  0715                     	;# 
   331  0716                     	;# 
   332  0717                     	;# 
   333  0718                     	;# 
   334  0719                     	;# 
   335  0891                     	;# 
   336  0891                     	;# 
   337  0891                     	;# 
   338  0891                     	;# 
   339  0891                     	;# 
   340  0891                     	;# 
   341  0892                     	;# 
   342  0892                     	;# 
   343  0892                     	;# 
   344  0893                     	;# 
   345  0893                     	;# 
   346  0893                     	;# 
   347  0893                     	;# 
   348  0893                     	;# 
   349  0893                     	;# 
   350  0894                     	;# 
   351  0894                     	;# 
   352  0894                     	;# 
   353  0895                     	;# 
   354  0895                     	;# 
   355  0895                     	;# 
   356  0896                     	;# 
   357  0896                     	;# 
   358  0896                     	;# 
   359  089B                     	;# 
   360  0911                     	;# 
   361  0912                     	;# 
   362  0913                     	;# 
   363  0914                     	;# 
   364  0915                     	;# 
   365  0916                     	;# 
   366  0918                     	;# 
   367  0919                     	;# 
   368  091A                     	;# 
   369  091B                     	;# 
   370  091C                     	;# 
   371  091D                     	;# 
   372  091E                     	;# 
   373  091F                     	;# 
   374  0E0F                     	;# 
   375  0E10                     	;# 
   376  0E11                     	;# 
   377  0E12                     	;# 
   378  0E13                     	;# 
   379  0E14                     	;# 
   380  0E15                     	;# 
   381  0E16                     	;# 
   382  0E17                     	;# 
   383  0E18                     	;# 
   384  0E19                     	;# 
   385  0E1A                     	;# 
   386  0E1B                     	;# 
   387  0E1C                     	;# 
   388  0E20                     	;# 
   389  0E21                     	;# 
   390  0E22                     	;# 
   391  0E24                     	;# 
   392  0E25                     	;# 
   393  0E28                     	;# 
   394  0E29                     	;# 
   395  0E2A                     	;# 
   396  0E2B                     	;# 
   397  0E2C                     	;# 
   398  0E2D                     	;# 
   399  0E2E                     	;# 
   400  0E2F                     	;# 
   401  0E90                     	;# 
   402  0E91                     	;# 
   403  0E92                     	;# 
   404  0E94                     	;# 
   405  0E95                     	;# 
   406  0E9C                     	;# 
   407  0E9D                     	;# 
   408  0E9E                     	;# 
   409  0E9F                     	;# 
   410  0EA0                     	;# 
   411  0EA1                     	;# 
   412  0EA2                     	;# 
   413  0EA3                     	;# 
   414  0EA4                     	;# 
   415  0EA5                     	;# 
   416  0EA6                     	;# 
   417  0EA7                     	;# 
   418  0F0F                     	;# 
   419  0F10                     	;# 
   420  0F11                     	;# 
   421  0F12                     	;# 
   422  0F13                     	;# 
   423  0F14                     	;# 
   424  0F15                     	;# 
   425  0F16                     	;# 
   426  0F17                     	;# 
   427  0F18                     	;# 
   428  0F19                     	;# 
   429  0F1A                     	;# 
   430  0F1B                     	;# 
   431  0F1C                     	;# 
   432  0F1D                     	;# 
   433  0F1E                     	;# 
   434  0F1F                     	;# 
   435  0F20                     	;# 
   436  0F21                     	;# 
   437  0F22                     	;# 
   438  0F23                     	;# 
   439  0F24                     	;# 
   440  0F25                     	;# 
   441  0F26                     	;# 
   442  0F27                     	;# 
   443  0F28                     	;# 
   444  0F29                     	;# 
   445  0F2A                     	;# 
   446  0F2B                     	;# 
   447  0F2C                     	;# 
   448  0F2D                     	;# 
   449  0F2E                     	;# 
   450  0F2F                     	;# 
   451  0F30                     	;# 
   452  0F31                     	;# 
   453  0F32                     	;# 
   454  0F33                     	;# 
   455  0F34                     	;# 
   456  0F35                     	;# 
   457  0F36                     	;# 
   458  0F37                     	;# 
   459  0FE4                     	;# 
   460  0FE5                     	;# 
   461  0FE6                     	;# 
   462  0FE7                     	;# 
   463  0FE8                     	;# 
   464  0FE9                     	;# 
   465  0FEA                     	;# 
   466  0FEB                     	;# 
   467  0FED                     	;# 
   468  0FEE                     	;# 
   469  0FEF                     	;# 
   470  0000                     	;# 
   471  0001                     	;# 
   472  0002                     	;# 
   473  0003                     	;# 
   474  0004                     	;# 
   475  0005                     	;# 
   476  0006                     	;# 
   477  0007                     	;# 
   478  0008                     	;# 
   479  0009                     	;# 
   480  000A                     	;# 
   481  000B                     	;# 
   482  000C                     	;# 
   483  000D                     	;# 
   484  000E                     	;# 
   485  0010                     	;# 
   486  0011                     	;# 
   487  0012                     	;# 
   488  0013                     	;# 
   489  0014                     	;# 
   490  0015                     	;# 
   491  0015                     	;# 
   492  0016                     	;# 
   493  0016                     	;# 
   494  0017                     	;# 
   495  0018                     	;# 
   496  0019                     	;# 
   497  0019                     	;# 
   498  001A                     	;# 
   499  001B                     	;# 
   500  001C                     	;# 
   501  001D                     	;# 
   502  001E                     	;# 
   503  001F                     	;# 
   504  008C                     	;# 
   505  008D                     	;# 
   506  008E                     	;# 
   507  0090                     	;# 
   508  0091                     	;# 
   509  0092                     	;# 
   510  0093                     	;# 
   511  0094                     	;# 
   512  0097                     	;# 
   513  009B                     	;# 
   514  009B                     	;# 
   515  009C                     	;# 
   516  009D                     	;# 
   517  009E                     	;# 
   518  009F                     	;# 
   519  010C                     	;# 
   520  010D                     	;# 
   521  010E                     	;# 
   522  0111                     	;# 
   523  0112                     	;# 
   524  0113                     	;# 
   525  0114                     	;# 
   526  0115                     	;# 
   527  0116                     	;# 
   528  0117                     	;# 
   529  0118                     	;# 
   530  0119                     	;# 
   531  018C                     	;# 
   532  018D                     	;# 
   533  018E                     	;# 
   534  0197                     	;# 
   535  0199                     	;# 
   536  0199                     	;# 
   537  0199                     	;# 
   538  019A                     	;# 
   539  019A                     	;# 
   540  019A                     	;# 
   541  019B                     	;# 
   542  019B                     	;# 
   543  019B                     	;# 
   544  019B                     	;# 
   545  019B                     	;# 
   546  019C                     	;# 
   547  019C                     	;# 
   548  019C                     	;# 
   549  019D                     	;# 
   550  019D                     	;# 
   551  019D                     	;# 
   552  019E                     	;# 
   553  019E                     	;# 
   554  019E                     	;# 
   555  019F                     	;# 
   556  019F                     	;# 
   557  019F                     	;# 
   558  019F                     	;# 
   559  019F                     	;# 
   560  020C                     	;# 
   561  020D                     	;# 
   562  020E                     	;# 
   563  0211                     	;# 
   564  0211                     	;# 
   565  0212                     	;# 
   566  0212                     	;# 
   567  0213                     	;# 
   568  0213                     	;# 
   569  0214                     	;# 
   570  0214                     	;# 
   571  0215                     	;# 
   572  0215                     	;# 
   573  0215                     	;# 
   574  0215                     	;# 
   575  0216                     	;# 
   576  0216                     	;# 
   577  0217                     	;# 
   578  0217                     	;# 
   579  028C                     	;# 
   580  028D                     	;# 
   581  028E                     	;# 
   582  0291                     	;# 
   583  0291                     	;# 
   584  0292                     	;# 
   585  0293                     	;# 
   586  0294                     	;# 
   587  0295                     	;# 
   588  0295                     	;# 
   589  0296                     	;# 
   590  0297                     	;# 
   591  0298                     	;# 
   592  029F                     	;# 
   593  030C                     	;# 
   594  030D                     	;# 
   595  030E                     	;# 
   596  0311                     	;# 
   597  0311                     	;# 
   598  0312                     	;# 
   599  0313                     	;# 
   600  0314                     	;# 
   601  0315                     	;# 
   602  0315                     	;# 
   603  0316                     	;# 
   604  0317                     	;# 
   605  0318                     	;# 
   606  038C                     	;# 
   607  038D                     	;# 
   608  038E                     	;# 
   609  0391                     	;# 
   610  0392                     	;# 
   611  0393                     	;# 
   612  0394                     	;# 
   613  0395                     	;# 
   614  0396                     	;# 
   615  0397                     	;# 
   616  0398                     	;# 
   617  0399                     	;# 
   618  039A                     	;# 
   619  039C                     	;# 
   620  039D                     	;# 
   621  039E                     	;# 
   622  039F                     	;# 
   623  0411                     	;# 
   624  0411                     	;# 
   625  0412                     	;# 
   626  0413                     	;# 
   627  0414                     	;# 
   628  0415                     	;# 
   629  0416                     	;# 
   630  0417                     	;# 
   631  0418                     	;# 
   632  0418                     	;# 
   633  0419                     	;# 
   634  041A                     	;# 
   635  041B                     	;# 
   636  041C                     	;# 
   637  041D                     	;# 
   638  041E                     	;# 
   639  041F                     	;# 
   640  0498                     	;# 
   641  0498                     	;# 
   642  0499                     	;# 
   643  049A                     	;# 
   644  049B                     	;# 
   645  049B                     	;# 
   646  049C                     	;# 
   647  049D                     	;# 
   648  049E                     	;# 
   649  049F                     	;# 
   650  0617                     	;# 
   651  0618                     	;# 
   652  0619                     	;# 
   653  0619                     	;# 
   654  061A                     	;# 
   655  061B                     	;# 
   656  061C                     	;# 
   657  061C                     	;# 
   658  061F                     	;# 
   659  0691                     	;# 
   660  0692                     	;# 
   661  0693                     	;# 
   662  0694                     	;# 
   663  0695                     	;# 
   664  0696                     	;# 
   665  0697                     	;# 
   666  0698                     	;# 
   667  0699                     	;# 
   668  0711                     	;# 
   669  0712                     	;# 
   670  0713                     	;# 
   671  0714                     	;# 
   672  0715                     	;# 
   673  0716                     	;# 
   674  0717                     	;# 
   675  0718                     	;# 
   676  0719                     	;# 
   677  0891                     	;# 
   678  0891                     	;# 
   679  0891                     	;# 
   680  0891                     	;# 
   681  0891                     	;# 
   682  0891                     	;# 
   683  0892                     	;# 
   684  0892                     	;# 
   685  0892                     	;# 
   686  0893                     	;# 
   687  0893                     	;# 
   688  0893                     	;# 
   689  0893                     	;# 
   690  0893                     	;# 
   691  0893                     	;# 
   692  0894                     	;# 
   693  0894                     	;# 
   694  0894                     	;# 
   695  0895                     	;# 
   696  0895                     	;# 
   697  0895                     	;# 
   698  0896                     	;# 
   699  0896                     	;# 
   700  0896                     	;# 
   701  089B                     	;# 
   702  0911                     	;# 
   703  0912                     	;# 
   704  0913                     	;# 
   705  0914                     	;# 
   706  0915                     	;# 
   707  0916                     	;# 
   708  0918                     	;# 
   709  0919                     	;# 
   710  091A                     	;# 
   711  091B                     	;# 
   712  091C                     	;# 
   713  091D                     	;# 
   714  091E                     	;# 
   715  091F                     	;# 
   716  0E0F                     	;# 
   717  0E10                     	;# 
   718  0E11                     	;# 
   719  0E12                     	;# 
   720  0E13                     	;# 
   721  0E14                     	;# 
   722  0E15                     	;# 
   723  0E16                     	;# 
   724  0E17                     	;# 
   725  0E18                     	;# 
   726  0E19                     	;# 
   727  0E1A                     	;# 
   728  0E1B                     	;# 
   729  0E1C                     	;# 
   730  0E20                     	;# 
   731  0E21                     	;# 
   732  0E22                     	;# 
   733  0E24                     	;# 
   734  0E25                     	;# 
   735  0E28                     	;# 
   736  0E29                     	;# 
   737  0E2A                     	;# 
   738  0E2B                     	;# 
   739  0E2C                     	;# 
   740  0E2D                     	;# 
   741  0E2E                     	;# 
   742  0E2F                     	;# 
   743  0E90                     	;# 
   744  0E91                     	;# 
   745  0E92                     	;# 
   746  0E94                     	;# 
   747  0E95                     	;# 
   748  0E9C                     	;# 
   749  0E9D                     	;# 
   750  0E9E                     	;# 
   751  0E9F                     	;# 
   752  0EA0                     	;# 
   753  0EA1                     	;# 
   754  0EA2                     	;# 
   755  0EA3                     	;# 
   756  0EA4                     	;# 
   757  0EA5                     	;# 
   758  0EA6                     	;# 
   759  0EA7                     	;# 
   760  0F0F                     	;# 
   761  0F10                     	;# 
   762  0F11                     	;# 
   763  0F12                     	;# 
   764  0F13                     	;# 
   765  0F14                     	;# 
   766  0F15                     	;# 
   767  0F16                     	;# 
   768  0F17                     	;# 
   769  0F18                     	;# 
   770  0F19                     	;# 
   771  0F1A                     	;# 
   772  0F1B                     	;# 
   773  0F1C                     	;# 
   774  0F1D                     	;# 
   775  0F1E                     	;# 
   776  0F1F                     	;# 
   777  0F20                     	;# 
   778  0F21                     	;# 
   779  0F22                     	;# 
   780  0F23                     	;# 
   781  0F24                     	;# 
   782  0F25                     	;# 
   783  0F26                     	;# 
   784  0F27                     	;# 
   785  0F28                     	;# 
   786  0F29                     	;# 
   787  0F2A                     	;# 
   788  0F2B                     	;# 
   789  0F2C                     	;# 
   790  0F2D                     	;# 
   791  0F2E                     	;# 
   792  0F2F                     	;# 
   793  0F30                     	;# 
   794  0F31                     	;# 
   795  0F32                     	;# 
   796  0F33                     	;# 
   797  0F34                     	;# 
   798  0F35                     	;# 
   799  0F36                     	;# 
   800  0F37                     	;# 
   801  0FE4                     	;# 
   802  0FE5                     	;# 
   803  0FE6                     	;# 
   804  0FE7                     	;# 
   805  0FE8                     	;# 
   806  0FE9                     	;# 
   807  0FEA                     	;# 
   808  0FEB                     	;# 
   809  0FED                     	;# 
   810  0FEE                     	;# 
   811  0FEF                     	;# 
   812  0000                     	;# 
   813  0001                     	;# 
   814  0002                     	;# 
   815  0003                     	;# 
   816  0004                     	;# 
   817  0005                     	;# 
   818  0006                     	;# 
   819  0007                     	;# 
   820  0008                     	;# 
   821  0009                     	;# 
   822  000A                     	;# 
   823  000B                     	;# 
   824  000C                     	;# 
   825  000D                     	;# 
   826  000E                     	;# 
   827  0010                     	;# 
   828  0011                     	;# 
   829  0012                     	;# 
   830  0013                     	;# 
   831  0014                     	;# 
   832  0015                     	;# 
   833  0015                     	;# 
   834  0016                     	;# 
   835  0016                     	;# 
   836  0017                     	;# 
   837  0018                     	;# 
   838  0019                     	;# 
   839  0019                     	;# 
   840  001A                     	;# 
   841  001B                     	;# 
   842  001C                     	;# 
   843  001D                     	;# 
   844  001E                     	;# 
   845  001F                     	;# 
   846  008C                     	;# 
   847  008D                     	;# 
   848  008E                     	;# 
   849  0090                     	;# 
   850  0091                     	;# 
   851  0092                     	;# 
   852  0093                     	;# 
   853  0094                     	;# 
   854  0097                     	;# 
   855  009B                     	;# 
   856  009B                     	;# 
   857  009C                     	;# 
   858  009D                     	;# 
   859  009E                     	;# 
   860  009F                     	;# 
   861  010C                     	;# 
   862  010D                     	;# 
   863  010E                     	;# 
   864  0111                     	;# 
   865  0112                     	;# 
   866  0113                     	;# 
   867  0114                     	;# 
   868  0115                     	;# 
   869  0116                     	;# 
   870  0117                     	;# 
   871  0118                     	;# 
   872  0119                     	;# 
   873  018C                     	;# 
   874  018D                     	;# 
   875  018E                     	;# 
   876  0197                     	;# 
   877  0199                     	;# 
   878  0199                     	;# 
   879  0199                     	;# 
   880  019A                     	;# 
   881  019A                     	;# 
   882  019A                     	;# 
   883  019B                     	;# 
   884  019B                     	;# 
   885  019B                     	;# 
   886  019B                     	;# 
   887  019B                     	;# 
   888  019C                     	;# 
   889  019C                     	;# 
   890  019C                     	;# 
   891  019D                     	;# 
   892  019D                     	;# 
   893  019D                     	;# 
   894  019E                     	;# 
   895  019E                     	;# 
   896  019E                     	;# 
   897  019F                     	;# 
   898  019F                     	;# 
   899  019F                     	;# 
   900  019F                     	;# 
   901  019F                     	;# 
   902  020C                     	;# 
   903  020D                     	;# 
   904  020E                     	;# 
   905  0211                     	;# 
   906  0211                     	;# 
   907  0212                     	;# 
   908  0212                     	;# 
   909  0213                     	;# 
   910  0213                     	;# 
   911  0214                     	;# 
   912  0214                     	;# 
   913  0215                     	;# 
   914  0215                     	;# 
   915  0215                     	;# 
   916  0215                     	;# 
   917  0216                     	;# 
   918  0216                     	;# 
   919  0217                     	;# 
   920  0217                     	;# 
   921  028C                     	;# 
   922  028D                     	;# 
   923  028E                     	;# 
   924  0291                     	;# 
   925  0291                     	;# 
   926  0292                     	;# 
   927  0293                     	;# 
   928  0294                     	;# 
   929  0295                     	;# 
   930  0295                     	;# 
   931  0296                     	;# 
   932  0297                     	;# 
   933  0298                     	;# 
   934  029F                     	;# 
   935  030C                     	;# 
   936  030D                     	;# 
   937  030E                     	;# 
   938  0311                     	;# 
   939  0311                     	;# 
   940  0312                     	;# 
   941  0313                     	;# 
   942  0314                     	;# 
   943  0315                     	;# 
   944  0315                     	;# 
   945  0316                     	;# 
   946  0317                     	;# 
   947  0318                     	;# 
   948  038C                     	;# 
   949  038D                     	;# 
   950  038E                     	;# 
   951  0391                     	;# 
   952  0392                     	;# 
   953  0393                     	;# 
   954  0394                     	;# 
   955  0395                     	;# 
   956  0396                     	;# 
   957  0397                     	;# 
   958  0398                     	;# 
   959  0399                     	;# 
   960  039A                     	;# 
   961  039C                     	;# 
   962  039D                     	;# 
   963  039E                     	;# 
   964  039F                     	;# 
   965  0411                     	;# 
   966  0411                     	;# 
   967  0412                     	;# 
   968  0413                     	;# 
   969  0414                     	;# 
   970  0415                     	;# 
   971  0416                     	;# 
   972  0417                     	;# 
   973  0418                     	;# 
   974  0418                     	;# 
   975  0419                     	;# 
   976  041A                     	;# 
   977  041B                     	;# 
   978  041C                     	;# 
   979  041D                     	;# 
   980  041E                     	;# 
   981  041F                     	;# 
   982  0498                     	;# 
   983  0498                     	;# 
   984  0499                     	;# 
   985  049A                     	;# 
   986  049B                     	;# 
   987  049B                     	;# 
   988  049C                     	;# 
   989  049D                     	;# 
   990  049E                     	;# 
   991  049F                     	;# 
   992  0617                     	;# 
   993  0618                     	;# 
   994  0619                     	;# 
   995  0619                     	;# 
   996  061A                     	;# 
   997  061B                     	;# 
   998  061C                     	;# 
   999  061C                     	;# 
  1000  061F                     	;# 
  1001  0691                     	;# 
  1002  0692                     	;# 
  1003  0693                     	;# 
  1004  0694                     	;# 
  1005  0695                     	;# 
  1006  0696                     	;# 
  1007  0697                     	;# 
  1008  0698                     	;# 
  1009  0699                     	;# 
  1010  0711                     	;# 
  1011  0712                     	;# 
  1012  0713                     	;# 
  1013  0714                     	;# 
  1014  0715                     	;# 
  1015  0716                     	;# 
  1016  0717                     	;# 
  1017  0718                     	;# 
  1018  0719                     	;# 
  1019  0891                     	;# 
  1020  0891                     	;# 
  1021  0891                     	;# 
  1022  0891                     	;# 
  1023  0891                     	;# 
  1024  0891                     	;# 
  1025  0892                     	;# 
  1026  0892                     	;# 
  1027  0892                     	;# 
  1028  0893                     	;# 
  1029  0893                     	;# 
  1030  0893                     	;# 
  1031  0893                     	;# 
  1032  0893                     	;# 
  1033  0893                     	;# 
  1034  0894                     	;# 
  1035  0894                     	;# 
  1036  0894                     	;# 
  1037  0895                     	;# 
  1038  0895                     	;# 
  1039  0895                     	;# 
  1040  0896                     	;# 
  1041  0896                     	;# 
  1042  0896                     	;# 
  1043  089B                     	;# 
  1044  0911                     	;# 
  1045  0912                     	;# 
  1046  0913                     	;# 
  1047  0914                     	;# 
  1048  0915                     	;# 
  1049  0916                     	;# 
  1050  0918                     	;# 
  1051  0919                     	;# 
  1052  091A                     	;# 
  1053  091B                     	;# 
  1054  091C                     	;# 
  1055  091D                     	;# 
  1056  091E                     	;# 
  1057  091F                     	;# 
  1058  0E0F                     	;# 
  1059  0E10                     	;# 
  1060  0E11                     	;# 
  1061  0E12                     	;# 
  1062  0E13                     	;# 
  1063  0E14                     	;# 
  1064  0E15                     	;# 
  1065  0E16                     	;# 
  1066  0E17                     	;# 
  1067  0E18                     	;# 
  1068  0E19                     	;# 
  1069  0E1A                     	;# 
  1070  0E1B                     	;# 
  1071  0E1C                     	;# 
  1072  0E20                     	;# 
  1073  0E21                     	;# 
  1074  0E22                     	;# 
  1075  0E24                     	;# 
  1076  0E25                     	;# 
  1077  0E28                     	;# 
  1078  0E29                     	;# 
  1079  0E2A                     	;# 
  1080  0E2B                     	;# 
  1081  0E2C                     	;# 
  1082  0E2D                     	;# 
  1083  0E2E                     	;# 
  1084  0E2F                     	;# 
  1085  0E90                     	;# 
  1086  0E91                     	;# 
  1087  0E92                     	;# 
  1088  0E94                     	;# 
  1089  0E95                     	;# 
  1090  0E9C                     	;# 
  1091  0E9D                     	;# 
  1092  0E9E                     	;# 
  1093  0E9F                     	;# 
  1094  0EA0                     	;# 
  1095  0EA1                     	;# 
  1096  0EA2                     	;# 
  1097  0EA3                     	;# 
  1098  0EA4                     	;# 
  1099  0EA5                     	;# 
  1100  0EA6                     	;# 
  1101  0EA7                     	;# 
  1102  0F0F                     	;# 
  1103  0F10                     	;# 
  1104  0F11                     	;# 
  1105  0F12                     	;# 
  1106  0F13                     	;# 
  1107  0F14                     	;# 
  1108  0F15                     	;# 
  1109  0F16                     	;# 
  1110  0F17                     	;# 
  1111  0F18                     	;# 
  1112  0F19                     	;# 
  1113  0F1A                     	;# 
  1114  0F1B                     	;# 
  1115  0F1C                     	;# 
  1116  0F1D                     	;# 
  1117  0F1E                     	;# 
  1118  0F1F                     	;# 
  1119  0F20                     	;# 
  1120  0F21                     	;# 
  1121  0F22                     	;# 
  1122  0F23                     	;# 
  1123  0F24                     	;# 
  1124  0F25                     	;# 
  1125  0F26                     	;# 
  1126  0F27                     	;# 
  1127  0F28                     	;# 
  1128  0F29                     	;# 
  1129  0F2A                     	;# 
  1130  0F2B                     	;# 
  1131  0F2C                     	;# 
  1132  0F2D                     	;# 
  1133  0F2E                     	;# 
  1134  0F2F                     	;# 
  1135  0F30                     	;# 
  1136  0F31                     	;# 
  1137  0F32                     	;# 
  1138  0F33                     	;# 
  1139  0F34                     	;# 
  1140  0F35                     	;# 
  1141  0F36                     	;# 
  1142  0F37                     	;# 
  1143  0FE4                     	;# 
  1144  0FE5                     	;# 
  1145  0FE6                     	;# 
  1146  0FE7                     	;# 
  1147  0FE8                     	;# 
  1148  0FE9                     	;# 
  1149  0FEA                     	;# 
  1150  0FEB                     	;# 
  1151  0FED                     	;# 
  1152  0FEE                     	;# 
  1153  0FEF                     	;# 
  1154  0000                     	;# 
  1155  0001                     	;# 
  1156  0002                     	;# 
  1157  0003                     	;# 
  1158  0004                     	;# 
  1159  0005                     	;# 
  1160  0006                     	;# 
  1161  0007                     	;# 
  1162  0008                     	;# 
  1163  0009                     	;# 
  1164  000A                     	;# 
  1165  000B                     	;# 
  1166  000C                     	;# 
  1167  000D                     	;# 
  1168  000E                     	;# 
  1169  0010                     	;# 
  1170  0011                     	;# 
  1171  0012                     	;# 
  1172  0013                     	;# 
  1173  0014                     	;# 
  1174  0015                     	;# 
  1175  0015                     	;# 
  1176  0016                     	;# 
  1177  0016                     	;# 
  1178  0017                     	;# 
  1179  0018                     	;# 
  1180  0019                     	;# 
  1181  0019                     	;# 
  1182  001A                     	;# 
  1183  001B                     	;# 
  1184  001C                     	;# 
  1185  001D                     	;# 
  1186  001E                     	;# 
  1187  001F                     	;# 
  1188  008C                     	;# 
  1189  008D                     	;# 
  1190  008E                     	;# 
  1191  0090                     	;# 
  1192  0091                     	;# 
  1193  0092                     	;# 
  1194  0093                     	;# 
  1195  0094                     	;# 
  1196  0097                     	;# 
  1197  009B                     	;# 
  1198  009B                     	;# 
  1199  009C                     	;# 
  1200  009D                     	;# 
  1201  009E                     	;# 
  1202  009F                     	;# 
  1203  010C                     	;# 
  1204  010D                     	;# 
  1205  010E                     	;# 
  1206  0111                     	;# 
  1207  0112                     	;# 
  1208  0113                     	;# 
  1209  0114                     	;# 
  1210  0115                     	;# 
  1211  0116                     	;# 
  1212  0117                     	;# 
  1213  0118                     	;# 
  1214  0119                     	;# 
  1215  018C                     	;# 
  1216  018D                     	;# 
  1217  018E                     	;# 
  1218  0197                     	;# 
  1219  0199                     	;# 
  1220  0199                     	;# 
  1221  0199                     	;# 
  1222  019A                     	;# 
  1223  019A                     	;# 
  1224  019A                     	;# 
  1225  019B                     	;# 
  1226  019B                     	;# 
  1227  019B                     	;# 
  1228  019B                     	;# 
  1229  019B                     	;# 
  1230  019C                     	;# 
  1231  019C                     	;# 
  1232  019C                     	;# 
  1233  019D                     	;# 
  1234  019D                     	;# 
  1235  019D                     	;# 
  1236  019E                     	;# 
  1237  019E                     	;# 
  1238  019E                     	;# 
  1239  019F                     	;# 
  1240  019F                     	;# 
  1241  019F                     	;# 
  1242  019F                     	;# 
  1243  019F                     	;# 
  1244  020C                     	;# 
  1245  020D                     	;# 
  1246  020E                     	;# 
  1247  0211                     	;# 
  1248  0211                     	;# 
  1249  0212                     	;# 
  1250  0212                     	;# 
  1251  0213                     	;# 
  1252  0213                     	;# 
  1253  0214                     	;# 
  1254  0214                     	;# 
  1255  0215                     	;# 
  1256  0215                     	;# 
  1257  0215                     	;# 
  1258  0215                     	;# 
  1259  0216                     	;# 
  1260  0216                     	;# 
  1261  0217                     	;# 
  1262  0217                     	;# 
  1263  028C                     	;# 
  1264  028D                     	;# 
  1265  028E                     	;# 
  1266  0291                     	;# 
  1267  0291                     	;# 
  1268  0292                     	;# 
  1269  0293                     	;# 
  1270  0294                     	;# 
  1271  0295                     	;# 
  1272  0295                     	;# 
  1273  0296                     	;# 
  1274  0297                     	;# 
  1275  0298                     	;# 
  1276  029F                     	;# 
  1277  030C                     	;# 
  1278  030D                     	;# 
  1279  030E                     	;# 
  1280  0311                     	;# 
  1281  0311                     	;# 
  1282  0312                     	;# 
  1283  0313                     	;# 
  1284  0314                     	;# 
  1285  0315                     	;# 
  1286  0315                     	;# 
  1287  0316                     	;# 
  1288  0317                     	;# 
  1289  0318                     	;# 
  1290  038C                     	;# 
  1291  038D                     	;# 
  1292  038E                     	;# 
  1293  0391                     	;# 
  1294  0392                     	;# 
  1295  0393                     	;# 
  1296  0394                     	;# 
  1297  0395                     	;# 
  1298  0396                     	;# 
  1299  0397                     	;# 
  1300  0398                     	;# 
  1301  0399                     	;# 
  1302  039A                     	;# 
  1303  039C                     	;# 
  1304  039D                     	;# 
  1305  039E                     	;# 
  1306  039F                     	;# 
  1307  0411                     	;# 
  1308  0411                     	;# 
  1309  0412                     	;# 
  1310  0413                     	;# 
  1311  0414                     	;# 
  1312  0415                     	;# 
  1313  0416                     	;# 
  1314  0417                     	;# 
  1315  0418                     	;# 
  1316  0418                     	;# 
  1317  0419                     	;# 
  1318  041A                     	;# 
  1319  041B                     	;# 
  1320  041C                     	;# 
  1321  041D                     	;# 
  1322  041E                     	;# 
  1323  041F                     	;# 
  1324  0498                     	;# 
  1325  0498                     	;# 
  1326  0499                     	;# 
  1327  049A                     	;# 
  1328  049B                     	;# 
  1329  049B                     	;# 
  1330  049C                     	;# 
  1331  049D                     	;# 
  1332  049E                     	;# 
  1333  049F                     	;# 
  1334  0617                     	;# 
  1335  0618                     	;# 
  1336  0619                     	;# 
  1337  0619                     	;# 
  1338  061A                     	;# 
  1339  061B                     	;# 
  1340  061C                     	;# 
  1341  061C                     	;# 
  1342  061F                     	;# 
  1343  0691                     	;# 
  1344  0692                     	;# 
  1345  0693                     	;# 
  1346  0694                     	;# 
  1347  0695                     	;# 
  1348  0696                     	;# 
  1349  0697                     	;# 
  1350  0698                     	;# 
  1351  0699                     	;# 
  1352  0711                     	;# 
  1353  0712                     	;# 
  1354  0713                     	;# 
  1355  0714                     	;# 
  1356  0715                     	;# 
  1357  0716                     	;# 
  1358  0717                     	;# 
  1359  0718                     	;# 
  1360  0719                     	;# 
  1361  0891                     	;# 
  1362  0891                     	;# 
  1363  0891                     	;# 
  1364  0891                     	;# 
  1365  0891                     	;# 
  1366  0891                     	;# 
  1367  0892                     	;# 
  1368  0892                     	;# 
  1369  0892                     	;# 
  1370  0893                     	;# 
  1371  0893                     	;# 
  1372  0893                     	;# 
  1373  0893                     	;# 
  1374  0893                     	;# 
  1375  0893                     	;# 
  1376  0894                     	;# 
  1377  0894                     	;# 
  1378  0894                     	;# 
  1379  0895                     	;# 
  1380  0895                     	;# 
  1381  0895                     	;# 
  1382  0896                     	;# 
  1383  0896                     	;# 
  1384  0896                     	;# 
  1385  089B                     	;# 
  1386  0911                     	;# 
  1387  0912                     	;# 
  1388  0913                     	;# 
  1389  0914                     	;# 
  1390  0915                     	;# 
  1391  0916                     	;# 
  1392  0918                     	;# 
  1393  0919                     	;# 
  1394  091A                     	;# 
  1395  091B                     	;# 
  1396  091C                     	;# 
  1397  091D                     	;# 
  1398  091E                     	;# 
  1399  091F                     	;# 
  1400  0E0F                     	;# 
  1401  0E10                     	;# 
  1402  0E11                     	;# 
  1403  0E12                     	;# 
  1404  0E13                     	;# 
  1405  0E14                     	;# 
  1406  0E15                     	;# 
  1407  0E16                     	;# 
  1408  0E17                     	;# 
  1409  0E18                     	;# 
  1410  0E19                     	;# 
  1411  0E1A                     	;# 
  1412  0E1B                     	;# 
  1413  0E1C                     	;# 
  1414  0E20                     	;# 
  1415  0E21                     	;# 
  1416  0E22                     	;# 
  1417  0E24                     	;# 
  1418  0E25                     	;# 
  1419  0E28                     	;# 
  1420  0E29                     	;# 
  1421  0E2A                     	;# 
  1422  0E2B                     	;# 
  1423  0E2C                     	;# 
  1424  0E2D                     	;# 
  1425  0E2E                     	;# 
  1426  0E2F                     	;# 
  1427  0E90                     	;# 
  1428  0E91                     	;# 
  1429  0E92                     	;# 
  1430  0E94                     	;# 
  1431  0E95                     	;# 
  1432  0E9C                     	;# 
  1433  0E9D                     	;# 
  1434  0E9E                     	;# 
  1435  0E9F                     	;# 
  1436  0EA0                     	;# 
  1437  0EA1                     	;# 
  1438  0EA2                     	;# 
  1439  0EA3                     	;# 
  1440  0EA4                     	;# 
  1441  0EA5                     	;# 
  1442  0EA6                     	;# 
  1443  0EA7                     	;# 
  1444  0F0F                     	;# 
  1445  0F10                     	;# 
  1446  0F11                     	;# 
  1447  0F12                     	;# 
  1448  0F13                     	;# 
  1449  0F14                     	;# 
  1450  0F15                     	;# 
  1451  0F16                     	;# 
  1452  0F17                     	;# 
  1453  0F18                     	;# 
  1454  0F19                     	;# 
  1455  0F1A                     	;# 
  1456  0F1B                     	;# 
  1457  0F1C                     	;# 
  1458  0F1D                     	;# 
  1459  0F1E                     	;# 
  1460  0F1F                     	;# 
  1461  0F20                     	;# 
  1462  0F21                     	;# 
  1463  0F22                     	;# 
  1464  0F23                     	;# 
  1465  0F24                     	;# 
  1466  0F25                     	;# 
  1467  0F26                     	;# 
  1468  0F27                     	;# 
  1469  0F28                     	;# 
  1470  0F29                     	;# 
  1471  0F2A                     	;# 
  1472  0F2B                     	;# 
  1473  0F2C                     	;# 
  1474  0F2D                     	;# 
  1475  0F2E                     	;# 
  1476  0F2F                     	;# 
  1477  0F30                     	;# 
  1478  0F31                     	;# 
  1479  0F32                     	;# 
  1480  0F33                     	;# 
  1481  0F34                     	;# 
  1482  0F35                     	;# 
  1483  0F36                     	;# 
  1484  0F37                     	;# 
  1485  0FE4                     	;# 
  1486  0FE5                     	;# 
  1487  0FE6                     	;# 
  1488  0FE7                     	;# 
  1489  0FE8                     	;# 
  1490  0FE9                     	;# 
  1491  0FEA                     	;# 
  1492  0FEB                     	;# 
  1493  0FED                     	;# 
  1494  0FEE                     	;# 
  1495  0FEF                     	;# 
  1496  0000                     	;# 
  1497  0001                     	;# 
  1498  0002                     	;# 
  1499  0003                     	;# 
  1500  0004                     	;# 
  1501  0005                     	;# 
  1502  0006                     	;# 
  1503  0007                     	;# 
  1504  0008                     	;# 
  1505  0009                     	;# 
  1506  000A                     	;# 
  1507  000B                     	;# 
  1508  000C                     	;# 
  1509  000D                     	;# 
  1510  000E                     	;# 
  1511  0010                     	;# 
  1512  0011                     	;# 
  1513  0012                     	;# 
  1514  0013                     	;# 
  1515  0014                     	;# 
  1516  0015                     	;# 
  1517  0015                     	;# 
  1518  0016                     	;# 
  1519  0016                     	;# 
  1520  0017                     	;# 
  1521  0018                     	;# 
  1522  0019                     	;# 
  1523  0019                     	;# 
  1524  001A                     	;# 
  1525  001B                     	;# 
  1526  001C                     	;# 
  1527  001D                     	;# 
  1528  001E                     	;# 
  1529  001F                     	;# 
  1530  008C                     	;# 
  1531  008D                     	;# 
  1532  008E                     	;# 
  1533  0090                     	;# 
  1534  0091                     	;# 
  1535  0092                     	;# 
  1536  0093                     	;# 
  1537  0094                     	;# 
  1538  0097                     	;# 
  1539  009B                     	;# 
  1540  009B                     	;# 
  1541  009C                     	;# 
  1542  009D                     	;# 
  1543  009E                     	;# 
  1544  009F                     	;# 
  1545  010C                     	;# 
  1546  010D                     	;# 
  1547  010E                     	;# 
  1548  0111                     	;# 
  1549  0112                     	;# 
  1550  0113                     	;# 
  1551  0114                     	;# 
  1552  0115                     	;# 
  1553  0116                     	;# 
  1554  0117                     	;# 
  1555  0118                     	;# 
  1556  0119                     	;# 
  1557  018C                     	;# 
  1558  018D                     	;# 
  1559  018E                     	;# 
  1560  0197                     	;# 
  1561  0199                     	;# 
  1562  0199                     	;# 
  1563  0199                     	;# 
  1564  019A                     	;# 
  1565  019A                     	;# 
  1566  019A                     	;# 
  1567  019B                     	;# 
  1568  019B                     	;# 
  1569  019B                     	;# 
  1570  019B                     	;# 
  1571  019B                     	;# 
  1572  019C                     	;# 
  1573  019C                     	;# 
  1574  019C                     	;# 
  1575  019D                     	;# 
  1576  019D                     	;# 
  1577  019D                     	;# 
  1578  019E                     	;# 
  1579  019E                     	;# 
  1580  019E                     	;# 
  1581  019F                     	;# 
  1582  019F                     	;# 
  1583  019F                     	;# 
  1584  019F                     	;# 
  1585  019F                     	;# 
  1586  020C                     	;# 
  1587  020D                     	;# 
  1588  020E                     	;# 
  1589  0211                     	;# 
  1590  0211                     	;# 
  1591  0212                     	;# 
  1592  0212                     	;# 
  1593  0213                     	;# 
  1594  0213                     	;# 
  1595  0214                     	;# 
  1596  0214                     	;# 
  1597  0215                     	;# 
  1598  0215                     	;# 
  1599  0215                     	;# 
  1600  0215                     	;# 
  1601  0216                     	;# 
  1602  0216                     	;# 
  1603  0217                     	;# 
  1604  0217                     	;# 
  1605  028C                     	;# 
  1606  028D                     	;# 
  1607  028E                     	;# 
  1608  0291                     	;# 
  1609  0291                     	;# 
  1610  0292                     	;# 
  1611  0293                     	;# 
  1612  0294                     	;# 
  1613  0295                     	;# 
  1614  0295                     	;# 
  1615  0296                     	;# 
  1616  0297                     	;# 
  1617  0298                     	;# 
  1618  029F                     	;# 
  1619  030C                     	;# 
  1620  030D                     	;# 
  1621  030E                     	;# 
  1622  0311                     	;# 
  1623  0311                     	;# 
  1624  0312                     	;# 
  1625  0313                     	;# 
  1626  0314                     	;# 
  1627  0315                     	;# 
  1628  0315                     	;# 
  1629  0316                     	;# 
  1630  0317                     	;# 
  1631  0318                     	;# 
  1632  038C                     	;# 
  1633  038D                     	;# 
  1634  038E                     	;# 
  1635  0391                     	;# 
  1636  0392                     	;# 
  1637  0393                     	;# 
  1638  0394                     	;# 
  1639  0395                     	;# 
  1640  0396                     	;# 
  1641  0397                     	;# 
  1642  0398                     	;# 
  1643  0399                     	;# 
  1644  039A                     	;# 
  1645  039C                     	;# 
  1646  039D                     	;# 
  1647  039E                     	;# 
  1648  039F                     	;# 
  1649  0411                     	;# 
  1650  0411                     	;# 
  1651  0412                     	;# 
  1652  0413                     	;# 
  1653  0414                     	;# 
  1654  0415                     	;# 
  1655  0416                     	;# 
  1656  0417                     	;# 
  1657  0418                     	;# 
  1658  0418                     	;# 
  1659  0419                     	;# 
  1660  041A                     	;# 
  1661  041B                     	;# 
  1662  041C                     	;# 
  1663  041D                     	;# 
  1664  041E                     	;# 
  1665  041F                     	;# 
  1666  0498                     	;# 
  1667  0498                     	;# 
  1668  0499                     	;# 
  1669  049A                     	;# 
  1670  049B                     	;# 
  1671  049B                     	;# 
  1672  049C                     	;# 
  1673  049D                     	;# 
  1674  049E                     	;# 
  1675  049F                     	;# 
  1676  0617                     	;# 
  1677  0618                     	;# 
  1678  0619                     	;# 
  1679  0619                     	;# 
  1680  061A                     	;# 
  1681  061B                     	;# 
  1682  061C                     	;# 
  1683  061C                     	;# 
  1684  061F                     	;# 
  1685  0691                     	;# 
  1686  0692                     	;# 
  1687  0693                     	;# 
  1688  0694                     	;# 
  1689  0695                     	;# 
  1690  0696                     	;# 
  1691  0697                     	;# 
  1692  0698                     	;# 
  1693  0699                     	;# 
  1694  0711                     	;# 
  1695  0712                     	;# 
  1696  0713                     	;# 
  1697  0714                     	;# 
  1698  0715                     	;# 
  1699  0716                     	;# 
  1700  0717                     	;# 
  1701  0718                     	;# 
  1702  0719                     	;# 
  1703  0891                     	;# 
  1704  0891                     	;# 
  1705  0891                     	;# 
  1706  0891                     	;# 
  1707  0891                     	;# 
  1708  0891                     	;# 
  1709  0892                     	;# 
  1710  0892                     	;# 
  1711  0892                     	;# 
  1712  0893                     	;# 
  1713  0893                     	;# 
  1714  0893                     	;# 
  1715  0893                     	;# 
  1716  0893                     	;# 
  1717  0893                     	;# 
  1718  0894                     	;# 
  1719  0894                     	;# 
  1720  0894                     	;# 
  1721  0895                     	;# 
  1722  0895                     	;# 
  1723  0895                     	;# 
  1724  0896                     	;# 
  1725  0896                     	;# 
  1726  0896                     	;# 
  1727  089B                     	;# 
  1728  0911                     	;# 
  1729  0912                     	;# 
  1730  0913                     	;# 
  1731  0914                     	;# 
  1732  0915                     	;# 
  1733  0916                     	;# 
  1734  0918                     	;# 
  1735  0919                     	;# 
  1736  091A                     	;# 
  1737  091B                     	;# 
  1738  091C                     	;# 
  1739  091D                     	;# 
  1740  091E                     	;# 
  1741  091F                     	;# 
  1742  0E0F                     	;# 
  1743  0E10                     	;# 
  1744  0E11                     	;# 
  1745  0E12                     	;# 
  1746  0E13                     	;# 
  1747  0E14                     	;# 
  1748  0E15                     	;# 
  1749  0E16                     	;# 
  1750  0E17                     	;# 
  1751  0E18                     	;# 
  1752  0E19                     	;# 
  1753  0E1A                     	;# 
  1754  0E1B                     	;# 
  1755  0E1C                     	;# 
  1756  0E20                     	;# 
  1757  0E21                     	;# 
  1758  0E22                     	;# 
  1759  0E24                     	;# 
  1760  0E25                     	;# 
  1761  0E28                     	;# 
  1762  0E29                     	;# 
  1763  0E2A                     	;# 
  1764  0E2B                     	;# 
  1765  0E2C                     	;# 
  1766  0E2D                     	;# 
  1767  0E2E                     	;# 
  1768  0E2F                     	;# 
  1769  0E90                     	;# 
  1770  0E91                     	;# 
  1771  0E92                     	;# 
  1772  0E94                     	;# 
  1773  0E95                     	;# 
  1774  0E9C                     	;# 
  1775  0E9D                     	;# 
  1776  0E9E                     	;# 
  1777  0E9F                     	;# 
  1778  0EA0                     	;# 
  1779  0EA1                     	;# 
  1780  0EA2                     	;# 
  1781  0EA3                     	;# 
  1782  0EA4                     	;# 
  1783  0EA5                     	;# 
  1784  0EA6                     	;# 
  1785  0EA7                     	;# 
  1786  0F0F                     	;# 
  1787  0F10                     	;# 
  1788  0F11                     	;# 
  1789  0F12                     	;# 
  1790  0F13                     	;# 
  1791  0F14                     	;# 
  1792  0F15                     	;# 
  1793  0F16                     	;# 
  1794  0F17                     	;# 
  1795  0F18                     	;# 
  1796  0F19                     	;# 
  1797  0F1A                     	;# 
  1798  0F1B                     	;# 
  1799  0F1C                     	;# 
  1800  0F1D                     	;# 
  1801  0F1E                     	;# 
  1802  0F1F                     	;# 
  1803  0F20                     	;# 
  1804  0F21                     	;# 
  1805  0F22                     	;# 
  1806  0F23                     	;# 
  1807  0F24                     	;# 
  1808  0F25                     	;# 
  1809  0F26                     	;# 
  1810  0F27                     	;# 
  1811  0F28                     	;# 
  1812  0F29                     	;# 
  1813  0F2A                     	;# 
  1814  0F2B                     	;# 
  1815  0F2C                     	;# 
  1816  0F2D                     	;# 
  1817  0F2E                     	;# 
  1818  0F2F                     	;# 
  1819  0F30                     	;# 
  1820  0F31                     	;# 
  1821  0F32                     	;# 
  1822  0F33                     	;# 
  1823  0F34                     	;# 
  1824  0F35                     	;# 
  1825  0F36                     	;# 
  1826  0F37                     	;# 
  1827  0FE4                     	;# 
  1828  0FE5                     	;# 
  1829  0FE6                     	;# 
  1830  0FE7                     	;# 
  1831  0FE8                     	;# 
  1832  0FE9                     	;# 
  1833  0FEA                     	;# 
  1834  0FEB                     	;# 
  1835  0FED                     	;# 
  1836  0FEE                     	;# 
  1837  0FEF                     	;# 
  1838  0000                     	;# 
  1839  0001                     	;# 
  1840  0002                     	;# 
  1841  0003                     	;# 
  1842  0004                     	;# 
  1843  0005                     	;# 
  1844  0006                     	;# 
  1845  0007                     	;# 
  1846  0008                     	;# 
  1847  0009                     	;# 
  1848  000A                     	;# 
  1849  000B                     	;# 
  1850  000C                     	;# 
  1851  000D                     	;# 
  1852  000E                     	;# 
  1853  0010                     	;# 
  1854  0011                     	;# 
  1855  0012                     	;# 
  1856  0013                     	;# 
  1857  0014                     	;# 
  1858  0015                     	;# 
  1859  0015                     	;# 
  1860  0016                     	;# 
  1861  0016                     	;# 
  1862  0017                     	;# 
  1863  0018                     	;# 
  1864  0019                     	;# 
  1865  0019                     	;# 
  1866  001A                     	;# 
  1867  001B                     	;# 
  1868  001C                     	;# 
  1869  001D                     	;# 
  1870  001E                     	;# 
  1871  001F                     	;# 
  1872  008C                     	;# 
  1873  008D                     	;# 
  1874  008E                     	;# 
  1875  0090                     	;# 
  1876  0091                     	;# 
  1877  0092                     	;# 
  1878  0093                     	;# 
  1879  0094                     	;# 
  1880  0097                     	;# 
  1881  009B                     	;# 
  1882  009B                     	;# 
  1883  009C                     	;# 
  1884  009D                     	;# 
  1885  009E                     	;# 
  1886  009F                     	;# 
  1887  010C                     	;# 
  1888  010D                     	;# 
  1889  010E                     	;# 
  1890  0111                     	;# 
  1891  0112                     	;# 
  1892  0113                     	;# 
  1893  0114                     	;# 
  1894  0115                     	;# 
  1895  0116                     	;# 
  1896  0117                     	;# 
  1897  0118                     	;# 
  1898  0119                     	;# 
  1899  018C                     	;# 
  1900  018D                     	;# 
  1901  018E                     	;# 
  1902  0197                     	;# 
  1903  0199                     	;# 
  1904  0199                     	;# 
  1905  0199                     	;# 
  1906  019A                     	;# 
  1907  019A                     	;# 
  1908  019A                     	;# 
  1909  019B                     	;# 
  1910  019B                     	;# 
  1911  019B                     	;# 
  1912  019B                     	;# 
  1913  019B                     	;# 
  1914  019C                     	;# 
  1915  019C                     	;# 
  1916  019C                     	;# 
  1917  019D                     	;# 
  1918  019D                     	;# 
  1919  019D                     	;# 
  1920  019E                     	;# 
  1921  019E                     	;# 
  1922  019E                     	;# 
  1923  019F                     	;# 
  1924  019F                     	;# 
  1925  019F                     	;# 
  1926  019F                     	;# 
  1927  019F                     	;# 
  1928  020C                     	;# 
  1929  020D                     	;# 
  1930  020E                     	;# 
  1931  0211                     	;# 
  1932  0211                     	;# 
  1933  0212                     	;# 
  1934  0212                     	;# 
  1935  0213                     	;# 
  1936  0213                     	;# 
  1937  0214                     	;# 
  1938  0214                     	;# 
  1939  0215                     	;# 
  1940  0215                     	;# 
  1941  0215                     	;# 
  1942  0215                     	;# 
  1943  0216                     	;# 
  1944  0216                     	;# 
  1945  0217                     	;# 
  1946  0217                     	;# 
  1947  028C                     	;# 
  1948  028D                     	;# 
  1949  028E                     	;# 
  1950  0291                     	;# 
  1951  0291                     	;# 
  1952  0292                     	;# 
  1953  0293                     	;# 
  1954  0294                     	;# 
  1955  0295                     	;# 
  1956  0295                     	;# 
  1957  0296                     	;# 
  1958  0297                     	;# 
  1959  0298                     	;# 
  1960  029F                     	;# 
  1961  030C                     	;# 
  1962  030D                     	;# 
  1963  030E                     	;# 
  1964  0311                     	;# 
  1965  0311                     	;# 
  1966  0312                     	;# 
  1967  0313                     	;# 
  1968  0314                     	;# 
  1969  0315                     	;# 
  1970  0315                     	;# 
  1971  0316                     	;# 
  1972  0317                     	;# 
  1973  0318                     	;# 
  1974  038C                     	;# 
  1975  038D                     	;# 
  1976  038E                     	;# 
  1977  0391                     	;# 
  1978  0392                     	;# 
  1979  0393                     	;# 
  1980  0394                     	;# 
  1981  0395                     	;# 
  1982  0396                     	;# 
  1983  0397                     	;# 
  1984  0398                     	;# 
  1985  0399                     	;# 
  1986  039A                     	;# 
  1987  039C                     	;# 
  1988  039D                     	;# 
  1989  039E                     	;# 
  1990  039F                     	;# 
  1991  0411                     	;# 
  1992  0411                     	;# 
  1993  0412                     	;# 
  1994  0413                     	;# 
  1995  0414                     	;# 
  1996  0415                     	;# 
  1997  0416                     	;# 
  1998  0417                     	;# 
  1999  0418                     	;# 
  2000  0418                     	;# 
  2001  0419                     	;# 
  2002  041A                     	;# 
  2003  041B                     	;# 
  2004  041C                     	;# 
  2005  041D                     	;# 
  2006  041E                     	;# 
  2007  041F                     	;# 
  2008  0498                     	;# 
  2009  0498                     	;# 
  2010  0499                     	;# 
  2011  049A                     	;# 
  2012  049B                     	;# 
  2013  049B                     	;# 
  2014  049C                     	;# 
  2015  049D                     	;# 
  2016  049E                     	;# 
  2017  049F                     	;# 
  2018  0617                     	;# 
  2019  0618                     	;# 
  2020  0619                     	;# 
  2021  0619                     	;# 
  2022  061A                     	;# 
  2023  061B                     	;# 
  2024  061C                     	;# 
  2025  061C                     	;# 
  2026  061F                     	;# 
  2027  0691                     	;# 
  2028  0692                     	;# 
  2029  0693                     	;# 
  2030  0694                     	;# 
  2031  0695                     	;# 
  2032  0696                     	;# 
  2033  0697                     	;# 
  2034  0698                     	;# 
  2035  0699                     	;# 
  2036  0711                     	;# 
  2037  0712                     	;# 
  2038  0713                     	;# 
  2039  0714                     	;# 
  2040  0715                     	;# 
  2041  0716                     	;# 
  2042  0717                     	;# 
  2043  0718                     	;# 
  2044  0719                     	;# 
  2045  0891                     	;# 
  2046  0891                     	;# 
  2047  0891                     	;# 
  2048  0891                     	;# 
  2049  0891                     	;# 
  2050  0891                     	;# 
  2051  0892                     	;# 
  2052  0892                     	;# 
  2053  0892                     	;# 
  2054  0893                     	;# 
  2055  0893                     	;# 
  2056  0893                     	;# 
  2057  0893                     	;# 
  2058  0893                     	;# 
  2059  0893                     	;# 
  2060  0894                     	;# 
  2061  0894                     	;# 
  2062  0894                     	;# 
  2063  0895                     	;# 
  2064  0895                     	;# 
  2065  0895                     	;# 
  2066  0896                     	;# 
  2067  0896                     	;# 
  2068  0896                     	;# 
  2069  089B                     	;# 
  2070  0911                     	;# 
  2071  0912                     	;# 
  2072  0913                     	;# 
  2073  0914                     	;# 
  2074  0915                     	;# 
  2075  0916                     	;# 
  2076  0918                     	;# 
  2077  0919                     	;# 
  2078  091A                     	;# 
  2079  091B                     	;# 
  2080  091C                     	;# 
  2081  091D                     	;# 
  2082  091E                     	;# 
  2083  091F                     	;# 
  2084  0E0F                     	;# 
  2085  0E10                     	;# 
  2086  0E11                     	;# 
  2087  0E12                     	;# 
  2088  0E13                     	;# 
  2089  0E14                     	;# 
  2090  0E15                     	;# 
  2091  0E16                     	;# 
  2092  0E17                     	;# 
  2093  0E18                     	;# 
  2094  0E19                     	;# 
  2095  0E1A                     	;# 
  2096  0E1B                     	;# 
  2097  0E1C                     	;# 
  2098  0E20                     	;# 
  2099  0E21                     	;# 
  2100  0E22                     	;# 
  2101  0E24                     	;# 
  2102  0E25                     	;# 
  2103  0E28                     	;# 
  2104  0E29                     	;# 
  2105  0E2A                     	;# 
  2106  0E2B                     	;# 
  2107  0E2C                     	;# 
  2108  0E2D                     	;# 
  2109  0E2E                     	;# 
  2110  0E2F                     	;# 
  2111  0E90                     	;# 
  2112  0E91                     	;# 
  2113  0E92                     	;# 
  2114  0E94                     	;# 
  2115  0E95                     	;# 
  2116  0E9C                     	;# 
  2117  0E9D                     	;# 
  2118  0E9E                     	;# 
  2119  0E9F                     	;# 
  2120  0EA0                     	;# 
  2121  0EA1                     	;# 
  2122  0EA2                     	;# 
  2123  0EA3                     	;# 
  2124  0EA4                     	;# 
  2125  0EA5                     	;# 
  2126  0EA6                     	;# 
  2127  0EA7                     	;# 
  2128  0F0F                     	;# 
  2129  0F10                     	;# 
  2130  0F11                     	;# 
  2131  0F12                     	;# 
  2132  0F13                     	;# 
  2133  0F14                     	;# 
  2134  0F15                     	;# 
  2135  0F16                     	;# 
  2136  0F17                     	;# 
  2137  0F18                     	;# 
  2138  0F19                     	;# 
  2139  0F1A                     	;# 
  2140  0F1B                     	;# 
  2141  0F1C                     	;# 
  2142  0F1D                     	;# 
  2143  0F1E                     	;# 
  2144  0F1F                     	;# 
  2145  0F20                     	;# 
  2146  0F21                     	;# 
  2147  0F22                     	;# 
  2148  0F23                     	;# 
  2149  0F24                     	;# 
  2150  0F25                     	;# 
  2151  0F26                     	;# 
  2152  0F27                     	;# 
  2153  0F28                     	;# 
  2154  0F29                     	;# 
  2155  0F2A                     	;# 
  2156  0F2B                     	;# 
  2157  0F2C                     	;# 
  2158  0F2D                     	;# 
  2159  0F2E                     	;# 
  2160  0F2F                     	;# 
  2161  0F30                     	;# 
  2162  0F31                     	;# 
  2163  0F32                     	;# 
  2164  0F33                     	;# 
  2165  0F34                     	;# 
  2166  0F35                     	;# 
  2167  0F36                     	;# 
  2168  0F37                     	;# 
  2169  0FE4                     	;# 
  2170  0FE5                     	;# 
  2171  0FE6                     	;# 
  2172  0FE7                     	;# 
  2173  0FE8                     	;# 
  2174  0FE9                     	;# 
  2175  0FEA                     	;# 
  2176  0FEB                     	;# 
  2177  0FED                     	;# 
  2178  0FEE                     	;# 
  2179  0FEF                     	;# 
  2180  0000                     	;# 
  2181  0001                     	;# 
  2182  0002                     	;# 
  2183  0003                     	;# 
  2184  0004                     	;# 
  2185  0005                     	;# 
  2186  0006                     	;# 
  2187  0007                     	;# 
  2188  0008                     	;# 
  2189  0009                     	;# 
  2190  000A                     	;# 
  2191  000B                     	;# 
  2192  000C                     	;# 
  2193  000D                     	;# 
  2194  000E                     	;# 
  2195  0010                     	;# 
  2196  0011                     	;# 
  2197  0012                     	;# 
  2198  0013                     	;# 
  2199  0014                     	;# 
  2200  0015                     	;# 
  2201  0015                     	;# 
  2202  0016                     	;# 
  2203  0016                     	;# 
  2204  0017                     	;# 
  2205  0018                     	;# 
  2206  0019                     	;# 
  2207  0019                     	;# 
  2208  001A                     	;# 
  2209  001B                     	;# 
  2210  001C                     	;# 
  2211  001D                     	;# 
  2212  001E                     	;# 
  2213  001F                     	;# 
  2214  008C                     	;# 
  2215  008D                     	;# 
  2216  008E                     	;# 
  2217  0090                     	;# 
  2218  0091                     	;# 
  2219  0092                     	;# 
  2220  0093                     	;# 
  2221  0094                     	;# 
  2222  0097                     	;# 
  2223  009B                     	;# 
  2224  009B                     	;# 
  2225  009C                     	;# 
  2226  009D                     	;# 
  2227  009E                     	;# 
  2228  009F                     	;# 
  2229  010C                     	;# 
  2230  010D                     	;# 
  2231  010E                     	;# 
  2232  0111                     	;# 
  2233  0112                     	;# 
  2234  0113                     	;# 
  2235  0114                     	;# 
  2236  0115                     	;# 
  2237  0116                     	;# 
  2238  0117                     	;# 
  2239  0118                     	;# 
  2240  0119                     	;# 
  2241  018C                     	;# 
  2242  018D                     	;# 
  2243  018E                     	;# 
  2244  0197                     	;# 
  2245  0199                     	;# 
  2246  0199                     	;# 
  2247  0199                     	;# 
  2248  019A                     	;# 
  2249  019A                     	;# 
  2250  019A                     	;# 
  2251  019B                     	;# 
  2252  019B                     	;# 
  2253  019B                     	;# 
  2254  019B                     	;# 
  2255  019B                     	;# 
  2256  019C                     	;# 
  2257  019C                     	;# 
  2258  019C                     	;# 
  2259  019D                     	;# 
  2260  019D                     	;# 
  2261  019D                     	;# 
  2262  019E                     	;# 
  2263  019E                     	;# 
  2264  019E                     	;# 
  2265  019F                     	;# 
  2266  019F                     	;# 
  2267  019F                     	;# 
  2268  019F                     	;# 
  2269  019F                     	;# 
  2270  020C                     	;# 
  2271  020D                     	;# 
  2272  020E                     	;# 
  2273  0211                     	;# 
  2274  0211                     	;# 
  2275  0212                     	;# 
  2276  0212                     	;# 
  2277  0213                     	;# 
  2278  0213                     	;# 
  2279  0214                     	;# 
  2280  0214                     	;# 
  2281  0215                     	;# 
  2282  0215                     	;# 
  2283  0215                     	;# 
  2284  0215                     	;# 
  2285  0216                     	;# 
  2286  0216                     	;# 
  2287  0217                     	;# 
  2288  0217                     	;# 
  2289  028C                     	;# 
  2290  028D                     	;# 
  2291  028E                     	;# 
  2292  0291                     	;# 
  2293  0291                     	;# 
  2294  0292                     	;# 
  2295  0293                     	;# 
  2296  0294                     	;# 
  2297  0295                     	;# 
  2298  0295                     	;# 
  2299  0296                     	;# 
  2300  0297                     	;# 
  2301  0298                     	;# 
  2302  029F                     	;# 
  2303  030C                     	;# 
  2304  030D                     	;# 
  2305  030E                     	;# 
  2306  0311                     	;# 
  2307  0311                     	;# 
  2308  0312                     	;# 
  2309  0313                     	;# 
  2310  0314                     	;# 
  2311  0315                     	;# 
  2312  0315                     	;# 
  2313  0316                     	;# 
  2314  0317                     	;# 
  2315  0318                     	;# 
  2316  038C                     	;# 
  2317  038D                     	;# 
  2318  038E                     	;# 
  2319  0391                     	;# 
  2320  0392                     	;# 
  2321  0393                     	;# 
  2322  0394                     	;# 
  2323  0395                     	;# 
  2324  0396                     	;# 
  2325  0397                     	;# 
  2326  0398                     	;# 
  2327  0399                     	;# 
  2328  039A                     	;# 
  2329  039C                     	;# 
  2330  039D                     	;# 
  2331  039E                     	;# 
  2332  039F                     	;# 
  2333  0411                     	;# 
  2334  0411                     	;# 
  2335  0412                     	;# 
  2336  0413                     	;# 
  2337  0414                     	;# 
  2338  0415                     	;# 
  2339  0416                     	;# 
  2340  0417                     	;# 
  2341  0418                     	;# 
  2342  0418                     	;# 
  2343  0419                     	;# 
  2344  041A                     	;# 
  2345  041B                     	;# 
  2346  041C                     	;# 
  2347  041D                     	;# 
  2348  041E                     	;# 
  2349  041F                     	;# 
  2350  0498                     	;# 
  2351  0498                     	;# 
  2352  0499                     	;# 
  2353  049A                     	;# 
  2354  049B                     	;# 
  2355  049B                     	;# 
  2356  049C                     	;# 
  2357  049D                     	;# 
  2358  049E                     	;# 
  2359  049F                     	;# 
  2360  0617                     	;# 
  2361  0618                     	;# 
  2362  0619                     	;# 
  2363  0619                     	;# 
  2364  061A                     	;# 
  2365  061B                     	;# 
  2366  061C                     	;# 
  2367  061C                     	;# 
  2368  061F                     	;# 
  2369  0691                     	;# 
  2370  0692                     	;# 
  2371  0693                     	;# 
  2372  0694                     	;# 
  2373  0695                     	;# 
  2374  0696                     	;# 
  2375  0697                     	;# 
  2376  0698                     	;# 
  2377  0699                     	;# 
  2378  0711                     	;# 
  2379  0712                     	;# 
  2380  0713                     	;# 
  2381  0714                     	;# 
  2382  0715                     	;# 
  2383  0716                     	;# 
  2384  0717                     	;# 
  2385  0718                     	;# 
  2386  0719                     	;# 
  2387  0891                     	;# 
  2388  0891                     	;# 
  2389  0891                     	;# 
  2390  0891                     	;# 
  2391  0891                     	;# 
  2392  0891                     	;# 
  2393  0892                     	;# 
  2394  0892                     	;# 
  2395  0892                     	;# 
  2396  0893                     	;# 
  2397  0893                     	;# 
  2398  0893                     	;# 
  2399  0893                     	;# 
  2400  0893                     	;# 
  2401  0893                     	;# 
  2402  0894                     	;# 
  2403  0894                     	;# 
  2404  0894                     	;# 
  2405  0895                     	;# 
  2406  0895                     	;# 
  2407  0895                     	;# 
  2408  0896                     	;# 
  2409  0896                     	;# 
  2410  0896                     	;# 
  2411  089B                     	;# 
  2412  0911                     	;# 
  2413  0912                     	;# 
  2414  0913                     	;# 
  2415  0914                     	;# 
  2416  0915                     	;# 
  2417  0916                     	;# 
  2418  0918                     	;# 
  2419  0919                     	;# 
  2420  091A                     	;# 
  2421  091B                     	;# 
  2422  091C                     	;# 
  2423  091D                     	;# 
  2424  091E                     	;# 
  2425  091F                     	;# 
  2426  0E0F                     	;# 
  2427  0E10                     	;# 
  2428  0E11                     	;# 
  2429  0E12                     	;# 
  2430  0E13                     	;# 
  2431  0E14                     	;# 
  2432  0E15                     	;# 
  2433  0E16                     	;# 
  2434  0E17                     	;# 
  2435  0E18                     	;# 
  2436  0E19                     	;# 
  2437  0E1A                     	;# 
  2438  0E1B                     	;# 
  2439  0E1C                     	;# 
  2440  0E20                     	;# 
  2441  0E21                     	;# 
  2442  0E22                     	;# 
  2443  0E24                     	;# 
  2444  0E25                     	;# 
  2445  0E28                     	;# 
  2446  0E29                     	;# 
  2447  0E2A                     	;# 
  2448  0E2B                     	;# 
  2449  0E2C                     	;# 
  2450  0E2D                     	;# 
  2451  0E2E                     	;# 
  2452  0E2F                     	;# 
  2453  0E90                     	;# 
  2454  0E91                     	;# 
  2455  0E92                     	;# 
  2456  0E94                     	;# 
  2457  0E95                     	;# 
  2458  0E9C                     	;# 
  2459  0E9D                     	;# 
  2460  0E9E                     	;# 
  2461  0E9F                     	;# 
  2462  0EA0                     	;# 
  2463  0EA1                     	;# 
  2464  0EA2                     	;# 
  2465  0EA3                     	;# 
  2466  0EA4                     	;# 
  2467  0EA5                     	;# 
  2468  0EA6                     	;# 
  2469  0EA7                     	;# 
  2470  0F0F                     	;# 
  2471  0F10                     	;# 
  2472  0F11                     	;# 
  2473  0F12                     	;# 
  2474  0F13                     	;# 
  2475  0F14                     	;# 
  2476  0F15                     	;# 
  2477  0F16                     	;# 
  2478  0F17                     	;# 
  2479  0F18                     	;# 
  2480  0F19                     	;# 
  2481  0F1A                     	;# 
  2482  0F1B                     	;# 
  2483  0F1C                     	;# 
  2484  0F1D                     	;# 
  2485  0F1E                     	;# 
  2486  0F1F                     	;# 
  2487  0F20                     	;# 
  2488  0F21                     	;# 
  2489  0F22                     	;# 
  2490  0F23                     	;# 
  2491  0F24                     	;# 
  2492  0F25                     	;# 
  2493  0F26                     	;# 
  2494  0F27                     	;# 
  2495  0F28                     	;# 
  2496  0F29                     	;# 
  2497  0F2A                     	;# 
  2498  0F2B                     	;# 
  2499  0F2C                     	;# 
  2500  0F2D                     	;# 
  2501  0F2E                     	;# 
  2502  0F2F                     	;# 
  2503  0F30                     	;# 
  2504  0F31                     	;# 
  2505  0F32                     	;# 
  2506  0F33                     	;# 
  2507  0F34                     	;# 
  2508  0F35                     	;# 
  2509  0F36                     	;# 
  2510  0F37                     	;# 
  2511  0FE4                     	;# 
  2512  0FE5                     	;# 
  2513  0FE6                     	;# 
  2514  0FE7                     	;# 
  2515  0FE8                     	;# 
  2516  0FE9                     	;# 
  2517  0FEA                     	;# 
  2518  0FEB                     	;# 
  2519  0FED                     	;# 
  2520  0FEE                     	;# 
  2521  0FEF                     	;# 
  2522  0000                     	;# 
  2523  0001                     	;# 
  2524  0002                     	;# 
  2525  0003                     	;# 
  2526  0004                     	;# 
  2527  0005                     	;# 
  2528  0006                     	;# 
  2529  0007                     	;# 
  2530  0008                     	;# 
  2531  0009                     	;# 
  2532  000A                     	;# 
  2533  000B                     	;# 
  2534  000C                     	;# 
  2535  000D                     	;# 
  2536  000E                     	;# 
  2537  0010                     	;# 
  2538  0011                     	;# 
  2539  0012                     	;# 
  2540  0013                     	;# 
  2541  0014                     	;# 
  2542  0015                     	;# 
  2543  0015                     	;# 
  2544  0016                     	;# 
  2545  0016                     	;# 
  2546  0017                     	;# 
  2547  0018                     	;# 
  2548  0019                     	;# 
  2549  0019                     	;# 
  2550  001A                     	;# 
  2551  001B                     	;# 
  2552  001C                     	;# 
  2553  001D                     	;# 
  2554  001E                     	;# 
  2555  001F                     	;# 
  2556  008C                     	;# 
  2557  008D                     	;# 
  2558  008E                     	;# 
  2559  0090                     	;# 
  2560  0091                     	;# 
  2561  0092                     	;# 
  2562  0093                     	;# 
  2563  0094                     	;# 
  2564  0097                     	;# 
  2565  009B                     	;# 
  2566  009B                     	;# 
  2567  009C                     	;# 
  2568  009D                     	;# 
  2569  009E                     	;# 
  2570  009F                     	;# 
  2571  010C                     	;# 
  2572  010D                     	;# 
  2573  010E                     	;# 
  2574  0111                     	;# 
  2575  0112                     	;# 
  2576  0113                     	;# 
  2577  0114                     	;# 
  2578  0115                     	;# 
  2579  0116                     	;# 
  2580  0117                     	;# 
  2581  0118                     	;# 
  2582  0119                     	;# 
  2583  018C                     	;# 
  2584  018D                     	;# 
  2585  018E                     	;# 
  2586  0197                     	;# 
  2587  0199                     	;# 
  2588  0199                     	;# 
  2589  0199                     	;# 
  2590  019A                     	;# 
  2591  019A                     	;# 
  2592  019A                     	;# 
  2593  019B                     	;# 
  2594  019B                     	;# 
  2595  019B                     	;# 
  2596  019B                     	;# 
  2597  019B                     	;# 
  2598  019C                     	;# 
  2599  019C                     	;# 
  2600  019C                     	;# 
  2601  019D                     	;# 
  2602  019D                     	;# 
  2603  019D                     	;# 
  2604  019E                     	;# 
  2605  019E                     	;# 
  2606  019E                     	;# 
  2607  019F                     	;# 
  2608  019F                     	;# 
  2609  019F                     	;# 
  2610  019F                     	;# 
  2611  019F                     	;# 
  2612  020C                     	;# 
  2613  020D                     	;# 
  2614  020E                     	;# 
  2615  0211                     	;# 
  2616  0211                     	;# 
  2617  0212                     	;# 
  2618  0212                     	;# 
  2619  0213                     	;# 
  2620  0213                     	;# 
  2621  0214                     	;# 
  2622  0214                     	;# 
  2623  0215                     	;# 
  2624  0215                     	;# 
  2625  0215                     	;# 
  2626  0215                     	;# 
  2627  0216                     	;# 
  2628  0216                     	;# 
  2629  0217                     	;# 
  2630  0217                     	;# 
  2631  028C                     	;# 
  2632  028D                     	;# 
  2633  028E                     	;# 
  2634  0291                     	;# 
  2635  0291                     	;# 
  2636  0292                     	;# 
  2637  0293                     	;# 
  2638  0294                     	;# 
  2639  0295                     	;# 
  2640  0295                     	;# 
  2641  0296                     	;# 
  2642  0297                     	;# 
  2643  0298                     	;# 
  2644  029F                     	;# 
  2645  030C                     	;# 
  2646  030D                     	;# 
  2647  030E                     	;# 
  2648  0311                     	;# 
  2649  0311                     	;# 
  2650  0312                     	;# 
  2651  0313                     	;# 
  2652  0314                     	;# 
  2653  0315                     	;# 
  2654  0315                     	;# 
  2655  0316                     	;# 
  2656  0317                     	;# 
  2657  0318                     	;# 
  2658  038C                     	;# 
  2659  038D                     	;# 
  2660  038E                     	;# 
  2661  0391                     	;# 
  2662  0392                     	;# 
  2663  0393                     	;# 
  2664  0394                     	;# 
  2665  0395                     	;# 
  2666  0396                     	;# 
  2667  0397                     	;# 
  2668  0398                     	;# 
  2669  0399                     	;# 
  2670  039A                     	;# 
  2671  039C                     	;# 
  2672  039D                     	;# 
  2673  039E                     	;# 
  2674  039F                     	;# 
  2675  0411                     	;# 
  2676  0411                     	;# 
  2677  0412                     	;# 
  2678  0413                     	;# 
  2679  0414                     	;# 
  2680  0415                     	;# 
  2681  0416                     	;# 
  2682  0417                     	;# 
  2683  0418                     	;# 
  2684  0418                     	;# 
  2685  0419                     	;# 
  2686  041A                     	;# 
  2687  041B                     	;# 
  2688  041C                     	;# 
  2689  041D                     	;# 
  2690  041E                     	;# 
  2691  041F                     	;# 
  2692  0498                     	;# 
  2693  0498                     	;# 
  2694  0499                     	;# 
  2695  049A                     	;# 
  2696  049B                     	;# 
  2697  049B                     	;# 
  2698  049C                     	;# 
  2699  049D                     	;# 
  2700  049E                     	;# 
  2701  049F                     	;# 
  2702  0617                     	;# 
  2703  0618                     	;# 
  2704  0619                     	;# 
  2705  0619                     	;# 
  2706  061A                     	;# 
  2707  061B                     	;# 
  2708  061C                     	;# 
  2709  061C                     	;# 
  2710  061F                     	;# 
  2711  0691                     	;# 
  2712  0692                     	;# 
  2713  0693                     	;# 
  2714  0694                     	;# 
  2715  0695                     	;# 
  2716  0696                     	;# 
  2717  0697                     	;# 
  2718  0698                     	;# 
  2719  0699                     	;# 
  2720  0711                     	;# 
  2721  0712                     	;# 
  2722  0713                     	;# 
  2723  0714                     	;# 
  2724  0715                     	;# 
  2725  0716                     	;# 
  2726  0717                     	;# 
  2727  0718                     	;# 
  2728  0719                     	;# 
  2729  0891                     	;# 
  2730  0891                     	;# 
  2731  0891                     	;# 
  2732  0891                     	;# 
  2733  0891                     	;# 
  2734  0891                     	;# 
  2735  0892                     	;# 
  2736  0892                     	;# 
  2737  0892                     	;# 
  2738  0893                     	;# 
  2739  0893                     	;# 
  2740  0893                     	;# 
  2741  0893                     	;# 
  2742  0893                     	;# 
  2743  0893                     	;# 
  2744  0894                     	;# 
  2745  0894                     	;# 
  2746  0894                     	;# 
  2747  0895                     	;# 
  2748  0895                     	;# 
  2749  0895                     	;# 
  2750  0896                     	;# 
  2751  0896                     	;# 
  2752  0896                     	;# 
  2753  089B                     	;# 
  2754  0911                     	;# 
  2755  0912                     	;# 
  2756  0913                     	;# 
  2757  0914                     	;# 
  2758  0915                     	;# 
  2759  0916                     	;# 
  2760  0918                     	;# 
  2761  0919                     	;# 
  2762  091A                     	;# 
  2763  091B                     	;# 
  2764  091C                     	;# 
  2765  091D                     	;# 
  2766  091E                     	;# 
  2767  091F                     	;# 
  2768  0E0F                     	;# 
  2769  0E10                     	;# 
  2770  0E11                     	;# 
  2771  0E12                     	;# 
  2772  0E13                     	;# 
  2773  0E14                     	;# 
  2774  0E15                     	;# 
  2775  0E16                     	;# 
  2776  0E17                     	;# 
  2777  0E18                     	;# 
  2778  0E19                     	;# 
  2779  0E1A                     	;# 
  2780  0E1B                     	;# 
  2781  0E1C                     	;# 
  2782  0E20                     	;# 
  2783  0E21                     	;# 
  2784  0E22                     	;# 
  2785  0E24                     	;# 
  2786  0E25                     	;# 
  2787  0E28                     	;# 
  2788  0E29                     	;# 
  2789  0E2A                     	;# 
  2790  0E2B                     	;# 
  2791  0E2C                     	;# 
  2792  0E2D                     	;# 
  2793  0E2E                     	;# 
  2794  0E2F                     	;# 
  2795  0E90                     	;# 
  2796  0E91                     	;# 
  2797  0E92                     	;# 
  2798  0E94                     	;# 
  2799  0E95                     	;# 
  2800  0E9C                     	;# 
  2801  0E9D                     	;# 
  2802  0E9E                     	;# 
  2803  0E9F                     	;# 
  2804  0EA0                     	;# 
  2805  0EA1                     	;# 
  2806  0EA2                     	;# 
  2807  0EA3                     	;# 
  2808  0EA4                     	;# 
  2809  0EA5                     	;# 
  2810  0EA6                     	;# 
  2811  0EA7                     	;# 
  2812  0F0F                     	;# 
  2813  0F10                     	;# 
  2814  0F11                     	;# 
  2815  0F12                     	;# 
  2816  0F13                     	;# 
  2817  0F14                     	;# 
  2818  0F15                     	;# 
  2819  0F16                     	;# 
  2820  0F17                     	;# 
  2821  0F18                     	;# 
  2822  0F19                     	;# 
  2823  0F1A                     	;# 
  2824  0F1B                     	;# 
  2825  0F1C                     	;# 
  2826  0F1D                     	;# 
  2827  0F1E                     	;# 
  2828  0F1F                     	;# 
  2829  0F20                     	;# 
  2830  0F21                     	;# 
  2831  0F22                     	;# 
  2832  0F23                     	;# 
  2833  0F24                     	;# 
  2834  0F25                     	;# 
  2835  0F26                     	;# 
  2836  0F27                     	;# 
  2837  0F28                     	;# 
  2838  0F29                     	;# 
  2839  0F2A                     	;# 
  2840  0F2B                     	;# 
  2841  0F2C                     	;# 
  2842  0F2D                     	;# 
  2843  0F2E                     	;# 
  2844  0F2F                     	;# 
  2845  0F30                     	;# 
  2846  0F31                     	;# 
  2847  0F32                     	;# 
  2848  0F33                     	;# 
  2849  0F34                     	;# 
  2850  0F35                     	;# 
  2851  0F36                     	;# 
  2852  0F37                     	;# 
  2853  0FE4                     	;# 
  2854  0FE5                     	;# 
  2855  0FE6                     	;# 
  2856  0FE7                     	;# 
  2857  0FE8                     	;# 
  2858  0FE9                     	;# 
  2859  0FEA                     	;# 
  2860  0FEB                     	;# 
  2861  0FED                     	;# 
  2862  0FEE                     	;# 
  2863  0FEF                     	;# 
  2864  0000                     	;# 
  2865  0001                     	;# 
  2866  0002                     	;# 
  2867  0003                     	;# 
  2868  0004                     	;# 
  2869  0005                     	;# 
  2870  0006                     	;# 
  2871  0007                     	;# 
  2872  0008                     	;# 
  2873  0009                     	;# 
  2874  000A                     	;# 
  2875  000B                     	;# 
  2876  000C                     	;# 
  2877  000D                     	;# 
  2878  000E                     	;# 
  2879  0010                     	;# 
  2880  0011                     	;# 
  2881  0012                     	;# 
  2882  0013                     	;# 
  2883  0014                     	;# 
  2884  0015                     	;# 
  2885  0015                     	;# 
  2886  0016                     	;# 
  2887  0016                     	;# 
  2888  0017                     	;# 
  2889  0018                     	;# 
  2890  0019                     	;# 
  2891  0019                     	;# 
  2892  001A                     	;# 
  2893  001B                     	;# 
  2894  001C                     	;# 
  2895  001D                     	;# 
  2896  001E                     	;# 
  2897  001F                     	;# 
  2898  008C                     	;# 
  2899  008D                     	;# 
  2900  008E                     	;# 
  2901  0090                     	;# 
  2902  0091                     	;# 
  2903  0092                     	;# 
  2904  0093                     	;# 
  2905  0094                     	;# 
  2906  0097                     	;# 
  2907  009B                     	;# 
  2908  009B                     	;# 
  2909  009C                     	;# 
  2910  009D                     	;# 
  2911  009E                     	;# 
  2912  009F                     	;# 
  2913  010C                     	;# 
  2914  010D                     	;# 
  2915  010E                     	;# 
  2916  0111                     	;# 
  2917  0112                     	;# 
  2918  0113                     	;# 
  2919  0114                     	;# 
  2920  0115                     	;# 
  2921  0116                     	;# 
  2922  0117                     	;# 
  2923  0118                     	;# 
  2924  0119                     	;# 
  2925  018C                     	;# 
  2926  018D                     	;# 
  2927  018E                     	;# 
  2928  0197                     	;# 
  2929  0199                     	;# 
  2930  0199                     	;# 
  2931  0199                     	;# 
  2932  019A                     	;# 
  2933  019A                     	;# 
  2934  019A                     	;# 
  2935  019B                     	;# 
  2936  019B                     	;# 
  2937  019B                     	;# 
  2938  019B                     	;# 
  2939  019B                     	;# 
  2940  019C                     	;# 
  2941  019C                     	;# 
  2942  019C                     	;# 
  2943  019D                     	;# 
  2944  019D                     	;# 
  2945  019D                     	;# 
  2946  019E                     	;# 
  2947  019E                     	;# 
  2948  019E                     	;# 
  2949  019F                     	;# 
  2950  019F                     	;# 
  2951  019F                     	;# 
  2952  019F                     	;# 
  2953  019F                     	;# 
  2954  020C                     	;# 
  2955  020D                     	;# 
  2956  020E                     	;# 
  2957  0211                     	;# 
  2958  0211                     	;# 
  2959  0212                     	;# 
  2960  0212                     	;# 
  2961  0213                     	;# 
  2962  0213                     	;# 
  2963  0214                     	;# 
  2964  0214                     	;# 
  2965  0215                     	;# 
  2966  0215                     	;# 
  2967  0215                     	;# 
  2968  0215                     	;# 
  2969  0216                     	;# 
  2970  0216                     	;# 
  2971  0217                     	;# 
  2972  0217                     	;# 
  2973  028C                     	;# 
  2974  028D                     	;# 
  2975  028E                     	;# 
  2976  0291                     	;# 
  2977  0291                     	;# 
  2978  0292                     	;# 
  2979  0293                     	;# 
  2980  0294                     	;# 
  2981  0295                     	;# 
  2982  0295                     	;# 
  2983  0296                     	;# 
  2984  0297                     	;# 
  2985  0298                     	;# 
  2986  029F                     	;# 
  2987  030C                     	;# 
  2988  030D                     	;# 
  2989  030E                     	;# 
  2990  0311                     	;# 
  2991  0311                     	;# 
  2992  0312                     	;# 
  2993  0313                     	;# 
  2994  0314                     	;# 
  2995  0315                     	;# 
  2996  0315                     	;# 
  2997  0316                     	;# 
  2998  0317                     	;# 
  2999  0318                     	;# 
  3000  038C                     	;# 
  3001  038D                     	;# 
  3002  038E                     	;# 
  3003  0391                     	;# 
  3004  0392                     	;# 
  3005  0393                     	;# 
  3006  0394                     	;# 
  3007  0395                     	;# 
  3008  0396                     	;# 
  3009  0397                     	;# 
  3010  0398                     	;# 
  3011  0399                     	;# 
  3012  039A                     	;# 
  3013  039C                     	;# 
  3014  039D                     	;# 
  3015  039E                     	;# 
  3016  039F                     	;# 
  3017  0411                     	;# 
  3018  0411                     	;# 
  3019  0412                     	;# 
  3020  0413                     	;# 
  3021  0414                     	;# 
  3022  0415                     	;# 
  3023  0416                     	;# 
  3024  0417                     	;# 
  3025  0418                     	;# 
  3026  0418                     	;# 
  3027  0419                     	;# 
  3028  041A                     	;# 
  3029  041B                     	;# 
  3030  041C                     	;# 
  3031  041D                     	;# 
  3032  041E                     	;# 
  3033  041F                     	;# 
  3034  0498                     	;# 
  3035  0498                     	;# 
  3036  0499                     	;# 
  3037  049A                     	;# 
  3038  049B                     	;# 
  3039  049B                     	;# 
  3040  049C                     	;# 
  3041  049D                     	;# 
  3042  049E                     	;# 
  3043  049F                     	;# 
  3044  0617                     	;# 
  3045  0618                     	;# 
  3046  0619                     	;# 
  3047  0619                     	;# 
  3048  061A                     	;# 
  3049  061B                     	;# 
  3050  061C                     	;# 
  3051  061C                     	;# 
  3052  061F                     	;# 
  3053  0691                     	;# 
  3054  0692                     	;# 
  3055  0693                     	;# 
  3056  0694                     	;# 
  3057  0695                     	;# 
  3058  0696                     	;# 
  3059  0697                     	;# 
  3060  0698                     	;# 
  3061  0699                     	;# 
  3062  0711                     	;# 
  3063  0712                     	;# 
  3064  0713                     	;# 
  3065  0714                     	;# 
  3066  0715                     	;# 
  3067  0716                     	;# 
  3068  0717                     	;# 
  3069  0718                     	;# 
  3070  0719                     	;# 
  3071  0891                     	;# 
  3072  0891                     	;# 
  3073  0891                     	;# 
  3074  0891                     	;# 
  3075  0891                     	;# 
  3076  0891                     	;# 
  3077  0892                     	;# 
  3078  0892                     	;# 
  3079  0892                     	;# 
  3080  0893                     	;# 
  3081  0893                     	;# 
  3082  0893                     	;# 
  3083  0893                     	;# 
  3084  0893                     	;# 
  3085  0893                     	;# 
  3086  0894                     	;# 
  3087  0894                     	;# 
  3088  0894                     	;# 
  3089  0895                     	;# 
  3090  0895                     	;# 
  3091  0895                     	;# 
  3092  0896                     	;# 
  3093  0896                     	;# 
  3094  0896                     	;# 
  3095  089B                     	;# 
  3096  0911                     	;# 
  3097  0912                     	;# 
  3098  0913                     	;# 
  3099  0914                     	;# 
  3100  0915                     	;# 
  3101  0916                     	;# 
  3102  0918                     	;# 
  3103  0919                     	;# 
  3104  091A                     	;# 
  3105  091B                     	;# 
  3106  091C                     	;# 
  3107  091D                     	;# 
  3108  091E                     	;# 
  3109  091F                     	;# 
  3110  0E0F                     	;# 
  3111  0E10                     	;# 
  3112  0E11                     	;# 
  3113  0E12                     	;# 
  3114  0E13                     	;# 
  3115  0E14                     	;# 
  3116  0E15                     	;# 
  3117  0E16                     	;# 
  3118  0E17                     	;# 
  3119  0E18                     	;# 
  3120  0E19                     	;# 
  3121  0E1A                     	;# 
  3122  0E1B                     	;# 
  3123  0E1C                     	;# 
  3124  0E20                     	;# 
  3125  0E21                     	;# 
  3126  0E22                     	;# 
  3127  0E24                     	;# 
  3128  0E25                     	;# 
  3129  0E28                     	;# 
  3130  0E29                     	;# 
  3131  0E2A                     	;# 
  3132  0E2B                     	;# 
  3133  0E2C                     	;# 
  3134  0E2D                     	;# 
  3135  0E2E                     	;# 
  3136  0E2F                     	;# 
  3137  0E90                     	;# 
  3138  0E91                     	;# 
  3139  0E92                     	;# 
  3140  0E94                     	;# 
  3141  0E95                     	;# 
  3142  0E9C                     	;# 
  3143  0E9D                     	;# 
  3144  0E9E                     	;# 
  3145  0E9F                     	;# 
  3146  0EA0                     	;# 
  3147  0EA1                     	;# 
  3148  0EA2                     	;# 
  3149  0EA3                     	;# 
  3150  0EA4                     	;# 
  3151  0EA5                     	;# 
  3152  0EA6                     	;# 
  3153  0EA7                     	;# 
  3154  0F0F                     	;# 
  3155  0F10                     	;# 
  3156  0F11                     	;# 
  3157  0F12                     	;# 
  3158  0F13                     	;# 
  3159  0F14                     	;# 
  3160  0F15                     	;# 
  3161  0F16                     	;# 
  3162  0F17                     	;# 
  3163  0F18                     	;# 
  3164  0F19                     	;# 
  3165  0F1A                     	;# 
  3166  0F1B                     	;# 
  3167  0F1C                     	;# 
  3168  0F1D                     	;# 
  3169  0F1E                     	;# 
  3170  0F1F                     	;# 
  3171  0F20                     	;# 
  3172  0F21                     	;# 
  3173  0F22                     	;# 
  3174  0F23                     	;# 
  3175  0F24                     	;# 
  3176  0F25                     	;# 
  3177  0F26                     	;# 
  3178  0F27                     	;# 
  3179  0F28                     	;# 
  3180  0F29                     	;# 
  3181  0F2A                     	;# 
  3182  0F2B                     	;# 
  3183  0F2C                     	;# 
  3184  0F2D                     	;# 
  3185  0F2E                     	;# 
  3186  0F2F                     	;# 
  3187  0F30                     	;# 
  3188  0F31                     	;# 
  3189  0F32                     	;# 
  3190  0F33                     	;# 
  3191  0F34                     	;# 
  3192  0F35                     	;# 
  3193  0F36                     	;# 
  3194  0F37                     	;# 
  3195  0FE4                     	;# 
  3196  0FE5                     	;# 
  3197  0FE6                     	;# 
  3198  0FE7                     	;# 
  3199  0FE8                     	;# 
  3200  0FE9                     	;# 
  3201  0FEA                     	;# 
  3202  0FEB                     	;# 
  3203  0FED                     	;# 
  3204  0FEE                     	;# 
  3205  0FEF                     	;# 
  3206  0000                     	;# 
  3207  0001                     	;# 
  3208  0002                     	;# 
  3209  0003                     	;# 
  3210  0004                     	;# 
  3211  0005                     	;# 
  3212  0006                     	;# 
  3213  0007                     	;# 
  3214  0008                     	;# 
  3215  0009                     	;# 
  3216  000A                     	;# 
  3217  000B                     	;# 
  3218  000C                     	;# 
  3219  000D                     	;# 
  3220  000E                     	;# 
  3221  0010                     	;# 
  3222  0011                     	;# 
  3223  0012                     	;# 
  3224  0013                     	;# 
  3225  0014                     	;# 
  3226  0015                     	;# 
  3227  0015                     	;# 
  3228  0016                     	;# 
  3229  0016                     	;# 
  3230  0017                     	;# 
  3231  0018                     	;# 
  3232  0019                     	;# 
  3233  0019                     	;# 
  3234  001A                     	;# 
  3235  001B                     	;# 
  3236  001C                     	;# 
  3237  001D                     	;# 
  3238  001E                     	;# 
  3239  001F                     	;# 
  3240  008C                     	;# 
  3241  008D                     	;# 
  3242  008E                     	;# 
  3243  0090                     	;# 
  3244  0091                     	;# 
  3245  0092                     	;# 
  3246  0093                     	;# 
  3247  0094                     	;# 
  3248  0097                     	;# 
  3249  009B                     	;# 
  3250  009B                     	;# 
  3251  009C                     	;# 
  3252  009D                     	;# 
  3253  009E                     	;# 
  3254  009F                     	;# 
  3255  010C                     	;# 
  3256  010D                     	;# 
  3257  010E                     	;# 
  3258  0111                     	;# 
  3259  0112                     	;# 
  3260  0113                     	;# 
  3261  0114                     	;# 
  3262  0115                     	;# 
  3263  0116                     	;# 
  3264  0117                     	;# 
  3265  0118                     	;# 
  3266  0119                     	;# 
  3267  018C                     	;# 
  3268  018D                     	;# 
  3269  018E                     	;# 
  3270  0197                     	;# 
  3271  0199                     	;# 
  3272  0199                     	;# 
  3273  0199                     	;# 
  3274  019A                     	;# 
  3275  019A                     	;# 
  3276  019A                     	;# 
  3277  019B                     	;# 
  3278  019B                     	;# 
  3279  019B                     	;# 
  3280  019B                     	;# 
  3281  019B                     	;# 
  3282  019C                     	;# 
  3283  019C                     	;# 
  3284  019C                     	;# 
  3285  019D                     	;# 
  3286  019D                     	;# 
  3287  019D                     	;# 
  3288  019E                     	;# 
  3289  019E                     	;# 
  3290  019E                     	;# 
  3291  019F                     	;# 
  3292  019F                     	;# 
  3293  019F                     	;# 
  3294  019F                     	;# 
  3295  019F                     	;# 
  3296  020C                     	;# 
  3297  020D                     	;# 
  3298  020E                     	;# 
  3299  0211                     	;# 
  3300  0211                     	;# 
  3301  0212                     	;# 
  3302  0212                     	;# 
  3303  0213                     	;# 
  3304  0213                     	;# 
  3305  0214                     	;# 
  3306  0214                     	;# 
  3307  0215                     	;# 
  3308  0215                     	;# 
  3309  0215                     	;# 
  3310  0215                     	;# 
  3311  0216                     	;# 
  3312  0216                     	;# 
  3313  0217                     	;# 
  3314  0217                     	;# 
  3315  028C                     	;# 
  3316  028D                     	;# 
  3317  028E                     	;# 
  3318  0291                     	;# 
  3319  0291                     	;# 
  3320  0292                     	;# 
  3321  0293                     	;# 
  3322  0294                     	;# 
  3323  0295                     	;# 
  3324  0295                     	;# 
  3325  0296                     	;# 
  3326  0297                     	;# 
  3327  0298                     	;# 
  3328  029F                     	;# 
  3329  030C                     	;# 
  3330  030D                     	;# 
  3331  030E                     	;# 
  3332  0311                     	;# 
  3333  0311                     	;# 
  3334  0312                     	;# 
  3335  0313                     	;# 
  3336  0314                     	;# 
  3337  0315                     	;# 
  3338  0315                     	;# 
  3339  0316                     	;# 
  3340  0317                     	;# 
  3341  0318                     	;# 
  3342  038C                     	;# 
  3343  038D                     	;# 
  3344  038E                     	;# 
  3345  0391                     	;# 
  3346  0392                     	;# 
  3347  0393                     	;# 
  3348  0394                     	;# 
  3349  0395                     	;# 
  3350  0396                     	;# 
  3351  0397                     	;# 
  3352  0398                     	;# 
  3353  0399                     	;# 
  3354  039A                     	;# 
  3355  039C                     	;# 
  3356  039D                     	;# 
  3357  039E                     	;# 
  3358  039F                     	;# 
  3359  0411                     	;# 
  3360  0411                     	;# 
  3361  0412                     	;# 
  3362  0413                     	;# 
  3363  0414                     	;# 
  3364  0415                     	;# 
  3365  0416                     	;# 
  3366  0417                     	;# 
  3367  0418                     	;# 
  3368  0418                     	;# 
  3369  0419                     	;# 
  3370  041A                     	;# 
  3371  041B                     	;# 
  3372  041C                     	;# 
  3373  041D                     	;# 
  3374  041E                     	;# 
  3375  041F                     	;# 
  3376  0498                     	;# 
  3377  0498                     	;# 
  3378  0499                     	;# 
  3379  049A                     	;# 
  3380  049B                     	;# 
  3381  049B                     	;# 
  3382  049C                     	;# 
  3383  049D                     	;# 
  3384  049E                     	;# 
  3385  049F                     	;# 
  3386  0617                     	;# 
  3387  0618                     	;# 
  3388  0619                     	;# 
  3389  0619                     	;# 
  3390  061A                     	;# 
  3391  061B                     	;# 
  3392  061C                     	;# 
  3393  061C                     	;# 
  3394  061F                     	;# 
  3395  0691                     	;# 
  3396  0692                     	;# 
  3397  0693                     	;# 
  3398  0694                     	;# 
  3399  0695                     	;# 
  3400  0696                     	;# 
  3401  0697                     	;# 
  3402  0698                     	;# 
  3403  0699                     	;# 
  3404  0711                     	;# 
  3405  0712                     	;# 
  3406  0713                     	;# 
  3407  0714                     	;# 
  3408  0715                     	;# 
  3409  0716                     	;# 
  3410  0717                     	;# 
  3411  0718                     	;# 
  3412  0719                     	;# 
  3413  0891                     	;# 
  3414  0891                     	;# 
  3415  0891                     	;# 
  3416  0891                     	;# 
  3417  0891                     	;# 
  3418  0891                     	;# 
  3419  0892                     	;# 
  3420  0892                     	;# 
  3421  0892                     	;# 
  3422  0893                     	;# 
  3423  0893                     	;# 
  3424  0893                     	;# 
  3425  0893                     	;# 
  3426  0893                     	;# 
  3427  0893                     	;# 
  3428  0894                     	;# 
  3429  0894                     	;# 
  3430  0894                     	;# 
  3431  0895                     	;# 
  3432  0895                     	;# 
  3433  0895                     	;# 
  3434  0896                     	;# 
  3435  0896                     	;# 
  3436  0896                     	;# 
  3437  089B                     	;# 
  3438  0911                     	;# 
  3439  0912                     	;# 
  3440  0913                     	;# 
  3441  0914                     	;# 
  3442  0915                     	;# 
  3443  0916                     	;# 
  3444  0918                     	;# 
  3445  0919                     	;# 
  3446  091A                     	;# 
  3447  091B                     	;# 
  3448  091C                     	;# 
  3449  091D                     	;# 
  3450  091E                     	;# 
  3451  091F                     	;# 
  3452  0E0F                     	;# 
  3453  0E10                     	;# 
  3454  0E11                     	;# 
  3455  0E12                     	;# 
  3456  0E13                     	;# 
  3457  0E14                     	;# 
  3458  0E15                     	;# 
  3459  0E16                     	;# 
  3460  0E17                     	;# 
  3461  0E18                     	;# 
  3462  0E19                     	;# 
  3463  0E1A                     	;# 
  3464  0E1B                     	;# 
  3465  0E1C                     	;# 
  3466  0E20                     	;# 
  3467  0E21                     	;# 
  3468  0E22                     	;# 
  3469  0E24                     	;# 
  3470  0E25                     	;# 
  3471  0E28                     	;# 
  3472  0E29                     	;# 
  3473  0E2A                     	;# 
  3474  0E2B                     	;# 
  3475  0E2C                     	;# 
  3476  0E2D                     	;# 
  3477  0E2E                     	;# 
  3478  0E2F                     	;# 
  3479  0E90                     	;# 
  3480  0E91                     	;# 
  3481  0E92                     	;# 
  3482  0E94                     	;# 
  3483  0E95                     	;# 
  3484  0E9C                     	;# 
  3485  0E9D                     	;# 
  3486  0E9E                     	;# 
  3487  0E9F                     	;# 
  3488  0EA0                     	;# 
  3489  0EA1                     	;# 
  3490  0EA2                     	;# 
  3491  0EA3                     	;# 
  3492  0EA4                     	;# 
  3493  0EA5                     	;# 
  3494  0EA6                     	;# 
  3495  0EA7                     	;# 
  3496  0F0F                     	;# 
  3497  0F10                     	;# 
  3498  0F11                     	;# 
  3499  0F12                     	;# 
  3500  0F13                     	;# 
  3501  0F14                     	;# 
  3502  0F15                     	;# 
  3503  0F16                     	;# 
  3504  0F17                     	;# 
  3505  0F18                     	;# 
  3506  0F19                     	;# 
  3507  0F1A                     	;# 
  3508  0F1B                     	;# 
  3509  0F1C                     	;# 
  3510  0F1D                     	;# 
  3511  0F1E                     	;# 
  3512  0F1F                     	;# 
  3513  0F20                     	;# 
  3514  0F21                     	;# 
  3515  0F22                     	;# 
  3516  0F23                     	;# 
  3517  0F24                     	;# 
  3518  0F25                     	;# 
  3519  0F26                     	;# 
  3520  0F27                     	;# 
  3521  0F28                     	;# 
  3522  0F29                     	;# 
  3523  0F2A                     	;# 
  3524  0F2B                     	;# 
  3525  0F2C                     	;# 
  3526  0F2D                     	;# 
  3527  0F2E                     	;# 
  3528  0F2F                     	;# 
  3529  0F30                     	;# 
  3530  0F31                     	;# 
  3531  0F32                     	;# 
  3532  0F33                     	;# 
  3533  0F34                     	;# 
  3534  0F35                     	;# 
  3535  0F36                     	;# 
  3536  0F37                     	;# 
  3537  0FE4                     	;# 
  3538  0FE5                     	;# 
  3539  0FE6                     	;# 
  3540  0FE7                     	;# 
  3541  0FE8                     	;# 
  3542  0FE9                     	;# 
  3543  0FEA                     	;# 
  3544  0FEB                     	;# 
  3545  0FED                     	;# 
  3546  0FEE                     	;# 
  3547  0FEF                     	;# 
  3548  0000                     	;# 
  3549  0001                     	;# 
  3550  0002                     	;# 
  3551  0003                     	;# 
  3552  0004                     	;# 
  3553  0005                     	;# 
  3554  0006                     	;# 
  3555  0007                     	;# 
  3556  0008                     	;# 
  3557  0009                     	;# 
  3558  000A                     	;# 
  3559  000B                     	;# 
  3560  000C                     	;# 
  3561  000D                     	;# 
  3562  000E                     	;# 
  3563  0010                     	;# 
  3564  0011                     	;# 
  3565  0012                     	;# 
  3566  0013                     	;# 
  3567  0014                     	;# 
  3568  0015                     	;# 
  3569  0015                     	;# 
  3570  0016                     	;# 
  3571  0016                     	;# 
  3572  0017                     	;# 
  3573  0018                     	;# 
  3574  0019                     	;# 
  3575  0019                     	;# 
  3576  001A                     	;# 
  3577  001B                     	;# 
  3578  001C                     	;# 
  3579  001D                     	;# 
  3580  001E                     	;# 
  3581  001F                     	;# 
  3582  008C                     	;# 
  3583  008D                     	;# 
  3584  008E                     	;# 
  3585  0090                     	;# 
  3586  0091                     	;# 
  3587  0092                     	;# 
  3588  0093                     	;# 
  3589  0094                     	;# 
  3590  0097                     	;# 
  3591  009B                     	;# 
  3592  009B                     	;# 
  3593  009C                     	;# 
  3594  009D                     	;# 
  3595  009E                     	;# 
  3596  009F                     	;# 
  3597  010C                     	;# 
  3598  010D                     	;# 
  3599  010E                     	;# 
  3600  0111                     	;# 
  3601  0112                     	;# 
  3602  0113                     	;# 
  3603  0114                     	;# 
  3604  0115                     	;# 
  3605  0116                     	;# 
  3606  0117                     	;# 
  3607  0118                     	;# 
  3608  0119                     	;# 
  3609  018C                     	;# 
  3610  018D                     	;# 
  3611  018E                     	;# 
  3612  0197                     	;# 
  3613  0199                     	;# 
  3614  0199                     	;# 
  3615  0199                     	;# 
  3616  019A                     	;# 
  3617  019A                     	;# 
  3618  019A                     	;# 
  3619  019B                     	;# 
  3620  019B                     	;# 
  3621  019B                     	;# 
  3622  019B                     	;# 
  3623  019B                     	;# 
  3624  019C                     	;# 
  3625  019C                     	;# 
  3626  019C                     	;# 
  3627  019D                     	;# 
  3628  019D                     	;# 
  3629  019D                     	;# 
  3630  019E                     	;# 
  3631  019E                     	;# 
  3632  019E                     	;# 
  3633  019F                     	;# 
  3634  019F                     	;# 
  3635  019F                     	;# 
  3636  019F                     	;# 
  3637  019F                     	;# 
  3638  020C                     	;# 
  3639  020D                     	;# 
  3640  020E                     	;# 
  3641  0211                     	;# 
  3642  0211                     	;# 
  3643  0212                     	;# 
  3644  0212                     	;# 
  3645  0213                     	;# 
  3646  0213                     	;# 
  3647  0214                     	;# 
  3648  0214                     	;# 
  3649  0215                     	;# 
  3650  0215                     	;# 
  3651  0215                     	;# 
  3652  0215                     	;# 
  3653  0216                     	;# 
  3654  0216                     	;# 
  3655  0217                     	;# 
  3656  0217                     	;# 
  3657  028C                     	;# 
  3658  028D                     	;# 
  3659  028E                     	;# 
  3660  0291                     	;# 
  3661  0291                     	;# 
  3662  0292                     	;# 
  3663  0293                     	;# 
  3664  0294                     	;# 
  3665  0295                     	;# 
  3666  0295                     	;# 
  3667  0296                     	;# 
  3668  0297                     	;# 
  3669  0298                     	;# 
  3670  029F                     	;# 
  3671  030C                     	;# 
  3672  030D                     	;# 
  3673  030E                     	;# 
  3674  0311                     	;# 
  3675  0311                     	;# 
  3676  0312                     	;# 
  3677  0313                     	;# 
  3678  0314                     	;# 
  3679  0315                     	;# 
  3680  0315                     	;# 
  3681  0316                     	;# 
  3682  0317                     	;# 
  3683  0318                     	;# 
  3684  038C                     	;# 
  3685  038D                     	;# 
  3686  038E                     	;# 
  3687  0391                     	;# 
  3688  0392                     	;# 
  3689  0393                     	;# 
  3690  0394                     	;# 
  3691  0395                     	;# 
  3692  0396                     	;# 
  3693  0397                     	;# 
  3694  0398                     	;# 
  3695  0399                     	;# 
  3696  039A                     	;# 
  3697  039C                     	;# 
  3698  039D                     	;# 
  3699  039E                     	;# 
  3700  039F                     	;# 
  3701  0411                     	;# 
  3702  0411                     	;# 
  3703  0412                     	;# 
  3704  0413                     	;# 
  3705  0414                     	;# 
  3706  0415                     	;# 
  3707  0416                     	;# 
  3708  0417                     	;# 
  3709  0418                     	;# 
  3710  0418                     	;# 
  3711  0419                     	;# 
  3712  041A                     	;# 
  3713  041B                     	;# 
  3714  041C                     	;# 
  3715  041D                     	;# 
  3716  041E                     	;# 
  3717  041F                     	;# 
  3718  0498                     	;# 
  3719  0498                     	;# 
  3720  0499                     	;# 
  3721  049A                     	;# 
  3722  049B                     	;# 
  3723  049B                     	;# 
  3724  049C                     	;# 
  3725  049D                     	;# 
  3726  049E                     	;# 
  3727  049F                     	;# 
  3728  0617                     	;# 
  3729  0618                     	;# 
  3730  0619                     	;# 
  3731  0619                     	;# 
  3732  061A                     	;# 
  3733  061B                     	;# 
  3734  061C                     	;# 
  3735  061C                     	;# 
  3736  061F                     	;# 
  3737  0691                     	;# 
  3738  0692                     	;# 
  3739  0693                     	;# 
  3740  0694                     	;# 
  3741  0695                     	;# 
  3742  0696                     	;# 
  3743  0697                     	;# 
  3744  0698                     	;# 
  3745  0699                     	;# 
  3746  0711                     	;# 
  3747  0712                     	;# 
  3748  0713                     	;# 
  3749  0714                     	;# 
  3750  0715                     	;# 
  3751  0716                     	;# 
  3752  0717                     	;# 
  3753  0718                     	;# 
  3754  0719                     	;# 
  3755  0891                     	;# 
  3756  0891                     	;# 
  3757  0891                     	;# 
  3758  0891                     	;# 
  3759  0891                     	;# 
  3760  0891                     	;# 
  3761  0892                     	;# 
  3762  0892                     	;# 
  3763  0892                     	;# 
  3764  0893                     	;# 
  3765  0893                     	;# 
  3766  0893                     	;# 
  3767  0893                     	;# 
  3768  0893                     	;# 
  3769  0893                     	;# 
  3770  0894                     	;# 
  3771  0894                     	;# 
  3772  0894                     	;# 
  3773  0895                     	;# 
  3774  0895                     	;# 
  3775  0895                     	;# 
  3776  0896                     	;# 
  3777  0896                     	;# 
  3778  0896                     	;# 
  3779  089B                     	;# 
  3780  0911                     	;# 
  3781  0912                     	;# 
  3782  0913                     	;# 
  3783  0914                     	;# 
  3784  0915                     	;# 
  3785  0916                     	;# 
  3786  0918                     	;# 
  3787  0919                     	;# 
  3788  091A                     	;# 
  3789  091B                     	;# 
  3790  091C                     	;# 
  3791  091D                     	;# 
  3792  091E                     	;# 
  3793  091F                     	;# 
  3794  0E0F                     	;# 
  3795  0E10                     	;# 
  3796  0E11                     	;# 
  3797  0E12                     	;# 
  3798  0E13                     	;# 
  3799  0E14                     	;# 
  3800  0E15                     	;# 
  3801  0E16                     	;# 
  3802  0E17                     	;# 
  3803  0E18                     	;# 
  3804  0E19                     	;# 
  3805  0E1A                     	;# 
  3806  0E1B                     	;# 
  3807  0E1C                     	;# 
  3808  0E20                     	;# 
  3809  0E21                     	;# 
  3810  0E22                     	;# 
  3811  0E24                     	;# 
  3812  0E25                     	;# 
  3813  0E28                     	;# 
  3814  0E29                     	;# 
  3815  0E2A                     	;# 
  3816  0E2B                     	;# 
  3817  0E2C                     	;# 
  3818  0E2D                     	;# 
  3819  0E2E                     	;# 
  3820  0E2F                     	;# 
  3821  0E90                     	;# 
  3822  0E91                     	;# 
  3823  0E92                     	;# 
  3824  0E94                     	;# 
  3825  0E95                     	;# 
  3826  0E9C                     	;# 
  3827  0E9D                     	;# 
  3828  0E9E                     	;# 
  3829  0E9F                     	;# 
  3830  0EA0                     	;# 
  3831  0EA1                     	;# 
  3832  0EA2                     	;# 
  3833  0EA3                     	;# 
  3834  0EA4                     	;# 
  3835  0EA5                     	;# 
  3836  0EA6                     	;# 
  3837  0EA7                     	;# 
  3838  0F0F                     	;# 
  3839  0F10                     	;# 
  3840  0F11                     	;# 
  3841  0F12                     	;# 
  3842  0F13                     	;# 
  3843  0F14                     	;# 
  3844  0F15                     	;# 
  3845  0F16                     	;# 
  3846  0F17                     	;# 
  3847  0F18                     	;# 
  3848  0F19                     	;# 
  3849  0F1A                     	;# 
  3850  0F1B                     	;# 
  3851  0F1C                     	;# 
  3852  0F1D                     	;# 
  3853  0F1E                     	;# 
  3854  0F1F                     	;# 
  3855  0F20                     	;# 
  3856  0F21                     	;# 
  3857  0F22                     	;# 
  3858  0F23                     	;# 
  3859  0F24                     	;# 
  3860  0F25                     	;# 
  3861  0F26                     	;# 
  3862  0F27                     	;# 
  3863  0F28                     	;# 
  3864  0F29                     	;# 
  3865  0F2A                     	;# 
  3866  0F2B                     	;# 
  3867  0F2C                     	;# 
  3868  0F2D                     	;# 
  3869  0F2E                     	;# 
  3870  0F2F                     	;# 
  3871  0F30                     	;# 
  3872  0F31                     	;# 
  3873  0F32                     	;# 
  3874  0F33                     	;# 
  3875  0F34                     	;# 
  3876  0F35                     	;# 
  3877  0F36                     	;# 
  3878  0F37                     	;# 
  3879  0FE4                     	;# 
  3880  0FE5                     	;# 
  3881  0FE6                     	;# 
  3882  0FE7                     	;# 
  3883  0FE8                     	;# 
  3884  0FE9                     	;# 
  3885  0FEA                     	;# 
  3886  0FEB                     	;# 
  3887  0FED                     	;# 
  3888  0FEE                     	;# 
  3889  0FEF                     	;_Rbuff
  3890                           
  3891                           	psect	idataBANK0
  3892  0003                     __pidataBANK0:	
  3893                           
  3894                           ;initializer for _LED_Color
  3895  0003  3401               	retlw	1
  3896                           
  3897                           	psect	stringtext
  3898  07FD                     __pstringtext:	
  3899  07FD                     _fctsupported:	
  3900  07FD  3401               	retlw	1
  3901  07FE  3402               	retlw	2
  3902  07FF  3403               	retlw	3
  3903  0800  3404               	retlw	4
  3904  0801  3405               	retlw	5
  3905  0802  3406               	retlw	6
  3906  0803  340F               	retlw	15
  3907  0804  3410               	retlw	16
  3908  0805                     __end_of_fctsupported:	
  3909                           
  3910                           	psect	nvBANK2
  3911  015A                     __pnvBANK2:	
  3912  015A                     _IOCCF5_InterruptHandler:	
  3913  015A                     	ds	2
  3914  015C                     _IOCCF4_InterruptHandler:	
  3915  015C                     	ds	2
  3916  000E                     _PORTCbits	set	14
  3917  0011                     _PIR1bits	set	17
  3918  000B                     _INTCONbits	set	11
  3919  0014                     _PIR4bits	set	20
  3920  0017                     _T0CON0bits	set	23
  3921  0010                     _PIR0bits	set	16
  3922  0015                     _TMR0L	set	21
  3923  0016                     _TMR0H	set	22
  3924  0018                     _T0CON1	set	24
  3925  0017                     _T0CON0	set	23
  3926  0013                     _PIR3bits	set	19
  3927  005F                     _GIE	set	95
  3928  0097                     _WDTCON	set	151
  3929  0094                     _PIE4bits	set	148
  3930  008E                     _TRISC	set	142
  3931  008D                     _TRISB	set	141
  3932  008C                     _TRISA	set	140
  3933  0090                     _PIE0bits	set	144
  3934  0091                     _PIE1bits	set	145
  3935  0093                     _PIE3bits	set	147
  3936  010E                     _LATCbits	set	270
  3937  010D                     _LATBbits	set	269
  3938  010E                     _LATC	set	270
  3939  010D                     _LATB	set	269
  3940  010C                     _LATA	set	268
  3941  018C                     _ANSELA	set	396
  3942  018D                     _ANSELB	set	397
  3943  018E                     _ANSELC	set	398
  3944  0199                     _RC1REG	set	409
  3945  019D                     _RC1STAbits	set	413
  3946  019A                     _TX1REG	set	410
  3947  019C                     _SP1BRGH	set	412
  3948  019B                     _SP1BRGL	set	411
  3949  019E                     _TX1STA	set	414
  3950  019D                     _RC1STA	set	413
  3951  019F                     _BAUD1CON	set	415
  3952  020E                     _WPUC	set	526
  3953  020C                     _WPUA	set	524
  3954  020D                     _WPUB	set	525
  3955  029F                     _CCPTMRSbits	set	671
  3956  0291                     _CCPR1L	set	657
  3957  0292                     _CCPR1H	set	658
  3958  0294                     _CCP1CAP	set	660
  3959  0293                     _CCP1CON	set	659
  3960  028E                     _ODCONC	set	654
  3961  028D                     _ODCONB	set	653
  3962  028C                     _ODCONA	set	652
  3963  038C                     _INLVLA	set	908
  3964  038E                     _INLVLC	set	910
  3965  0397                     _IOCCPbits	set	919
  3966  0398                     _IOCCNbits	set	920
  3967  0399                     _IOCCFbits	set	921
  3968  0414                     _T3GCONbits	set	1044
  3969  0413                     _T3CONbits	set	1043
  3970  0411                     _TMR3L	set	1041
  3971  0412                     _TMR3H	set	1042
  3972  0414                     _T3GCON	set	1044
  3973  0413                     _T3CON	set	1043
  3974  091E                     _OSCTUNE	set	2334
  3975  091F                     _OSCFRQ	set	2335
  3976  091D                     _OSCEN	set	2333
  3977  091B                     _OSCCON3	set	2331
  3978  0919                     _OSCCON1	set	2329
  3979  48E0                     _PLLR	set	18656
  3980  0E14                     _CCP1PPSbits	set	3604
  3981  0E24                     _RXPPSbits	set	3620
  3982  0E0F                     _PPSLOCKbits	set	3599
  3983  0E0F                     _PPSLOCK	set	3599
  3984  0E9D                     _RB5PPSbits	set	3741
  3985                           
  3986                           ; #config settings
  3987  0000                     
  3988                           	psect	cinit
  3989  0052                     start_initialization:	
  3990  0052                     __initialization:		;BIGRAM
  3991                           
  3992                           ; Initialize objects allocated to BANK0
  3993  0052  3180  2003  3180   	fcall	__pidataBANK0	;fetch initializer
  3994  0055  00EA               	movwf	__pdataBANK0& (0+127)
  3995                           
  3996                           ; Clear objects allocated to BIGRAM
  3997  0056  308B               	movlw	low (0+8587)
  3998  0057  0084               	movwf	4
  3999  0058  3021               	movlw	high (0+8587)
  4000  0059  0085               	movwf	5
  4001  005A  3065               	movlw	101
  4002  005B  00FE               	movwf	btemp
  4003  005C  3000               	movlw	0
  4004  005D  00FF               	movwf	btemp+1
  4005  005E  318B  2316  3180   	fcall	clear_ram0
  4006                           
  4007                           ; Clear objects allocated to BANK0
  4008  0061  3051               	movlw	low __pbssBANK0
  4009  0062  0084               	movwf	4
  4010  0063  3000               	movlw	high __pbssBANK0
  4011  0064  0085               	movwf	5
  4012  0065  3019               	movlw	25
  4013  0066  00FE               	movwf	btemp
  4014  0067  3000               	movlw	0
  4015  0068  00FF               	movwf	btemp+1
  4016  0069  318B  2316  3180   	fcall	clear_ram0
  4017                           
  4018                           ; Clear objects allocated to BANK1
  4019  006C  30A0               	movlw	low __pbssBANK1
  4020  006D  0084               	movwf	4
  4021  006E  3000               	movlw	high __pbssBANK1
  4022  006F  0085               	movwf	5
  4023  0070  304F               	movlw	79
  4024  0071  00FE               	movwf	btemp
  4025  0072  3000               	movlw	0
  4026  0073  00FF               	movwf	btemp+1
  4027  0074  318B  2316  3180   	fcall	clear_ram0
  4028                           
  4029                           ; Clear objects allocated to BANK2
  4030  0077  3020               	movlw	low __pbssBANK2
  4031  0078  0084               	movwf	4
  4032  0079  3001               	movlw	high __pbssBANK2
  4033  007A  0085               	movwf	5
  4034  007B  303A               	movlw	58
  4035  007C  00FE               	movwf	btemp
  4036  007D  3000               	movlw	0
  4037  007E  00FF               	movwf	btemp+1
  4038  007F  318B  2316  3180   	fcall	clear_ram0
  4039                           
  4040                           ; Clear objects allocated to BANK3
  4041  0082  30A0               	movlw	low __pbssBANK3
  4042  0083  0084               	movwf	4
  4043  0084  3001               	movlw	high __pbssBANK3
  4044  0085  0085               	movwf	5
  4045  0086  3020               	movlw	32
  4046  0087  00FE               	movwf	btemp
  4047  0088  3000               	movlw	0
  4048  0089  00FF               	movwf	btemp+1
  4049  008A  318B  2316         	fcall	clear_ram0
  4050  008C                     end_of_initialization:	
  4051                           ;End of C runtime variable initialization code
  4052                           
  4053  008C                     __end_of__initialization:	
  4054  008C  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  4055  008D  0020               	movlb	0
  4056  008E  3184  2CE1         	ljmp	_main	;jump to C main() function
  4057                           
  4058                           	psect	bssBANK0
  4059  0051                     __pbssBANK0:	
  4060  0051                     _LedON_Duration_msec:	
  4061  0051                     	ds	2
  4062  0053                     _Blick_tickPointMsec:	
  4063  0053                     	ds	2
  4064  0055                     _EPCPulseCountAntiClock:	
  4065  0055                     	ds	2
  4066  0057                     _EPCPulseCountClock:	
  4067  0057                     	ds	2
  4068  0059                     _timer3ReloadVal:	
  4069  0059                     	ds	2
  4070  005B                     _u8regsize:	
  4071  005B                     	ds	1
  4072  005C                     _au16regs:	
  4073  005C                     	ds	1
  4074  005D                     _u8lastRec:	
  4075  005D                     	ds	1
  4076  005E                     _u8BufferSize:	
  4077  005E                     	ds	1
  4078  005F                     _u8state:	
  4079  005F                     	ds	1
  4080  0060                     _u8ID:	
  4081  0060                     	ds	1
  4082  0061                     _Led_ON:	
  4083  0061                     	ds	1
  4084  0062                     _delayFlag:	
  4085  0062                     	ds	1
  4086  0063                     _PulseStatus:	
  4087  0063                     	ds	1
  4088  0064                     _eusartRxCount:	
  4089  0064                     	ds	1
  4090  0065                     _eusartRxTail:	
  4091  0065                     	ds	1
  4092  0066                     _eusartRxHead:	
  4093  0066                     	ds	1
  4094  0067                     _eusartTxBufferRemaining:	
  4095  0067                     	ds	1
  4096  0068                     _eusartTxTail:	
  4097  0068                     	ds	1
  4098  0069                     _eusartTxHead:	
  4099  0069                     	ds	1
  4100                           
  4101                           	psect	dataBANK0
  4102  006A                     __pdataBANK0:	
  4103  006A                     _LED_Color:	
  4104  006A                     	ds	1
  4105                           
  4106                           	psect	bssBANK1
  4107  00A0                     __pbssBANK1:	
  4108  00A0                     _au8Buffer:	
  4109  00A0                     	ds	32
  4110  00C0                     _u32time:	
  4111  00C0                     	ds	4
  4112  00C4                     _TimertickMsec:	
  4113  00C4                     	ds	4
  4114  00C8                     _EPCRunTime:	
  4115  00C8                     	ds	4
  4116  00CC                     _u16timeOut:	
  4117  00CC                     	ds	2
  4118  00CE                     _u16InCnt:	
  4119  00CE                     	ds	2
  4120  00D0                     _Blick_tickPoint:	
  4121  00D0                     	ds	2
  4122  00D2                     _LED_msec_Cnt:	
  4123  00D2                     	ds	2
  4124  00D4                     _delayCount:	
  4125  00D4                     	ds	2
  4126  00D6                     _capturePulseusec:	
  4127  00D6                     	ds	2
  4128  00D8                     _TMR0_InterruptHandler:	
  4129  00D8                     	ds	2
  4130  00DA                     _TMR3_InterruptHandler:	
  4131  00DA                     	ds	2
  4132  00DC                     _u8lastError:	
  4133  00DC                     	ds	1
  4134  00DD                     _u8query:	
  4135  00DD                     	ds	1
  4136  00DE                     _u8state_t:	
  4137  00DE                     	ds	1
  4138  00DF                     _ModbusData:	
  4139  00DF                     	ds	16
  4140                           
  4141                           	psect	bssBANK2
  4142  0120                     __pbssBANK2:	
  4143  0120                     _eusartTxBuffer:	
  4144  0120                     	ds	32
  4145  0140                     _telegram:	
  4146  0140                     	ds	14
  4147  014E                     _u32timeOut:	
  4148  014E                     	ds	4
  4149  0152                     _u32wait:	
  4150  0152                     	ds	4
  4151  0156                     _u16errCnt:	
  4152  0156                     	ds	2
  4153  0158                     _u16OutCnt:	
  4154  0158                     	ds	2
  4155                           
  4156                           	psect	bssBANK3
  4157  01A0                     __pbssBANK3:	
  4158  01A0                     _eusartRxBuffer:	
  4159  01A0                     	ds	32
  4160                           
  4161                           	psect	clrtext
  4162  0B16                     clear_ram0:	
  4163                           ;	Called with FSR0 containing the base address, and
  4164                           ;	btemp/btemp+1 has the size to clear
  4165                           
  4166  0B16  0064               	clrwdt	;clear the watchdog before getting into this loop
  4167  0B17                     clrloop0:	
  4168  0B17  0180               	clrf	0	;clear RAM location pointed to by FSR
  4169  0B18  3101               	addfsr 0,1
  4170  0B19  3001               	movlw	1
  4171  0B1A  02FE               	subwf	126,f
  4172  0B1B  3000               	movlw	0
  4173  0B1C  3BFF               	subwfb	127,f
  4174  0B1D  087F               	movf	127,w
  4175  0B1E  047E               	iorwf	126,w
  4176  0B1F  1903               	btfsc	3,2
  4177  0B20  3400               	retlw	0	;all done for this memory range, return
  4178  0B21  2B17               	goto	clrloop0	;have we reached the end yet?
  4179                           
  4180                           	psect	cstackBANK2
  4181  015E                     __pcstackBANK2:	
  4182  015E                     ModbuspollSlave@i8state:	
  4183                           
  4184                           ; 1 bytes @ 0x0
  4185  015E                     	ds	1
  4186  015F                     ModbuspollSlave@u8current:	
  4187                           
  4188                           ; 1 bytes @ 0x1
  4189  015F                     	ds	1
  4190  0160                     ModbuspollSlave@u8exception:	
  4191                           
  4192                           ; 1 bytes @ 0x2
  4193  0160                     	ds	1
  4194  0161                     ModbuspollSlave@regs:	
  4195                           
  4196                           ; 1 bytes @ 0x3
  4197  0161                     	ds	1
  4198                           
  4199                           	psect	cstackBANK1
  4200  00EF                     __pcstackBANK1:	
  4201  00EF                     ??_main:	
  4202                           
  4203                           ; 1 bytes @ 0x0
  4204  00EF                     	ds	1
  4205                           
  4206                           	psect	cstackCOMMON
  4207  0070                     __pcstackCOMMON:	
  4208  0070                     ?_TMR3_DefaultInterruptHandler:	
  4209  0070                     ?_TMR3_StartTimer:	
  4210                           ; 1 bytes @ 0x0
  4211                           
  4212  0070                     ?_Timer3_Overflow:	
  4213                           ; 1 bytes @ 0x0
  4214                           
  4215  0070                     ?_TMR0_DefaultInterruptHandler:	
  4216                           ; 1 bytes @ 0x0
  4217                           
  4218  0070                     ??_TMR0_DefaultInterruptHandler:	
  4219                           ; 1 bytes @ 0x0
  4220                           
  4221  0070                     ?_TMR0_StartTimer:	
  4222                           ; 1 bytes @ 0x0
  4223                           
  4224  0070                     ?_TMR0_CallBack:	
  4225                           ; 1 bytes @ 0x0
  4226                           
  4227  0070                     ?_Timer0_tick10msecFunc:	
  4228                           ; 1 bytes @ 0x0
  4229                           
  4230  0070                     ??_Timer0_tick10msecFunc:	
  4231                           ; 1 bytes @ 0x0
  4232                           
  4233  0070                     ?_IOCCF4_DefaultInterruptHandler:	
  4234                           ; 1 bytes @ 0x0
  4235                           
  4236  0070                     ??_IOCCF4_DefaultInterruptHandler:	
  4237                           ; 1 bytes @ 0x0
  4238                           
  4239  0070                     ?_IOCCF5_DefaultInterruptHandler:	
  4240                           ; 1 bytes @ 0x0
  4241                           
  4242  0070                     ??_IOCCF5_DefaultInterruptHandler:	
  4243                           ; 1 bytes @ 0x0
  4244                           
  4245  0070                     ?_IOCCF4_ISR:	
  4246                           ; 1 bytes @ 0x0
  4247                           
  4248  0070                     ??_IOCCF4_ISR:	
  4249                           ; 1 bytes @ 0x0
  4250                           
  4251  0070                     ?_IOCCF5_ISR:	
  4252                           ; 1 bytes @ 0x0
  4253                           
  4254  0070                     ??_IOCCF5_ISR:	
  4255                           ; 1 bytes @ 0x0
  4256                           
  4257  0070                     ?_OSCILLATOR_Initialize:	
  4258                           ; 1 bytes @ 0x0
  4259                           
  4260  0070                     ?_WDT_Initialize:	
  4261                           ; 1 bytes @ 0x0
  4262                           
  4263  0070                     ?_LedONStatusBusy:	
  4264                           ; 1 bytes @ 0x0
  4265                           
  4266  0070                     ?_Modbusinit:	
  4267                           ; 1 bytes @ 0x0
  4268                           
  4269  0070                     ?_LedON_Control_10msec:	
  4270                           ; 1 bytes @ 0x0
  4271                           
  4272  0070                     ??_LedON_Control_10msec:	
  4273                           ; 1 bytes @ 0x0
  4274                           
  4275  0070                     ?_sendTxBuffer:	
  4276                           ; 1 bytes @ 0x0
  4277                           
  4278  0070                     ?_getRxBuffer:	
  4279                           ; 1 bytes @ 0x0
  4280                           
  4281  0070                     ?_validateRequest:	
  4282                           ; 1 bytes @ 0x0
  4283                           
  4284  0070                     ?_buildException:	
  4285                           ; 1 bytes @ 0x0
  4286                           
  4287  0070                     ?_TMR3_Initialize:	
  4288                           ; 1 bytes @ 0x0
  4289                           
  4290  0070                     ?_TMR3_StopTimer:	
  4291                           ; 1 bytes @ 0x0
  4292                           
  4293  0070                     ?_TMR3_ISR:	
  4294                           ; 1 bytes @ 0x0
  4295                           
  4296  0070                     ?_EUSART_Initialize:	
  4297                           ; 1 bytes @ 0x0
  4298                           
  4299  0070                     ?_EUSART_Read:	
  4300                           ; 1 bytes @ 0x0
  4301                           
  4302  0070                     ?_EUSART_Transmit_ISR:	
  4303                           ; 1 bytes @ 0x0
  4304                           
  4305  0070                     ??_EUSART_Transmit_ISR:	
  4306                           ; 1 bytes @ 0x0
  4307                           
  4308  0070                     ?_EUSART_Receive_ISR:	
  4309                           ; 1 bytes @ 0x0
  4310                           
  4311  0070                     ??_EUSART_Receive_ISR:	
  4312                           ; 1 bytes @ 0x0
  4313                           
  4314  0070                     ?_TMR0_Initialize:	
  4315                           ; 1 bytes @ 0x0
  4316                           
  4317  0070                     ?_TMR0_ISR:	
  4318                           ; 1 bytes @ 0x0
  4319                           
  4320  0070                     ?_PIN_MANAGER_Initialize:	
  4321                           ; 1 bytes @ 0x0
  4322                           
  4323  0070                     ?_PIN_MANAGER_IOC:	
  4324                           ; 1 bytes @ 0x0
  4325                           
  4326  0070                     ??_PIN_MANAGER_IOC:	
  4327                           ; 1 bytes @ 0x0
  4328                           
  4329  0070                     ?_CCP1_Initialize:	
  4330                           ; 1 bytes @ 0x0
  4331                           
  4332  0070                     ?_CCP1_CaptureISR:	
  4333                           ; 1 bytes @ 0x0
  4334                           
  4335  0070                     ?_SYSTEM_Initialize:	
  4336                           ; 1 bytes @ 0x0
  4337                           
  4338  0070                     ?_INTERRUPT_InterruptManager:	
  4339                           ; 1 bytes @ 0x0
  4340                           
  4341  0070                     ?_main:	
  4342                           ; 1 bytes @ 0x0
  4343                           
  4344  0070                     ?_Serialavailable:	
  4345                           ; 1 bytes @ 0x0
  4346                           
  4347  0070                     ?_ClearSerialRxBuffer:	
  4348                           ; 1 bytes @ 0x0
  4349                           
  4350  0070                     ?_Serialread:	
  4351                           ; 1 bytes @ 0x0
  4352                           
  4353  0070                     ?_Serialwrite:	
  4354                           ; 1 bytes @ 0x0
  4355                           
  4356  0070                     ?i1_TMR3_StartTimer:	
  4357                           ; 1 bytes @ 0x0
  4358                           
  4359  0070                     ??i1_TMR3_StartTimer:	
  4360                           ; 1 bytes @ 0x0
  4361                           
  4362  0070                     ?i1_TMR3_StopTimer:	
  4363                           ; 1 bytes @ 0x0
  4364                           
  4365  0070                     ??i1_TMR3_StopTimer:	
  4366                           ; 1 bytes @ 0x0
  4367                           
  4368  0070                     ?i1_TMR3_WriteTimer:	
  4369                           ; 1 bytes @ 0x0
  4370                           
  4371  0070                     ?_TMR3_ReadTimer:	
  4372                           ; 1 bytes @ 0x0
  4373                           
  4374  0070                     ?i1___wmul:	
  4375                           ; 2 bytes @ 0x0
  4376                           
  4377  0070                     ?i1___lwdiv:	
  4378                           ; 2 bytes @ 0x0
  4379                           
  4380  0070                     ?___lldiv:	
  4381                           ; 2 bytes @ 0x0
  4382                           
  4383  0070                     i1TMR3_WriteTimer@timerVal:	
  4384                           ; 4 bytes @ 0x0
  4385                           
  4386  0070                     i1___wmul@multiplier:	
  4387                           ; 2 bytes @ 0x0
  4388                           
  4389  0070                     i1___lwdiv@divisor:	
  4390                           ; 2 bytes @ 0x0
  4391                           
  4392  0070                     ___lldiv@divisor:	
  4393                           ; 2 bytes @ 0x0
  4394                           
  4395                           
  4396                           ; 4 bytes @ 0x0
  4397  0070                     	ds	2
  4398  0072                     ??_TMR3_ReadTimer:	
  4399  0072                     ??i1_TMR3_WriteTimer:	
  4400                           ; 1 bytes @ 0x2
  4401                           
  4402  0072                     TMR3_ReadTimer@readVal:	
  4403                           ; 1 bytes @ 0x2
  4404                           
  4405  0072                     i1___wmul@multiplicand:	
  4406                           ; 2 bytes @ 0x2
  4407                           
  4408  0072                     i1___lwdiv@dividend:	
  4409                           ; 2 bytes @ 0x2
  4410                           
  4411                           
  4412                           ; 2 bytes @ 0x2
  4413  0072                     	ds	2
  4414  0074                     ??_TMR0_CallBack:	
  4415  0074                     ?_OnEncPulseEdgeEvent:	
  4416                           ; 1 bytes @ 0x4
  4417                           
  4418  0074                     ??_TMR0_ISR:	
  4419                           ; 1 bytes @ 0x4
  4420                           
  4421  0074                     ??i1___wmul:	
  4422                           ; 1 bytes @ 0x4
  4423                           
  4424  0074                     ??i1___lwdiv:	
  4425                           ; 1 bytes @ 0x4
  4426                           
  4427  0074                     OnEncPulseEdgeEvent@capturevalue:	
  4428                           ; 1 bytes @ 0x4
  4429                           
  4430  0074                     i1___wmul@product:	
  4431                           ; 2 bytes @ 0x4
  4432                           
  4433  0074                     ___lldiv@dividend:	
  4434                           ; 2 bytes @ 0x4
  4435                           
  4436                           
  4437                           ; 4 bytes @ 0x4
  4438  0074                     	ds	1
  4439  0075                     i1___lwdiv@quotient:	
  4440                           
  4441                           ; 2 bytes @ 0x5
  4442  0075                     	ds	1
  4443  0076                     ??_OnEncPulseEdgeEvent:	
  4444                           
  4445                           ; 1 bytes @ 0x6
  4446  0076                     	ds	1
  4447  0077                     i1___lwdiv@counter:	
  4448                           
  4449                           ; 1 bytes @ 0x7
  4450  0077                     	ds	1
  4451  0078                     ?_EncA_PulseEdgeEvent:	
  4452  0078                     ??___lldiv:	
  4453                           ; 1 bytes @ 0x8
  4454                           
  4455  0078                     ?i1_LedONStartConfig:	
  4456                           ; 1 bytes @ 0x8
  4457                           
  4458  0078                     i1LedONStartConfig@LedONDurationSec:	
  4459                           ; 1 bytes @ 0x8
  4460                           
  4461  0078                     EncA_PulseEdgeEvent@capturedValue:	
  4462                           ; 1 bytes @ 0x8
  4463                           
  4464                           
  4465                           ; 2 bytes @ 0x8
  4466  0078                     	ds	1
  4467  0079                     i1LedONStartConfig@LedONNumBlink:	
  4468  0079                     ___lldiv@quotient:	
  4469                           ; 1 bytes @ 0x9
  4470                           
  4471                           
  4472                           ; 4 bytes @ 0x9
  4473  0079                     	ds	1
  4474  007A                     ?_CCP1_CallBack:	
  4475  007A                     ??_EncA_PulseEdgeEvent:	
  4476                           ; 1 bytes @ 0xA
  4477                           
  4478  007A                     ??i1_LedONStartConfig:	
  4479                           ; 1 bytes @ 0xA
  4480                           
  4481  007A                     CCP1_CallBack@capturedValue:	
  4482                           ; 1 bytes @ 0xA
  4483                           
  4484                           
  4485                           ; 2 bytes @ 0xA
  4486  007A                     	ds	2
  4487  007C                     ??_CCP1_CallBack:	
  4488  007C                     ??_CCP1_CaptureISR:	
  4489                           ; 1 bytes @ 0xC
  4490                           
  4491  007C                     i1LedONStartConfig@LEDcolor:	
  4492                           ; 1 bytes @ 0xC
  4493                           
  4494                           
  4495                           ; 1 bytes @ 0xC
  4496  007C                     	ds	1
  4497  007D                     ___lldiv@counter:	
  4498                           
  4499                           ; 1 bytes @ 0xD
  4500  007D                     	ds	1
  4501  007E                     ??_TMR3_DefaultInterruptHandler:	
  4502  007E                     ??_TMR3_ISR:	
  4503                           ; 1 bytes @ 0xE
  4504                           
  4505                           
  4506                           	psect	cstackBANK0
  4507  0020                     __pcstackBANK0:	
  4508                           ; 1 bytes @ 0xE
  4509                           
  4510  0020                     ??_Timer3_Overflow:	
  4511  0020                     CCP1_CaptureISR@module:	
  4512                           ; 1 bytes @ 0x0
  4513                           
  4514                           
  4515                           ; 2 bytes @ 0x0
  4516  0020                     	ds	4
  4517  0024                     ??_INTERRUPT_InterruptManager:	
  4518                           
  4519                           ; 1 bytes @ 0x4
  4520  0024                     	ds	1
  4521  0025                     ?_TMR3_SetInterruptHandler:	
  4522  0025                     ??_TMR3_StartTimer:	
  4523                           ; 1 bytes @ 0x5
  4524                           
  4525  0025                     ?_TMR0_SetInterruptHandler:	
  4526                           ; 1 bytes @ 0x5
  4527                           
  4528  0025                     ??_TMR0_StartTimer:	
  4529                           ; 1 bytes @ 0x5
  4530                           
  4531  0025                     ?_IOCCF4_SetInterruptHandler:	
  4532                           ; 1 bytes @ 0x5
  4533                           
  4534  0025                     ?_IOCCF5_SetInterruptHandler:	
  4535                           ; 1 bytes @ 0x5
  4536                           
  4537  0025                     ??_OSCILLATOR_Initialize:	
  4538                           ; 1 bytes @ 0x5
  4539                           
  4540  0025                     ??_WDT_Initialize:	
  4541                           ; 1 bytes @ 0x5
  4542                           
  4543  0025                     ??_LedONStatusBusy:	
  4544                           ; 1 bytes @ 0x5
  4545                           
  4546  0025                     ??_buildException:	
  4547                           ; 1 bytes @ 0x5
  4548                           
  4549  0025                     ??_TMR3_StopTimer:	
  4550                           ; 1 bytes @ 0x5
  4551                           
  4552  0025                     ?_TMR3_WriteTimer:	
  4553                           ; 1 bytes @ 0x5
  4554                           
  4555  0025                     ??_EUSART_Initialize:	
  4556                           ; 1 bytes @ 0x5
  4557                           
  4558  0025                     ??_EUSART_Read:	
  4559                           ; 1 bytes @ 0x5
  4560                           
  4561  0025                     ??_CCP1_Initialize:	
  4562                           ; 1 bytes @ 0x5
  4563                           
  4564  0025                     ??_Serialavailable:	
  4565                           ; 1 bytes @ 0x5
  4566                           
  4567  0025                     ??_Serialwrite:	
  4568                           ; 1 bytes @ 0x5
  4569                           
  4570  0025                     ?_calcCRC:	
  4571                           ; 1 bytes @ 0x5
  4572                           
  4573  0025                     ?_wordConvert:	
  4574                           ; 2 bytes @ 0x5
  4575                           
  4576  0025                     ?___wmul:	
  4577                           ; 2 bytes @ 0x5
  4578                           
  4579  0025                     ?___lwdiv:	
  4580                           ; 2 bytes @ 0x5
  4581                           
  4582  0025                     ?_millis:	
  4583                           ; 2 bytes @ 0x5
  4584                           
  4585  0025                     Serialwrite@temp:	
  4586                           ; 4 bytes @ 0x5
  4587                           
  4588  0025                     wordConvert@lByte:	
  4589                           ; 1 bytes @ 0x5
  4590                           
  4591  0025                     TMR3_WriteTimer@timerVal:	
  4592                           ; 1 bytes @ 0x5
  4593                           
  4594  0025                     TMR3_SetInterruptHandler@InterruptHandler:	
  4595                           ; 2 bytes @ 0x5
  4596                           
  4597  0025                     TMR0_SetInterruptHandler@InterruptHandler:	
  4598                           ; 2 bytes @ 0x5
  4599                           
  4600  0025                     IOCCF4_SetInterruptHandler@InterruptHandler:	
  4601                           ; 2 bytes @ 0x5
  4602                           
  4603  0025                     IOCCF5_SetInterruptHandler@InterruptHandler:	
  4604                           ; 2 bytes @ 0x5
  4605                           
  4606  0025                     ___wmul@multiplier:	
  4607                           ; 2 bytes @ 0x5
  4608                           
  4609  0025                     ___lwdiv@divisor:	
  4610                           ; 2 bytes @ 0x5
  4611                           
  4612                           
  4613                           ; 2 bytes @ 0x5
  4614  0025                     	ds	1
  4615  0026                     ?_Serialbegin:	
  4616  0026                     EUSART_Read@readValue:	
  4617                           ; 1 bytes @ 0x6
  4618                           
  4619  0026                     buildException@u8exception:	
  4620                           ; 1 bytes @ 0x6
  4621                           
  4622  0026                     Serialbegin@baud:	
  4623                           ; 1 bytes @ 0x6
  4624                           
  4625                           
  4626                           ; 4 bytes @ 0x6
  4627  0026                     	ds	1
  4628  0027                     ??_TMR3_SetInterruptHandler:	
  4629  0027                     ??_TMR0_SetInterruptHandler:	
  4630                           ; 1 bytes @ 0x7
  4631                           
  4632  0027                     ??_IOCCF4_SetInterruptHandler:	
  4633                           ; 1 bytes @ 0x7
  4634                           
  4635  0027                     ??_IOCCF5_SetInterruptHandler:	
  4636                           ; 1 bytes @ 0x7
  4637                           
  4638  0027                     ??_getRxBuffer:	
  4639                           ; 1 bytes @ 0x7
  4640                           
  4641  0027                     ??_calcCRC:	
  4642                           ; 1 bytes @ 0x7
  4643                           
  4644  0027                     ??_wordConvert:	
  4645                           ; 1 bytes @ 0x7
  4646                           
  4647  0027                     ??_TMR3_Initialize:	
  4648                           ; 1 bytes @ 0x7
  4649                           
  4650  0027                     ??_TMR3_WriteTimer:	
  4651                           ; 1 bytes @ 0x7
  4652                           
  4653  0027                     ??_TMR0_Initialize:	
  4654                           ; 1 bytes @ 0x7
  4655                           
  4656  0027                     ??_PIN_MANAGER_Initialize:	
  4657                           ; 1 bytes @ 0x7
  4658                           
  4659  0027                     ??_ClearSerialRxBuffer:	
  4660                           ; 1 bytes @ 0x7
  4661                           
  4662  0027                     ??_Serialread:	
  4663                           ; 1 bytes @ 0x7
  4664                           
  4665  0027                     PIN_MANAGER_Initialize@state:	
  4666                           ; 1 bytes @ 0x7
  4667                           
  4668  0027                     buildException@u8func:	
  4669                           ; 1 bytes @ 0x7
  4670                           
  4671  0027                     ___wmul@multiplicand:	
  4672                           ; 1 bytes @ 0x7
  4673                           
  4674  0027                     ___lwdiv@dividend:	
  4675                           ; 2 bytes @ 0x7
  4676                           
  4677                           
  4678                           ; 2 bytes @ 0x7
  4679  0027                     	ds	1
  4680  0028                     ??_SYSTEM_Initialize:	
  4681  0028                     ClearSerialRxBuffer@bdummy:	
  4682                           ; 1 bytes @ 0x8
  4683                           
  4684  0028                     getRxBuffer@bBuffOverflow:	
  4685                           ; 1 bytes @ 0x8
  4686                           
  4687                           
  4688                           ; 1 bytes @ 0x8
  4689  0028                     	ds	1
  4690  0029                     ??_millis:	
  4691  0029                     ??___wmul:	
  4692                           ; 1 bytes @ 0x9
  4693                           
  4694  0029                     ??___lwdiv:	
  4695                           ; 1 bytes @ 0x9
  4696                           
  4697  0029                     calcCRC@u8length:	
  4698                           ; 1 bytes @ 0x9
  4699                           
  4700  0029                     ___wmul@product:	
  4701                           ; 1 bytes @ 0x9
  4702                           
  4703                           
  4704                           ; 2 bytes @ 0x9
  4705  0029                     	ds	1
  4706  002A                     ??_Modbusinit:	
  4707  002A                     ??_Serialbegin:	
  4708                           ; 1 bytes @ 0xA
  4709                           
  4710  002A                     calcCRC@temp2:	
  4711                           ; 1 bytes @ 0xA
  4712                           
  4713  002A                     ___lwdiv@quotient:	
  4714                           ; 2 bytes @ 0xA
  4715                           
  4716                           
  4717                           ; 2 bytes @ 0xA
  4718  002A                     	ds	1
  4719  002B                     Modbusinit@u8id:	
  4720                           
  4721                           ; 1 bytes @ 0xB
  4722  002B                     	ds	1
  4723  002C                     wordConvert@hByte:	
  4724  002C                     ___lwdiv@counter:	
  4725                           ; 1 bytes @ 0xC
  4726                           
  4727  002C                     calcCRC@flag:	
  4728                           ; 1 bytes @ 0xC
  4729                           
  4730                           
  4731                           ; 2 bytes @ 0xC
  4732  002C                     	ds	1
  4733  002D                     ?_LedONStartConfig:	
  4734  002D                     LedONStartConfig@LedONDurationSec:	
  4735                           ; 1 bytes @ 0xD
  4736                           
  4737                           
  4738                           ; 1 bytes @ 0xD
  4739  002D                     	ds	1
  4740  002E                     LedONStartConfig@LedONNumBlink:	
  4741  002E                     calcCRC@i:	
  4742                           ; 1 bytes @ 0xE
  4743                           
  4744                           
  4745                           ; 1 bytes @ 0xE
  4746  002E                     	ds	1
  4747  002F                     ??_LedONStartConfig:	
  4748  002F                     calcCRC@j:	
  4749                           ; 1 bytes @ 0xF
  4750                           
  4751                           
  4752                           ; 1 bytes @ 0xF
  4753  002F                     	ds	1
  4754  0030                     calcCRC@temp:	
  4755                           
  4756                           ; 2 bytes @ 0x10
  4757  0030                     	ds	1
  4758  0031                     LedONStartConfig@LEDcolor:	
  4759                           
  4760                           ; 1 bytes @ 0x11
  4761  0031                     	ds	1
  4762  0032                     ??_sendTxBuffer:	
  4763  0032                     ??_validateRequest:	
  4764                           ; 1 bytes @ 0x12
  4765                           
  4766                           
  4767                           ; 1 bytes @ 0x12
  4768  0032                     	ds	4
  4769  0036                     sendTxBuffer@u16crc:	
  4770                           
  4771                           ; 2 bytes @ 0x16
  4772  0036                     	ds	1
  4773  0037                     validateRequest@u16MsgCRC:	
  4774                           
  4775                           ; 2 bytes @ 0x17
  4776  0037                     	ds	1
  4777  0038                     sendTxBuffer@i:	
  4778                           
  4779                           ; 1 bytes @ 0x18
  4780  0038                     	ds	1
  4781  0039                     ?_process_FC1:	
  4782  0039                     ?_process_FC3:	
  4783                           ; 1 bytes @ 0x19
  4784                           
  4785  0039                     ?_process_FC5:	
  4786                           ; 1 bytes @ 0x19
  4787                           
  4788  0039                     ?_process_FC6:	
  4789                           ; 1 bytes @ 0x19
  4790                           
  4791  0039                     ?_process_FC15:	
  4792                           ; 1 bytes @ 0x19
  4793                           
  4794  0039                     ?_process_FC16:	
  4795                           ; 1 bytes @ 0x19
  4796                           
  4797  0039                     validateRequest@isSupported:	
  4798                           ; 1 bytes @ 0x19
  4799                           
  4800  0039                     process_FC1@u8size:	
  4801                           ; 1 bytes @ 0x19
  4802                           
  4803  0039                     process_FC3@u8size:	
  4804                           ; 1 bytes @ 0x19
  4805                           
  4806  0039                     process_FC5@u8size:	
  4807                           ; 1 bytes @ 0x19
  4808                           
  4809  0039                     process_FC6@u8size:	
  4810                           ; 1 bytes @ 0x19
  4811                           
  4812  0039                     process_FC15@u8size:	
  4813                           ; 1 bytes @ 0x19
  4814                           
  4815  0039                     process_FC16@u8size:	
  4816                           ; 1 bytes @ 0x19
  4817                           
  4818                           
  4819                           ; 1 bytes @ 0x19
  4820  0039                     	ds	1
  4821  003A                     ??_process_FC1:	
  4822  003A                     ??_process_FC3:	
  4823                           ; 1 bytes @ 0x1A
  4824                           
  4825  003A                     ??_process_FC5:	
  4826                           ; 1 bytes @ 0x1A
  4827                           
  4828  003A                     ??_process_FC6:	
  4829                           ; 1 bytes @ 0x1A
  4830                           
  4831  003A                     ??_process_FC15:	
  4832                           ; 1 bytes @ 0x1A
  4833                           
  4834  003A                     ??_process_FC16:	
  4835                           ; 1 bytes @ 0x1A
  4836                           
  4837  003A                     validateRequest@i:	
  4838                           ; 1 bytes @ 0x1A
  4839                           
  4840                           
  4841                           ; 1 bytes @ 0x1A
  4842  003A                     	ds	1
  4843  003B                     validateRequest@u8regs:	
  4844                           
  4845                           ; 1 bytes @ 0x1B
  4846  003B                     	ds	1
  4847  003C                     process_FC16@u8func:	
  4848  003C                     validateRequest@u16regs:	
  4849                           ; 1 bytes @ 0x1C
  4850                           
  4851  003C                     process_FC6@u16val:	
  4852                           ; 2 bytes @ 0x1C
  4853                           
  4854                           
  4855                           ; 2 bytes @ 0x1C
  4856  003C                     	ds	1
  4857  003D                     process_FC1@regs:	
  4858  003D                     process_FC5@u8CopyBufferSize:	
  4859                           ; 1 bytes @ 0x1D
  4860                           
  4861  003D                     process_FC15@u16StartCoil:	
  4862                           ; 1 bytes @ 0x1D
  4863                           
  4864  003D                     process_FC16@temp:	
  4865                           ; 2 bytes @ 0x1D
  4866                           
  4867                           
  4868                           ; 2 bytes @ 0x1D
  4869  003D                     	ds	1
  4870  003E                     process_FC1@u8currentRegister:	
  4871  003E                     process_FC3@u8CopyBufferSize:	
  4872                           ; 1 bytes @ 0x1E
  4873                           
  4874  003E                     process_FC6@regs:	
  4875                           ; 1 bytes @ 0x1E
  4876                           
  4877  003E                     process_FC5@u16coil:	
  4878                           ; 1 bytes @ 0x1E
  4879                           
  4880                           
  4881                           ; 2 bytes @ 0x1E
  4882  003E                     	ds	1
  4883  003F                     process_FC1@u8currentBit:	
  4884  003F                     process_FC3@regs:	
  4885                           ; 1 bytes @ 0x1F
  4886                           
  4887  003F                     process_FC6@u8add:	
  4888                           ; 1 bytes @ 0x1F
  4889                           
  4890  003F                     process_FC16@regs:	
  4891                           ; 1 bytes @ 0x1F
  4892                           
  4893  003F                     process_FC15@u16Coilno:	
  4894                           ; 1 bytes @ 0x1F
  4895                           
  4896                           
  4897                           ; 2 bytes @ 0x1F
  4898  003F                     	ds	1
  4899  0040                     process_FC1@u8CopyBufferSize:	
  4900  0040                     process_FC3@u8StartAdd:	
  4901                           ; 1 bytes @ 0x20
  4902                           
  4903  0040                     process_FC5@regs:	
  4904                           ; 1 bytes @ 0x20
  4905                           
  4906  0040                     process_FC6@u8CopyBufferSize:	
  4907                           ; 1 bytes @ 0x20
  4908                           
  4909  0040                     process_FC16@u8StartAdd:	
  4910                           ; 1 bytes @ 0x20
  4911                           
  4912                           
  4913                           ; 1 bytes @ 0x20
  4914  0040                     	ds	1
  4915  0041                     process_FC3@u8regsno:	
  4916  0041                     process_FC5@u8currentRegister:	
  4917                           ; 1 bytes @ 0x21
  4918                           
  4919  0041                     process_FC15@u8CopyBufferSize:	
  4920                           ; 1 bytes @ 0x21
  4921                           
  4922  0041                     process_FC16@u8CopyBufferSize:	
  4923                           ; 1 bytes @ 0x21
  4924                           
  4925  0041                     process_FC1@u16StartCoil:	
  4926                           ; 1 bytes @ 0x21
  4927                           
  4928                           
  4929                           ; 2 bytes @ 0x21
  4930  0041                     	ds	1
  4931  0042                     process_FC3@i:	
  4932  0042                     process_FC5@u8currentBit:	
  4933                           ; 1 bytes @ 0x22
  4934                           
  4935  0042                     process_FC15@bTemp:	
  4936                           ; 1 bytes @ 0x22
  4937                           
  4938  0042                     process_FC16@u8regsno:	
  4939                           ; 1 bytes @ 0x22
  4940                           
  4941                           
  4942                           ; 1 bytes @ 0x22
  4943  0042                     	ds	1
  4944  0043                     process_FC1@u8bytesno:	
  4945  0043                     process_FC15@u8frameByte:	
  4946                           ; 1 bytes @ 0x23
  4947                           
  4948  0043                     process_FC16@i:	
  4949                           ; 1 bytes @ 0x23
  4950                           
  4951                           
  4952                           ; 1 bytes @ 0x23
  4953  0043                     	ds	1
  4954  0044                     process_FC1@u16coil:	
  4955  0044                     process_FC15@u16coil:	
  4956                           ; 2 bytes @ 0x24
  4957                           
  4958                           
  4959                           ; 2 bytes @ 0x24
  4960  0044                     	ds	2
  4961  0046                     process_FC15@regs:	
  4962  0046                     process_FC1@u16currentCoil:	
  4963                           ; 1 bytes @ 0x26
  4964                           
  4965                           
  4966                           ; 2 bytes @ 0x26
  4967  0046                     	ds	1
  4968  0047                     process_FC15@u8currentRegister:	
  4969                           
  4970                           ; 1 bytes @ 0x27
  4971  0047                     	ds	1
  4972  0048                     process_FC1@u8bitsno:	
  4973  0048                     process_FC15@u8currentBit:	
  4974                           ; 1 bytes @ 0x28
  4975                           
  4976                           
  4977                           ; 1 bytes @ 0x28
  4978  0048                     	ds	1
  4979  0049                     process_FC1@u16Coilno:	
  4980  0049                     process_FC15@u16currentCoil:	
  4981                           ; 2 bytes @ 0x29
  4982                           
  4983                           
  4984                           ; 2 bytes @ 0x29
  4985  0049                     	ds	2
  4986  004B                     process_FC15@u8bitsno:	
  4987                           
  4988                           ; 1 bytes @ 0x2B
  4989  004B                     	ds	1
  4990  004C                     ?_ModbuspollSlave:	
  4991  004C                     ModbuspollSlave@u8size:	
  4992                           ; 1 bytes @ 0x2C
  4993                           
  4994                           
  4995                           ; 1 bytes @ 0x2C
  4996  004C                     	ds	1
  4997  004D                     ??_ModbuspollSlave:	
  4998                           
  4999                           ; 1 bytes @ 0x2D
  5000  004D                     	ds	4
  5001                           
  5002                           	psect	maintext
  5003  04E1                     __pmaintext:	
  5004 ;;
  5005 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
  5006 ;;
  5007 ;; *************** function _main *****************
  5008 ;; Defined at:
  5009 ;;		line 166 in file "main.c"
  5010 ;; Parameters:    Size  Location     Type
  5011 ;;		None
  5012 ;; Auto vars:     Size  Location     Type
  5013 ;;		None
  5014 ;; Return value:  Size  Location     Type
  5015 ;;                  1    wreg      void 
  5016 ;; Registers used:
  5017 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5018 ;; Tracked objects:
  5019 ;;		On entry : B1F/0
  5020 ;;		On exit  : 0/0
  5021 ;;		Unchanged: 0/0
  5022 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5023 ;;      Params:         0       0       0       0       0       0       0       0
  5024 ;;      Locals:         0       0       0       0       0       0       0       0
  5025 ;;      Temps:          0       0       1       0       0       0       0       0
  5026 ;;      Totals:         0       0       1       0       0       0       0       0
  5027 ;;Total ram usage:        1 bytes
  5028 ;; Hardware stack levels required when called:   11
  5029 ;; This function calls:
  5030 ;;		_LedONStartConfig
  5031 ;;		_LedONStatusBusy
  5032 ;;		_Modbusinit
  5033 ;;		_ModbuspollSlave
  5034 ;;		_SYSTEM_Initialize
  5035 ;;		_TMR3_StopTimer
  5036 ;;		_TMR3_WriteTimer
  5037 ;; This function is called by:
  5038 ;;		Startup code after reset
  5039 ;; This function uses a non-reentrant model
  5040 ;;
  5041                           
  5042                           
  5043                           ;psect for function _main
  5044  04E1                     _main:	
  5045                           
  5046                           ;main.c: 169: SYSTEM_Initialize();
  5047                           
  5048                           ;incstack = 0
  5049                           ; Regs used in _main: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  5050  04E1  318B  23D1  3184   	fcall	_SYSTEM_Initialize
  5051                           
  5052                           ;main.c: 172: TMR3_WriteTimer(0);
  5053  04E4  3000               	movlw	0
  5054  04E5  0020               	movlb	0	; select bank0
  5055  04E6  00A5               	movwf	TMR3_WriteTimer@timerVal
  5056  04E7  00A6               	movwf	TMR3_WriteTimer@timerVal+1
  5057  04E8  318B  23FC  3184   	fcall	_TMR3_WriteTimer
  5058                           
  5059                           ;main.c: 173: TMR3_StopTimer();
  5060  04EB  318A  22B5  3184   	fcall	_TMR3_StopTimer
  5061                           
  5062                           ;main.c: 176: INLVLC = 0xFF;
  5063  04EE  30FF               	movlw	255
  5064  04EF  0027               	movlb	7	; select bank7
  5065  04F0  008E               	movwf	14	;volatile
  5066                           
  5067                           ;main.c: 177: INLVLA = 0xFF;
  5068  04F1  30FF               	movlw	255
  5069  04F2  008C               	movwf	12	;volatile
  5070                           
  5071                           ;main.c: 180: (INTCONbits.GIE = 1);
  5072  04F3  178B               	bsf	11,7	;volatile
  5073                           
  5074                           ;main.c: 183: (INTCONbits.PEIE = 1);
  5075  04F4  170B               	bsf	11,6	;volatile
  5076                           
  5077                           ;main.c: 188: LedONStartConfig(0, 1, 1);
  5078  04F5  0020               	movlb	0	; select bank0
  5079  04F6  01AD               	clrf	LedONStartConfig@LedONDurationSec
  5080  04F7  0AAD               	incf	LedONStartConfig@LedONDurationSec,f
  5081  04F8  01AE               	clrf	LedONStartConfig@LedONNumBlink
  5082  04F9  0AAE               	incf	LedONStartConfig@LedONNumBlink,f
  5083  04FA  3000               	movlw	0
  5084  04FB  3187  2762  3184   	fcall	_LedONStartConfig
  5085  04FE                     l4992:	
  5086                           ;main.c: 189: while(LedONStatusBusy());
  5087                           
  5088  04FE  318A  22A3  3184   	fcall	_LedONStatusBusy
  5089  0501  3A00               	xorlw	0
  5090  0502  1D03               	skipz
  5091  0503  2CFE               	goto	l4992
  5092                           
  5093                           ;main.c: 190: LedONStartConfig(1, 1, 1);
  5094  0504  0020               	movlb	0	; select bank0
  5095  0505  01AD               	clrf	LedONStartConfig@LedONDurationSec
  5096  0506  0AAD               	incf	LedONStartConfig@LedONDurationSec,f
  5097  0507  01AE               	clrf	LedONStartConfig@LedONNumBlink
  5098  0508  0AAE               	incf	LedONStartConfig@LedONNumBlink,f
  5099  0509  3001               	movlw	1
  5100  050A  3187  2762  3184   	fcall	_LedONStartConfig
  5101  050D                     l4996:	
  5102                           ;main.c: 191: while(LedONStatusBusy());
  5103                           
  5104  050D  318A  22A3  3184   	fcall	_LedONStatusBusy
  5105  0510  3A00               	xorlw	0
  5106  0511  1D03               	skipz
  5107  0512  2D0D               	goto	l4996
  5108                           
  5109                           ;main.c: 192: LedONStartConfig(2, 1, 1);
  5110  0513  0020               	movlb	0	; select bank0
  5111  0514  01AD               	clrf	LedONStartConfig@LedONDurationSec
  5112  0515  0AAD               	incf	LedONStartConfig@LedONDurationSec,f
  5113  0516  01AE               	clrf	LedONStartConfig@LedONNumBlink
  5114  0517  0AAE               	incf	LedONStartConfig@LedONNumBlink,f
  5115  0518  3002               	movlw	2
  5116  0519  3187  2762  3184   	fcall	_LedONStartConfig
  5117  051C                     l5000:	
  5118                           ;main.c: 193: while(LedONStatusBusy());
  5119                           
  5120  051C  318A  22A3  3184   	fcall	_LedONStatusBusy
  5121  051F  3A00               	xorlw	0
  5122  0520  1D03               	skipz
  5123  0521  2D1C               	goto	l5000
  5124                           
  5125                           ;main.c: 195: do { LATBbits.LATB6 = 0; } while(0);
  5126  0522  0022               	movlb	2	; select bank2
  5127  0523  130D               	bcf	13,6	;volatile
  5128                           
  5129                           ;main.c: 197: telegram[0].u8id = 1;
  5130  0524  01C0               	clrf	_telegram^(0+256)
  5131  0525  0AC0               	incf	_telegram^(0+256),f
  5132                           
  5133                           ;main.c: 198: telegram[0].u8fct = MB_FC_READ_REGISTERS;
  5134  0526  3003               	movlw	3
  5135  0527  0021               	movlb	1	; select bank1
  5136  0528  00EF               	movwf	??_main^(0+128)
  5137  0529  086F               	movf	??_main^(0+128),w
  5138  052A  0022               	movlb	2	; select bank2
  5139  052B  00C1               	movwf	(_telegram^(0+256)+1)
  5140                           
  5141                           ;main.c: 199: telegram[0].u16RegAdd = 0;
  5142  052C  01C2               	clrf	(_telegram^(0+256)+2)
  5143  052D  01C3               	clrf	((_telegram+1)^(0+256)+2)
  5144                           
  5145                           ;main.c: 200: telegram[0].u16CoilsNo = sizeof(MCUtoPLC_Type)/2;
  5146  052E  3004               	movlw	4
  5147  052F  00C4               	movwf	(_telegram^(0+256)+4)
  5148  0530  3000               	movlw	0
  5149  0531  00C5               	movwf	(_telegram^(0+256)+5)
  5150                           
  5151                           ;main.c: 201: telegram[0].au16reg = (uint16_t *)&(ModbusData.plcTOmcuData );
  5152  0532  30E7               	movlw	(low ((_ModbusData| 0+8)))& (0+255)
  5153  0533  0021               	movlb	1	; select bank1
  5154  0534  00EF               	movwf	??_main^(0+128)
  5155  0535  086F               	movf	??_main^(0+128),w
  5156  0536  0022               	movlb	2	; select bank2
  5157  0537  00C6               	movwf	(low ((_telegram| (0+256)+6)))^0
  5158                           
  5159                           ;main.c: 203: telegram[1].u8id = 1;
  5160  0538  01C7               	clrf	(_telegram^(0+256)+7)
  5161  0539  0AC7               	incf	(_telegram^(0+256)+7),f
  5162                           
  5163                           ;main.c: 204: telegram[1].u8fct = MB_FC_WRITE_MULTIPLE_REGISTERS;
  5164  053A  3010               	movlw	16
  5165  053B  0021               	movlb	1	; select bank1
  5166  053C  00EF               	movwf	??_main^(0+128)
  5167  053D  086F               	movf	??_main^(0+128),w
  5168  053E  0022               	movlb	2	; select bank2
  5169  053F  00C8               	movwf	(_telegram^(0+256)+8)
  5170                           
  5171                           ;main.c: 205: telegram[1].u16RegAdd = sizeof(MCUtoPLC_Type)/2;
  5172  0540  3004               	movlw	4
  5173  0541  00C9               	movwf	(_telegram^(0+256)+9)
  5174  0542  3000               	movlw	0
  5175  0543  00CA               	movwf	(_telegram^(0+256)+10)
  5176                           
  5177                           ;main.c: 206: telegram[1].u16CoilsNo = sizeof(PLCtoMCU_Type)/2;
  5178  0544  3004               	movlw	4
  5179  0545  00CB               	movwf	(_telegram^(0+256)+11)
  5180  0546  3000               	movlw	0
  5181  0547  00CC               	movwf	(_telegram^(0+256)+12)
  5182                           
  5183                           ;main.c: 207: telegram[1].au16reg = (uint16_t *)&(ModbusData.mcuTOplcData);
  5184  0548  30DF               	movlw	(low (_ModbusData| 0))& (0+255)
  5185  0549  0021               	movlb	1	; select bank1
  5186  054A  00EF               	movwf	??_main^(0+128)
  5187  054B  086F               	movf	??_main^(0+128),w
  5188  054C  0022               	movlb	2	; select bank2
  5189  054D  00CD               	movwf	(low ((_telegram| (0+256)+13)))^0
  5190                           
  5191                           ;main.c: 220: Modbusinit(1);
  5192  054E  3001               	movlw	1
  5193  054F  318C  24F9  3184   	fcall	_Modbusinit
  5194                           
  5195                           ;main.c: 221: do { LATBbits.LATB6 = 0; } while(0);
  5196  0552  0022               	movlb	2	; select bank2
  5197  0553  130D               	bcf	13,6	;volatile
  5198                           
  5199                           ;main.c: 225: do { LATCbits.LATC6 = 0; } while(0);
  5200  0554  130E               	bcf	14,6	;volatile
  5201                           
  5202                           ;main.c: 227: ModbusData.mcuTOplcData.NutRunState = IDLE_STOP;
  5203  0555  0021               	movlb	1	; select bank1
  5204  0556  01E3               	clrf	(_ModbusData^(0+128)+4)
  5205  0557  01E4               	clrf	((_ModbusData+1)^(0+128)+4)
  5206                           
  5207                           ;main.c: 228: ModbusData.mcuTOplcData.MeasurePulseCount = 0;
  5208  0558  01DF               	clrf	_ModbusData^(0+128)
  5209  0559  01E0               	clrf	(_ModbusData+1)^(0+128)
  5210                           
  5211                           ;main.c: 229: ModbusData.mcuTOplcData.MeasureRunTime = 0;
  5212  055A  01E1               	clrf	(_ModbusData^(0+128)+2)
  5213  055B  01E2               	clrf	((_ModbusData+1)^(0+128)+2)
  5214                           
  5215                           ;main.c: 230: ModbusData.mcuTOplcData.NutRunDirection = CLOCKWISE;
  5216  055C  01E5               	clrf	(_ModbusData^(0+128)+6)
  5217  055D  01E6               	clrf	((_ModbusData+1)^(0+128)+6)
  5218                           
  5219                           ;main.c: 233: ModbusData.plcTOmcuData.PulseInRevolution = 32;
  5220  055E  3020               	movlw	32
  5221  055F  00E7               	movwf	(_ModbusData^(0+128)+8)
  5222  0560  3000               	movlw	0
  5223  0561  00E8               	movwf	(_ModbusData^(0+128)+9)
  5224                           
  5225                           ;main.c: 234: ModbusData.plcTOmcuData.SetRunDirection = CLOCKWISE;
  5226  0562  01ED               	clrf	(_ModbusData^(0+128)+14)
  5227  0563  01EE               	clrf	((_ModbusData+1)^(0+128)+14)
  5228                           
  5229                           ;main.c: 235: ModbusData.plcTOmcuData.SetTotalPulseRun = 32*3;
  5230  0564  3060               	movlw	96
  5231  0565  00E9               	movwf	(_ModbusData^(0+128)+10)
  5232  0566  3000               	movlw	0
  5233  0567  00EA               	movwf	(_ModbusData^(0+128)+11)
  5234                           
  5235                           ;main.c: 236: ModbusData.plcTOmcuData.SetTotalRunTime = 3000;
  5236  0568  30B8               	movlw	184
  5237  0569  00EB               	movwf	(_ModbusData^(0+128)+12)
  5238  056A  300B               	movlw	11
  5239  056B  00EC               	movwf	(_ModbusData^(0+128)+13)
  5240  056C                     l5042:	
  5241                           ;main.c: 238: while (1)
  5242                           
  5243                           
  5244                           ;main.c: 239: {
  5245                           ;main.c: 262: ModbuspollSlave((unsigned int*)&ModbusData,(unsigned char)(sizeof(ModbusDa
      +                          taType)/2));
  5246  056C  3008               	movlw	8
  5247  056D  0021               	movlb	1	; select bank1
  5248  056E  00EF               	movwf	??_main^(0+128)
  5249  056F  086F               	movf	??_main^(0+128),w
  5250  0570  0020               	movlb	0	; select bank0
  5251  0571  00CC               	movwf	ModbuspollSlave@u8size
  5252  0572  30DF               	movlw	(low (_ModbusData| 0))& (0+255)
  5253  0573  3181  21A5  3184   	fcall	_ModbuspollSlave
  5254  0576  2D6C               	goto	l5042
  5255  0577                     __end_of_main:	
  5256                           
  5257                           	psect	text1
  5258  0BFC                     __ptext1:	
  5259 ;; *************** function _TMR3_WriteTimer *****************
  5260 ;; Defined at:
  5261 ;;		line 117 in file "mcc_generated_files/tmr3.c"
  5262 ;; Parameters:    Size  Location     Type
  5263 ;;  timerVal        2    5[BANK0 ] unsigned int 
  5264 ;; Auto vars:     Size  Location     Type
  5265 ;;		None
  5266 ;; Return value:  Size  Location     Type
  5267 ;;                  1    wreg      void 
  5268 ;; Registers used:
  5269 ;;		wreg, status,2
  5270 ;; Tracked objects:
  5271 ;;		On entry : 0/0
  5272 ;;		On exit  : 0/0
  5273 ;;		Unchanged: 0/0
  5274 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5275 ;;      Params:         0       2       0       0       0       0       0       0
  5276 ;;      Locals:         0       0       0       0       0       0       0       0
  5277 ;;      Temps:          0       0       0       0       0       0       0       0
  5278 ;;      Totals:         0       2       0       0       0       0       0       0
  5279 ;;Total ram usage:        2 bytes
  5280 ;; Hardware stack levels used:    1
  5281 ;; Hardware stack levels required when called:    6
  5282 ;; This function calls:
  5283 ;;		Nothing
  5284 ;; This function is called by:
  5285 ;;		_main
  5286 ;; This function uses a non-reentrant model
  5287 ;;
  5288                           
  5289                           
  5290                           ;psect for function _TMR3_WriteTimer
  5291  0BFC                     _TMR3_WriteTimer:	
  5292                           
  5293                           ;tmr3.c: 119: if (T3CONbits.T3SYNC == 1)
  5294                           
  5295                           ;incstack = 0
  5296                           ; Regs used in _TMR3_WriteTimer: [wreg+status,2]
  5297  0BFC  0028               	movlb	8	; select bank8
  5298  0BFD  1D13               	btfss	19,2	;volatile
  5299  0BFE  2C0A               	goto	l3882
  5300                           
  5301                           ;tmr3.c: 120: {
  5302                           ;tmr3.c: 122: T3CONbits.TMR3ON = 0;
  5303  0BFF  1013               	bcf	19,0	;volatile
  5304                           
  5305                           ;tmr3.c: 125: TMR3H = (timerVal >> 8);
  5306  0C00  0020               	movlb	0	; select bank0
  5307  0C01  0826               	movf	TMR3_WriteTimer@timerVal+1,w
  5308  0C02  0028               	movlb	8	; select bank8
  5309  0C03  0092               	movwf	18	;volatile
  5310                           
  5311                           ;tmr3.c: 126: TMR3L = timerVal;
  5312  0C04  0020               	movlb	0	; select bank0
  5313  0C05  0825               	movf	TMR3_WriteTimer@timerVal,w
  5314  0C06  0028               	movlb	8	; select bank8
  5315  0C07  0091               	movwf	17	;volatile
  5316                           
  5317                           ;tmr3.c: 129: T3CONbits.TMR3ON =1;
  5318  0C08  1413               	bsf	19,0	;volatile
  5319                           
  5320                           ;tmr3.c: 130: }
  5321  0C09  0008               	return
  5322  0C0A                     l3882:	
  5323                           
  5324                           ;tmr3.c: 131: else
  5325                           ;tmr3.c: 132: {
  5326                           ;tmr3.c: 134: TMR3H = (timerVal >> 8);
  5327  0C0A  0020               	movlb	0	; select bank0
  5328  0C0B  0826               	movf	TMR3_WriteTimer@timerVal+1,w
  5329  0C0C  0028               	movlb	8	; select bank8
  5330  0C0D  0092               	movwf	18	;volatile
  5331                           
  5332                           ;tmr3.c: 135: TMR3L = timerVal;
  5333  0C0E  0020               	movlb	0	; select bank0
  5334  0C0F  0825               	movf	TMR3_WriteTimer@timerVal,w
  5335  0C10  0028               	movlb	8	; select bank8
  5336  0C11  0091               	movwf	17	;volatile
  5337  0C12  0008               	return
  5338  0C13                     __end_of_TMR3_WriteTimer:	
  5339                           
  5340                           	psect	text2
  5341  0AB5                     __ptext2:	
  5342 ;; *************** function _TMR3_StopTimer *****************
  5343 ;; Defined at:
  5344 ;;		line 102 in file "mcc_generated_files/tmr3.c"
  5345 ;; Parameters:    Size  Location     Type
  5346 ;;		None
  5347 ;; Auto vars:     Size  Location     Type
  5348 ;;		None
  5349 ;; Return value:  Size  Location     Type
  5350 ;;                  1    wreg      void 
  5351 ;; Registers used:
  5352 ;;		None
  5353 ;; Tracked objects:
  5354 ;;		On entry : 0/0
  5355 ;;		On exit  : 0/0
  5356 ;;		Unchanged: 0/0
  5357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5358 ;;      Params:         0       0       0       0       0       0       0       0
  5359 ;;      Locals:         0       0       0       0       0       0       0       0
  5360 ;;      Temps:          0       0       0       0       0       0       0       0
  5361 ;;      Totals:         0       0       0       0       0       0       0       0
  5362 ;;Total ram usage:        0 bytes
  5363 ;; Hardware stack levels used:    1
  5364 ;; Hardware stack levels required when called:    6
  5365 ;; This function calls:
  5366 ;;		Nothing
  5367 ;; This function is called by:
  5368 ;;		_main
  5369 ;; This function uses a non-reentrant model
  5370 ;;
  5371                           
  5372                           
  5373                           ;psect for function _TMR3_StopTimer
  5374  0AB5                     _TMR3_StopTimer:	
  5375                           
  5376                           ;tmr3.c: 105: T3CONbits.TMR3ON = 0;
  5377                           
  5378                           ;incstack = 0
  5379                           ; Regs used in _TMR3_StopTimer: []
  5380  0AB5  0028               	movlb	8	; select bank8
  5381  0AB6  1013               	bcf	19,0	;volatile
  5382  0AB7  0008               	return
  5383  0AB8                     __end_of_TMR3_StopTimer:	
  5384                           
  5385                           	psect	text3
  5386  0BD1                     __ptext3:	
  5387 ;; *************** function _SYSTEM_Initialize *****************
  5388 ;; Defined at:
  5389 ;;		line 76 in file "mcc_generated_files/mcc.c"
  5390 ;; Parameters:    Size  Location     Type
  5391 ;;		None
  5392 ;; Auto vars:     Size  Location     Type
  5393 ;;		None
  5394 ;; Return value:  Size  Location     Type
  5395 ;;                  1    wreg      void 
  5396 ;; Registers used:
  5397 ;;		wreg, status,2, status,0, pclath, cstack
  5398 ;; Tracked objects:
  5399 ;;		On entry : 0/0
  5400 ;;		On exit  : 0/0
  5401 ;;		Unchanged: 0/0
  5402 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5403 ;;      Params:         0       0       0       0       0       0       0       0
  5404 ;;      Locals:         0       0       0       0       0       0       0       0
  5405 ;;      Temps:          0       0       0       0       0       0       0       0
  5406 ;;      Totals:         0       0       0       0       0       0       0       0
  5407 ;;Total ram usage:        0 bytes
  5408 ;; Hardware stack levels used:    1
  5409 ;; Hardware stack levels required when called:    8
  5410 ;; This function calls:
  5411 ;;		_CCP1_Initialize
  5412 ;;		_EUSART_Initialize
  5413 ;;		_OSCILLATOR_Initialize
  5414 ;;		_PIN_MANAGER_Initialize
  5415 ;;		_TMR0_Initialize
  5416 ;;		_TMR3_Initialize
  5417 ;;		_WDT_Initialize
  5418 ;; This function is called by:
  5419 ;;		_main
  5420 ;; This function uses a non-reentrant model
  5421 ;;
  5422                           
  5423                           
  5424                           ;psect for function _SYSTEM_Initialize
  5425  0BD1                     _SYSTEM_Initialize:	
  5426                           
  5427                           ;mcc.c: 79: PIN_MANAGER_Initialize();
  5428                           
  5429                           ;incstack = 0
  5430                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5431  0BD1  318E  26DD  318B   	fcall	_PIN_MANAGER_Initialize
  5432                           
  5433                           ;mcc.c: 80: OSCILLATOR_Initialize();
  5434  0BD4  318B  2300  318B   	fcall	_OSCILLATOR_Initialize
  5435                           
  5436                           ;mcc.c: 81: WDT_Initialize();
  5437  0BD7  318A  22B8  318B   	fcall	_WDT_Initialize
  5438                           
  5439                           ;mcc.c: 82: CCP1_Initialize();
  5440  0BDA  318B  2376  318B   	fcall	_CCP1_Initialize
  5441                           
  5442                           ;mcc.c: 83: TMR3_Initialize();
  5443  0BDD  318C  2448  318B   	fcall	_TMR3_Initialize
  5444                           
  5445                           ;mcc.c: 84: TMR0_Initialize();
  5446  0BE0  318B  23E6  318B   	fcall	_TMR0_Initialize
  5447                           
  5448                           ;mcc.c: 85: EUSART_Initialize();
  5449  0BE3  318C  2413         	fcall	_EUSART_Initialize
  5450  0BE5  0008               	return
  5451  0BE6                     __end_of_SYSTEM_Initialize:	
  5452                           
  5453                           	psect	text4
  5454  0AB8                     __ptext4:	
  5455 ;; *************** function _WDT_Initialize *****************
  5456 ;; Defined at:
  5457 ;;		line 106 in file "mcc_generated_files/mcc.c"
  5458 ;; Parameters:    Size  Location     Type
  5459 ;;		None
  5460 ;; Auto vars:     Size  Location     Type
  5461 ;;		None
  5462 ;; Return value:  Size  Location     Type
  5463 ;;                  1    wreg      void 
  5464 ;; Registers used:
  5465 ;;		wreg
  5466 ;; Tracked objects:
  5467 ;;		On entry : 0/0
  5468 ;;		On exit  : 0/0
  5469 ;;		Unchanged: 0/0
  5470 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5471 ;;      Params:         0       0       0       0       0       0       0       0
  5472 ;;      Locals:         0       0       0       0       0       0       0       0
  5473 ;;      Temps:          0       0       0       0       0       0       0       0
  5474 ;;      Totals:         0       0       0       0       0       0       0       0
  5475 ;;Total ram usage:        0 bytes
  5476 ;; Hardware stack levels used:    1
  5477 ;; Hardware stack levels required when called:    6
  5478 ;; This function calls:
  5479 ;;		Nothing
  5480 ;; This function is called by:
  5481 ;;		_SYSTEM_Initialize
  5482 ;; This function uses a non-reentrant model
  5483 ;;
  5484                           
  5485                           
  5486                           ;psect for function _WDT_Initialize
  5487  0AB8                     _WDT_Initialize:	
  5488                           
  5489                           ;mcc.c: 109: WDTCON = 0x16;
  5490                           
  5491                           ;incstack = 0
  5492                           ; Regs used in _WDT_Initialize: [wreg]
  5493  0AB8  3016               	movlw	22
  5494  0AB9  0021               	movlb	1	; select bank1
  5495  0ABA  0097               	movwf	23	;volatile
  5496  0ABB  0008               	return
  5497  0ABC                     __end_of_WDT_Initialize:	
  5498                           
  5499                           	psect	text5
  5500  0C48                     __ptext5:	
  5501 ;; *************** function _TMR3_Initialize *****************
  5502 ;; Defined at:
  5503 ;;		line 64 in file "mcc_generated_files/tmr3.c"
  5504 ;; Parameters:    Size  Location     Type
  5505 ;;		None
  5506 ;; Auto vars:     Size  Location     Type
  5507 ;;		None
  5508 ;; Return value:  Size  Location     Type
  5509 ;;                  1    wreg      void 
  5510 ;; Registers used:
  5511 ;;		wreg, status,2, status,0, pclath, cstack
  5512 ;; Tracked objects:
  5513 ;;		On entry : 0/0
  5514 ;;		On exit  : 0/0
  5515 ;;		Unchanged: 0/0
  5516 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5517 ;;      Params:         0       0       0       0       0       0       0       0
  5518 ;;      Locals:         0       0       0       0       0       0       0       0
  5519 ;;      Temps:          0       0       0       0       0       0       0       0
  5520 ;;      Totals:         0       0       0       0       0       0       0       0
  5521 ;;Total ram usage:        0 bytes
  5522 ;; Hardware stack levels used:    1
  5523 ;; Hardware stack levels required when called:    7
  5524 ;; This function calls:
  5525 ;;		_TMR3_SetInterruptHandler
  5526 ;;		_TMR3_StartTimer
  5527 ;; This function is called by:
  5528 ;;		_SYSTEM_Initialize
  5529 ;; This function uses a non-reentrant model
  5530 ;;
  5531                           
  5532                           
  5533                           ;psect for function _TMR3_Initialize
  5534  0C48                     _TMR3_Initialize:	
  5535                           
  5536                           ;tmr3.c: 69: T3CON = 0x30;
  5537                           
  5538                           ;incstack = 0
  5539                           ; Regs used in _TMR3_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5540  0C48  3030               	movlw	48
  5541  0C49  0028               	movlb	8	; select bank8
  5542  0C4A  0093               	movwf	19	;volatile
  5543                           
  5544                           ;tmr3.c: 72: T3GCON = 0x00;
  5545  0C4B  0194               	clrf	20	;volatile
  5546                           
  5547                           ;tmr3.c: 75: TMR3H = 0x00;
  5548  0C4C  0192               	clrf	18	;volatile
  5549                           
  5550                           ;tmr3.c: 78: TMR3L = 0x00;
  5551  0C4D  0191               	clrf	17	;volatile
  5552                           
  5553                           ;tmr3.c: 81: timer3ReloadVal=(TMR3H << 8) | TMR3L;
  5554  0C4E  0812               	movf	18,w	;volatile
  5555  0C4F  0020               	movlb	0	; select bank0
  5556  0C50  00DA               	movwf	_timer3ReloadVal+1	;volatile
  5557  0C51  0028               	movlb	8	; select bank8
  5558  0C52  0811               	movf	17,w	;volatile
  5559  0C53  0020               	movlb	0	; select bank0
  5560  0C54  00D9               	movwf	_timer3ReloadVal	;volatile
  5561                           
  5562                           ;tmr3.c: 84: PIR3bits.TMR3IF = 0;
  5563  0C55  1213               	bcf	19,4	;volatile
  5564                           
  5565                           ;tmr3.c: 87: PIE3bits.TMR3IE = 1;
  5566  0C56  0021               	movlb	1	; select bank1
  5567  0C57  1613               	bsf	19,4	;volatile
  5568                           
  5569                           ;tmr3.c: 90: TMR3_SetInterruptHandler(TMR3_DefaultInterruptHandler);
  5570  0C58  30A0               	movlw	low _TMR3_DefaultInterruptHandler
  5571  0C59  0020               	movlb	0	; select bank0
  5572  0C5A  00A5               	movwf	TMR3_SetInterruptHandler@InterruptHandler
  5573  0C5B  300A               	movlw	high _TMR3_DefaultInterruptHandler
  5574  0C5C  00A6               	movwf	TMR3_SetInterruptHandler@InterruptHandler+1
  5575  0C5D  318A  22E3  318C   	fcall	_TMR3_SetInterruptHandler
  5576                           
  5577                           ;tmr3.c: 93: TMR3_StartTimer();
  5578  0C60  318A  22B2         	fcall	_TMR3_StartTimer
  5579  0C62  0008               	return
  5580  0C63                     __end_of_TMR3_Initialize:	
  5581                           
  5582                           	psect	text6
  5583  0AB2                     __ptext6:	
  5584 ;; *************** function _TMR3_StartTimer *****************
  5585 ;; Defined at:
  5586 ;;		line 96 in file "mcc_generated_files/tmr3.c"
  5587 ;; Parameters:    Size  Location     Type
  5588 ;;		None
  5589 ;; Auto vars:     Size  Location     Type
  5590 ;;		None
  5591 ;; Return value:  Size  Location     Type
  5592 ;;                  1    wreg      void 
  5593 ;; Registers used:
  5594 ;;		None
  5595 ;; Tracked objects:
  5596 ;;		On entry : 0/0
  5597 ;;		On exit  : 0/0
  5598 ;;		Unchanged: 0/0
  5599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5600 ;;      Params:         0       0       0       0       0       0       0       0
  5601 ;;      Locals:         0       0       0       0       0       0       0       0
  5602 ;;      Temps:          0       0       0       0       0       0       0       0
  5603 ;;      Totals:         0       0       0       0       0       0       0       0
  5604 ;;Total ram usage:        0 bytes
  5605 ;; Hardware stack levels used:    1
  5606 ;; Hardware stack levels required when called:    6
  5607 ;; This function calls:
  5608 ;;		Nothing
  5609 ;; This function is called by:
  5610 ;;		_TMR3_Initialize
  5611 ;; This function uses a non-reentrant model
  5612 ;;
  5613                           
  5614                           
  5615                           ;psect for function _TMR3_StartTimer
  5616  0AB2                     _TMR3_StartTimer:	
  5617                           
  5618                           ;tmr3.c: 99: T3CONbits.TMR3ON = 1;
  5619                           
  5620                           ;incstack = 0
  5621                           ; Regs used in _TMR3_StartTimer: []
  5622  0AB2  0028               	movlb	8	; select bank8
  5623  0AB3  1413               	bsf	19,0	;volatile
  5624  0AB4  0008               	return
  5625  0AB5                     __end_of_TMR3_StartTimer:	
  5626                           
  5627                           	psect	text7
  5628  0AE3                     __ptext7:	
  5629 ;; *************** function _TMR3_SetInterruptHandler *****************
  5630 ;; Defined at:
  5631 ;;		line 172 in file "mcc_generated_files/tmr3.c"
  5632 ;; Parameters:    Size  Location     Type
  5633 ;;  InterruptHan    2    5[BANK0 ] PTR void 
  5634 ;;		 -> TMR3_DefaultInterruptHandler(1), 
  5635 ;; Auto vars:     Size  Location     Type
  5636 ;;		None
  5637 ;; Return value:  Size  Location     Type
  5638 ;;                  1    wreg      void 
  5639 ;; Registers used:
  5640 ;;		wreg
  5641 ;; Tracked objects:
  5642 ;;		On entry : 0/0
  5643 ;;		On exit  : 0/0
  5644 ;;		Unchanged: 0/0
  5645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5646 ;;      Params:         0       2       0       0       0       0       0       0
  5647 ;;      Locals:         0       0       0       0       0       0       0       0
  5648 ;;      Temps:          0       0       0       0       0       0       0       0
  5649 ;;      Totals:         0       2       0       0       0       0       0       0
  5650 ;;Total ram usage:        2 bytes
  5651 ;; Hardware stack levels used:    1
  5652 ;; Hardware stack levels required when called:    6
  5653 ;; This function calls:
  5654 ;;		Nothing
  5655 ;; This function is called by:
  5656 ;;		_TMR3_Initialize
  5657 ;; This function uses a non-reentrant model
  5658 ;;
  5659                           
  5660                           
  5661                           ;psect for function _TMR3_SetInterruptHandler
  5662  0AE3                     _TMR3_SetInterruptHandler:	
  5663                           
  5664                           ;tmr3.c: 173: TMR3_InterruptHandler = InterruptHandler;
  5665                           
  5666                           ;incstack = 0
  5667                           ; Regs used in _TMR3_SetInterruptHandler: [wreg]
  5668  0AE3  0020               	movlb	0	; select bank0
  5669  0AE4  0826               	movf	TMR3_SetInterruptHandler@InterruptHandler+1,w
  5670  0AE5  0021               	movlb	1	; select bank1
  5671  0AE6  00DB               	movwf	(_TMR3_InterruptHandler+1)^(0+128)
  5672  0AE7  0020               	movlb	0	; select bank0
  5673  0AE8  0825               	movf	TMR3_SetInterruptHandler@InterruptHandler,w
  5674  0AE9  0021               	movlb	1	; select bank1
  5675  0AEA  00DA               	movwf	_TMR3_InterruptHandler^(0+128)
  5676  0AEB  0008               	return
  5677  0AEC                     __end_of_TMR3_SetInterruptHandler:	
  5678                           
  5679                           	psect	text8
  5680  0BE6                     __ptext8:	
  5681 ;; *************** function _TMR0_Initialize *****************
  5682 ;; Defined at:
  5683 ;;		line 60 in file "mcc_generated_files/tmr0.c"
  5684 ;; Parameters:    Size  Location     Type
  5685 ;;		None
  5686 ;; Auto vars:     Size  Location     Type
  5687 ;;		None
  5688 ;; Return value:  Size  Location     Type
  5689 ;;                  1    wreg      void 
  5690 ;; Registers used:
  5691 ;;		wreg, status,2, status,0, pclath, cstack
  5692 ;; Tracked objects:
  5693 ;;		On entry : 0/0
  5694 ;;		On exit  : 0/0
  5695 ;;		Unchanged: 0/0
  5696 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5697 ;;      Params:         0       0       0       0       0       0       0       0
  5698 ;;      Locals:         0       0       0       0       0       0       0       0
  5699 ;;      Temps:          0       0       0       0       0       0       0       0
  5700 ;;      Totals:         0       0       0       0       0       0       0       0
  5701 ;;Total ram usage:        0 bytes
  5702 ;; Hardware stack levels used:    1
  5703 ;; Hardware stack levels required when called:    7
  5704 ;; This function calls:
  5705 ;;		_TMR0_SetInterruptHandler
  5706 ;;		_TMR0_StartTimer
  5707 ;; This function is called by:
  5708 ;;		_SYSTEM_Initialize
  5709 ;; This function uses a non-reentrant model
  5710 ;;
  5711                           
  5712                           
  5713                           ;psect for function _TMR0_Initialize
  5714  0BE6                     _TMR0_Initialize:	
  5715                           
  5716                           ;tmr0.c: 65: T0CON0 = 0x07;
  5717                           
  5718                           ;incstack = 0
  5719                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5720  0BE6  3007               	movlw	7
  5721  0BE7  0020               	movlb	0	; select bank0
  5722  0BE8  0097               	movwf	23	;volatile
  5723                           
  5724                           ;tmr0.c: 68: T0CON1 = 0x48;
  5725  0BE9  3048               	movlw	72
  5726  0BEA  0098               	movwf	24	;volatile
  5727                           
  5728                           ;tmr0.c: 71: TMR0H = 0x26;
  5729  0BEB  3026               	movlw	38
  5730  0BEC  0096               	movwf	22	;volatile
  5731                           
  5732                           ;tmr0.c: 74: TMR0L = 0x00;
  5733  0BED  0195               	clrf	21	;volatile
  5734                           
  5735                           ;tmr0.c: 77: PIR0bits.TMR0IF = 0;
  5736  0BEE  1290               	bcf	16,5	;volatile
  5737                           
  5738                           ;tmr0.c: 80: PIE0bits.TMR0IE = 1;
  5739  0BEF  0021               	movlb	1	; select bank1
  5740  0BF0  1690               	bsf	16,5	;volatile
  5741                           
  5742                           ;tmr0.c: 83: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  5743  0BF1  3002               	movlw	low _TMR0_DefaultInterruptHandler
  5744  0BF2  0020               	movlb	0	; select bank0
  5745  0BF3  00A5               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  5746  0BF4  3000               	movlw	high _TMR0_DefaultInterruptHandler
  5747  0BF5  00A6               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  5748  0BF6  318A  22DA  318B   	fcall	_TMR0_SetInterruptHandler
  5749                           
  5750                           ;tmr0.c: 86: TMR0_StartTimer();
  5751  0BF9  318A  22AF         	fcall	_TMR0_StartTimer
  5752  0BFB  0008               	return
  5753  0BFC                     __end_of_TMR0_Initialize:	
  5754                           
  5755                           	psect	text9
  5756  0AAF                     __ptext9:	
  5757 ;; *************** function _TMR0_StartTimer *****************
  5758 ;; Defined at:
  5759 ;;		line 89 in file "mcc_generated_files/tmr0.c"
  5760 ;; Parameters:    Size  Location     Type
  5761 ;;		None
  5762 ;; Auto vars:     Size  Location     Type
  5763 ;;		None
  5764 ;; Return value:  Size  Location     Type
  5765 ;;                  1    wreg      void 
  5766 ;; Registers used:
  5767 ;;		None
  5768 ;; Tracked objects:
  5769 ;;		On entry : 0/0
  5770 ;;		On exit  : 0/0
  5771 ;;		Unchanged: 0/0
  5772 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5773 ;;      Params:         0       0       0       0       0       0       0       0
  5774 ;;      Locals:         0       0       0       0       0       0       0       0
  5775 ;;      Temps:          0       0       0       0       0       0       0       0
  5776 ;;      Totals:         0       0       0       0       0       0       0       0
  5777 ;;Total ram usage:        0 bytes
  5778 ;; Hardware stack levels used:    1
  5779 ;; Hardware stack levels required when called:    6
  5780 ;; This function calls:
  5781 ;;		Nothing
  5782 ;; This function is called by:
  5783 ;;		_TMR0_Initialize
  5784 ;; This function uses a non-reentrant model
  5785 ;;
  5786                           
  5787                           
  5788                           ;psect for function _TMR0_StartTimer
  5789  0AAF                     _TMR0_StartTimer:	
  5790                           
  5791                           ;tmr0.c: 92: T0CON0bits.T0EN = 1;
  5792                           
  5793                           ;incstack = 0
  5794                           ; Regs used in _TMR0_StartTimer: []
  5795  0AAF  0020               	movlb	0	; select bank0
  5796  0AB0  1797               	bsf	23,7	;volatile
  5797  0AB1  0008               	return
  5798  0AB2                     __end_of_TMR0_StartTimer:	
  5799                           
  5800                           	psect	text10
  5801  0ADA                     __ptext10:	
  5802 ;; *************** function _TMR0_SetInterruptHandler *****************
  5803 ;; Defined at:
  5804 ;;		line 145 in file "mcc_generated_files/tmr0.c"
  5805 ;; Parameters:    Size  Location     Type
  5806 ;;  InterruptHan    2    5[BANK0 ] PTR void 
  5807 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  5808 ;; Auto vars:     Size  Location     Type
  5809 ;;		None
  5810 ;; Return value:  Size  Location     Type
  5811 ;;                  1    wreg      void 
  5812 ;; Registers used:
  5813 ;;		wreg
  5814 ;; Tracked objects:
  5815 ;;		On entry : 0/0
  5816 ;;		On exit  : 0/0
  5817 ;;		Unchanged: 0/0
  5818 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5819 ;;      Params:         0       2       0       0       0       0       0       0
  5820 ;;      Locals:         0       0       0       0       0       0       0       0
  5821 ;;      Temps:          0       0       0       0       0       0       0       0
  5822 ;;      Totals:         0       2       0       0       0       0       0       0
  5823 ;;Total ram usage:        2 bytes
  5824 ;; Hardware stack levels used:    1
  5825 ;; Hardware stack levels required when called:    6
  5826 ;; This function calls:
  5827 ;;		Nothing
  5828 ;; This function is called by:
  5829 ;;		_TMR0_Initialize
  5830 ;; This function uses a non-reentrant model
  5831 ;;
  5832                           
  5833                           
  5834                           ;psect for function _TMR0_SetInterruptHandler
  5835  0ADA                     _TMR0_SetInterruptHandler:	
  5836                           
  5837                           ;tmr0.c: 146: TMR0_InterruptHandler = InterruptHandler;
  5838                           
  5839                           ;incstack = 0
  5840                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  5841  0ADA  0020               	movlb	0	; select bank0
  5842  0ADB  0826               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  5843  0ADC  0021               	movlb	1	; select bank1
  5844  0ADD  00D9               	movwf	(_TMR0_InterruptHandler+1)^(0+128)
  5845  0ADE  0020               	movlb	0	; select bank0
  5846  0ADF  0825               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  5847  0AE0  0021               	movlb	1	; select bank1
  5848  0AE1  00D8               	movwf	_TMR0_InterruptHandler^(0+128)
  5849  0AE2  0008               	return
  5850  0AE3                     __end_of_TMR0_SetInterruptHandler:	
  5851                           
  5852                           	psect	text11
  5853  0EDD                     __ptext11:	
  5854 ;; *************** function _PIN_MANAGER_Initialize *****************
  5855 ;; Defined at:
  5856 ;;		line 54 in file "mcc_generated_files/pin_manager.c"
  5857 ;; Parameters:    Size  Location     Type
  5858 ;;		None
  5859 ;; Auto vars:     Size  Location     Type
  5860 ;;  state           1    7[BANK0 ] unsigned char 
  5861 ;; Return value:  Size  Location     Type
  5862 ;;                  1    wreg      void 
  5863 ;; Registers used:
  5864 ;;		wreg, status,2, status,0, pclath, cstack
  5865 ;; Tracked objects:
  5866 ;;		On entry : 0/0
  5867 ;;		On exit  : 0/0
  5868 ;;		Unchanged: 0/0
  5869 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  5870 ;;      Params:         0       0       0       0       0       0       0       0
  5871 ;;      Locals:         0       1       0       0       0       0       0       0
  5872 ;;      Temps:          0       0       0       0       0       0       0       0
  5873 ;;      Totals:         0       1       0       0       0       0       0       0
  5874 ;;Total ram usage:        1 bytes
  5875 ;; Hardware stack levels used:    1
  5876 ;; Hardware stack levels required when called:    7
  5877 ;; This function calls:
  5878 ;;		_IOCCF4_SetInterruptHandler
  5879 ;;		_IOCCF5_SetInterruptHandler
  5880 ;; This function is called by:
  5881 ;;		_SYSTEM_Initialize
  5882 ;; This function uses a non-reentrant model
  5883 ;;
  5884                           
  5885                           
  5886                           ;psect for function _PIN_MANAGER_Initialize
  5887  0EDD                     _PIN_MANAGER_Initialize:	
  5888                           
  5889                           ;pin_manager.c: 59: LATA = 0x00;
  5890                           
  5891                           ;incstack = 0
  5892                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2+status,0+pclath+cstack]
  5893  0EDD  0022               	movlb	2	; select bank2
  5894  0EDE  018C               	clrf	12	;volatile
  5895                           
  5896                           ;pin_manager.c: 60: LATB = 0x00;
  5897  0EDF  018D               	clrf	13	;volatile
  5898                           
  5899                           ;pin_manager.c: 61: LATC = 0x00;
  5900  0EE0  018E               	clrf	14	;volatile
  5901                           
  5902                           ;pin_manager.c: 66: TRISA = 0x37;
  5903  0EE1  3037               	movlw	55
  5904  0EE2  0021               	movlb	1	; select bank1
  5905  0EE3  008C               	movwf	12	;volatile
  5906                           
  5907                           ;pin_manager.c: 67: TRISB = 0x90;
  5908  0EE4  3090               	movlw	144
  5909  0EE5  008D               	movwf	13	;volatile
  5910                           
  5911                           ;pin_manager.c: 68: TRISC = 0x30;
  5912  0EE6  3030               	movlw	48
  5913  0EE7  008E               	movwf	14	;volatile
  5914                           
  5915                           ;pin_manager.c: 73: ANSELC = 0x80;
  5916  0EE8  3080               	movlw	128
  5917  0EE9  0023               	movlb	3	; select bank3
  5918  0EEA  008E               	movwf	14	;volatile
  5919                           
  5920                           ;pin_manager.c: 74: ANSELB = 0x00;
  5921  0EEB  018D               	clrf	13	;volatile
  5922                           
  5923                           ;pin_manager.c: 75: ANSELA = 0x37;
  5924  0EEC  3037               	movlw	55
  5925  0EED  008C               	movwf	12	;volatile
  5926                           
  5927                           ;pin_manager.c: 80: WPUB = 0x80;
  5928  0EEE  3080               	movlw	128
  5929  0EEF  0024               	movlb	4	; select bank4
  5930  0EF0  008D               	movwf	13	;volatile
  5931                           
  5932                           ;pin_manager.c: 81: WPUA = 0x00;
  5933  0EF1  018C               	clrf	12	;volatile
  5934                           
  5935                           ;pin_manager.c: 82: WPUC = 0x00;
  5936  0EF2  018E               	clrf	14	;volatile
  5937                           
  5938                           ;pin_manager.c: 87: ODCONA = 0x00;
  5939  0EF3  0025               	movlb	5	; select bank5
  5940  0EF4  018C               	clrf	12	;volatile
  5941                           
  5942                           ;pin_manager.c: 88: ODCONB = 0x00;
  5943  0EF5  018D               	clrf	13	;volatile
  5944                           
  5945                           ;pin_manager.c: 89: ODCONC = 0x00;
  5946  0EF6  018E               	clrf	14	;volatile
  5947                           
  5948                           ;pin_manager.c: 96: IOCCFbits.IOCCF4 = 0;
  5949  0EF7  0027               	movlb	7	; select bank7
  5950  0EF8  1219               	bcf	25,4	;volatile
  5951                           
  5952                           ;pin_manager.c: 97: IOCCFbits.IOCCF5 = 0;
  5953  0EF9  1299               	bcf	25,5	;volatile
  5954                           
  5955                           ;pin_manager.c: 99: IOCCNbits.IOCCN4 = 1;
  5956  0EFA  1618               	bsf	24,4	;volatile
  5957                           
  5958                           ;pin_manager.c: 100: IOCCNbits.IOCCN5 = 1;
  5959  0EFB  1698               	bsf	24,5	;volatile
  5960                           
  5961                           ;pin_manager.c: 102: IOCCPbits.IOCCP4 = 1;
  5962  0EFC  1617               	bsf	23,4	;volatile
  5963                           
  5964                           ;pin_manager.c: 103: IOCCPbits.IOCCP5 = 1;
  5965  0EFD  1697               	bsf	23,5	;volatile
  5966                           
  5967                           ;pin_manager.c: 106: IOCCF4_SetInterruptHandler(IOCCF4_DefaultInterruptHandler);
  5968  0EFE  3098               	movlw	low _IOCCF4_DefaultInterruptHandler
  5969  0EFF  0020               	movlb	0	; select bank0
  5970  0F00  00A5               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler
  5971  0F01  300A               	movlw	high _IOCCF4_DefaultInterruptHandler
  5972  0F02  00A6               	movwf	IOCCF4_SetInterruptHandler@InterruptHandler+1
  5973  0F03  318A  22C8  318E   	fcall	_IOCCF4_SetInterruptHandler
  5974                           
  5975                           ;pin_manager.c: 107: IOCCF5_SetInterruptHandler(IOCCF5_DefaultInterruptHandler);
  5976  0F06  3099               	movlw	low _IOCCF5_DefaultInterruptHandler
  5977  0F07  0020               	movlb	0	; select bank0
  5978  0F08  00A5               	movwf	IOCCF5_SetInterruptHandler@InterruptHandler
  5979  0F09  300A               	movlw	high _IOCCF5_DefaultInterruptHandler
  5980  0F0A  00A6               	movwf	IOCCF5_SetInterruptHandler@InterruptHandler+1
  5981  0F0B  318A  22D1  318E   	fcall	_IOCCF5_SetInterruptHandler
  5982                           
  5983                           ;pin_manager.c: 110: PIE0bits.IOCIE = 1;
  5984  0F0E  0021               	movlb	1	; select bank1
  5985  0F0F  1610               	bsf	16,4	;volatile
  5986                           
  5987                           ;pin_manager.c: 113: bool state = GIE;
  5988  0F10  3000               	movlw	0
  5989  0F11  1B8B               	btfsc	11,7	;volatile
  5990  0F12  3001               	movlw	1
  5991  0F13  0020               	movlb	0	; select bank0
  5992  0F14  00A7               	movwf	PIN_MANAGER_Initialize@state
  5993                           
  5994                           ;pin_manager.c: 114: GIE = 0;
  5995  0F15  138B               	bcf	11,7	;volatile
  5996                           
  5997                           ;pin_manager.c: 115: PPSLOCK = 0x55;
  5998  0F16  3055               	movlw	85
  5999  0F17  003C               	movlb	28	; select bank28
  6000  0F18  008F               	movwf	15	;volatile
  6001                           
  6002                           ;pin_manager.c: 116: PPSLOCK = 0xAA;
  6003  0F19  30AA               	movlw	170
  6004  0F1A  008F               	movwf	15	;volatile
  6005                           
  6006                           ;pin_manager.c: 117: PPSLOCKbits.PPSLOCKED = 0x00;
  6007  0F1B  100F               	bcf	15,0	;volatile
  6008                           
  6009                           ;pin_manager.c: 119: RXPPSbits.RXPPS = 0x0C;
  6010  0F1C  0824               	movf	36,w	;volatile
  6011  0F1D  39E0               	andlw	-32
  6012  0F1E  380C               	iorlw	12
  6013  0F1F  00A4               	movwf	36	;volatile
  6014                           
  6015                           ;pin_manager.c: 120: CCP1PPSbits.CCP1PPS = 0x15;
  6016  0F20  0814               	movf	20,w	;volatile
  6017  0F21  39E0               	andlw	-32
  6018  0F22  3815               	iorlw	21
  6019  0F23  0094               	movwf	20	;volatile
  6020                           
  6021                           ;pin_manager.c: 121: RB5PPSbits.RB5PPS = 0x14;
  6022  0F24  003D               	movlb	29	; select bank29
  6023  0F25  081D               	movf	29,w	;volatile
  6024  0F26  39E0               	andlw	-32
  6025  0F27  3814               	iorlw	20
  6026  0F28  009D               	movwf	29	;volatile
  6027                           
  6028                           ;pin_manager.c: 123: PPSLOCK = 0x55;
  6029  0F29  3055               	movlw	85
  6030  0F2A  003C               	movlb	28	; select bank28
  6031  0F2B  008F               	movwf	15	;volatile
  6032                           
  6033                           ;pin_manager.c: 124: PPSLOCK = 0xAA;
  6034  0F2C  30AA               	movlw	170
  6035  0F2D  008F               	movwf	15	;volatile
  6036                           
  6037                           ;pin_manager.c: 125: PPSLOCKbits.PPSLOCKED = 0x01;
  6038  0F2E  140F               	bsf	15,0	;volatile
  6039                           
  6040                           ;pin_manager.c: 127: GIE = state;
  6041  0F2F  0020               	movlb	0	; select bank0
  6042  0F30  1C27               	btfss	PIN_MANAGER_Initialize@state,0
  6043  0F31  2F34               	goto	u2470
  6044  0F32  178B               	bsf	11,7	;volatile
  6045  0F33  0008               	return
  6046  0F34                     u2470:	
  6047  0F34  138B               	bcf	11,7	;volatile
  6048  0F35  0008               	return
  6049  0F36                     __end_of_PIN_MANAGER_Initialize:	
  6050                           
  6051                           	psect	text12
  6052  0AD1                     __ptext12:	
  6053 ;; *************** function _IOCCF5_SetInterruptHandler *****************
  6054 ;; Defined at:
  6055 ;;		line 195 in file "mcc_generated_files/pin_manager.c"
  6056 ;; Parameters:    Size  Location     Type
  6057 ;;  InterruptHan    2    5[BANK0 ] PTR void 
  6058 ;;		 -> IOCCF5_DefaultInterruptHandler(1), 
  6059 ;; Auto vars:     Size  Location     Type
  6060 ;;		None
  6061 ;; Return value:  Size  Location     Type
  6062 ;;                  1    wreg      void 
  6063 ;; Registers used:
  6064 ;;		wreg
  6065 ;; Tracked objects:
  6066 ;;		On entry : 0/0
  6067 ;;		On exit  : 0/0
  6068 ;;		Unchanged: 0/0
  6069 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6070 ;;      Params:         0       2       0       0       0       0       0       0
  6071 ;;      Locals:         0       0       0       0       0       0       0       0
  6072 ;;      Temps:          0       0       0       0       0       0       0       0
  6073 ;;      Totals:         0       2       0       0       0       0       0       0
  6074 ;;Total ram usage:        2 bytes
  6075 ;; Hardware stack levels used:    1
  6076 ;; Hardware stack levels required when called:    6
  6077 ;; This function calls:
  6078 ;;		Nothing
  6079 ;; This function is called by:
  6080 ;;		_PIN_MANAGER_Initialize
  6081 ;; This function uses a non-reentrant model
  6082 ;;
  6083                           
  6084                           
  6085                           ;psect for function _IOCCF5_SetInterruptHandler
  6086  0AD1                     _IOCCF5_SetInterruptHandler:	
  6087                           
  6088                           ;pin_manager.c: 196: IOCCF5_InterruptHandler = InterruptHandler;
  6089                           
  6090                           ;incstack = 0
  6091                           ; Regs used in _IOCCF5_SetInterruptHandler: [wreg]
  6092  0AD1  0020               	movlb	0	; select bank0
  6093  0AD2  0826               	movf	IOCCF5_SetInterruptHandler@InterruptHandler+1,w
  6094  0AD3  0022               	movlb	2	; select bank2
  6095  0AD4  00DB               	movwf	(_IOCCF5_InterruptHandler+1)^(0+256)
  6096  0AD5  0020               	movlb	0	; select bank0
  6097  0AD6  0825               	movf	IOCCF5_SetInterruptHandler@InterruptHandler,w
  6098  0AD7  0022               	movlb	2	; select bank2
  6099  0AD8  00DA               	movwf	_IOCCF5_InterruptHandler^(0+256)
  6100  0AD9  0008               	return
  6101  0ADA                     __end_of_IOCCF5_SetInterruptHandler:	
  6102                           
  6103                           	psect	text13
  6104  0AC8                     __ptext13:	
  6105 ;; *************** function _IOCCF4_SetInterruptHandler *****************
  6106 ;; Defined at:
  6107 ;;		line 165 in file "mcc_generated_files/pin_manager.c"
  6108 ;; Parameters:    Size  Location     Type
  6109 ;;  InterruptHan    2    5[BANK0 ] PTR void 
  6110 ;;		 -> IOCCF4_DefaultInterruptHandler(1), 
  6111 ;; Auto vars:     Size  Location     Type
  6112 ;;		None
  6113 ;; Return value:  Size  Location     Type
  6114 ;;                  1    wreg      void 
  6115 ;; Registers used:
  6116 ;;		wreg
  6117 ;; Tracked objects:
  6118 ;;		On entry : 0/0
  6119 ;;		On exit  : 0/0
  6120 ;;		Unchanged: 0/0
  6121 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6122 ;;      Params:         0       2       0       0       0       0       0       0
  6123 ;;      Locals:         0       0       0       0       0       0       0       0
  6124 ;;      Temps:          0       0       0       0       0       0       0       0
  6125 ;;      Totals:         0       2       0       0       0       0       0       0
  6126 ;;Total ram usage:        2 bytes
  6127 ;; Hardware stack levels used:    1
  6128 ;; Hardware stack levels required when called:    6
  6129 ;; This function calls:
  6130 ;;		Nothing
  6131 ;; This function is called by:
  6132 ;;		_PIN_MANAGER_Initialize
  6133 ;; This function uses a non-reentrant model
  6134 ;;
  6135                           
  6136                           
  6137                           ;psect for function _IOCCF4_SetInterruptHandler
  6138  0AC8                     _IOCCF4_SetInterruptHandler:	
  6139                           
  6140                           ;pin_manager.c: 166: IOCCF4_InterruptHandler = InterruptHandler;
  6141                           
  6142                           ;incstack = 0
  6143                           ; Regs used in _IOCCF4_SetInterruptHandler: [wreg]
  6144  0AC8  0020               	movlb	0	; select bank0
  6145  0AC9  0826               	movf	IOCCF4_SetInterruptHandler@InterruptHandler+1,w
  6146  0ACA  0022               	movlb	2	; select bank2
  6147  0ACB  00DD               	movwf	(_IOCCF4_InterruptHandler+1)^(0+256)
  6148  0ACC  0020               	movlb	0	; select bank0
  6149  0ACD  0825               	movf	IOCCF4_SetInterruptHandler@InterruptHandler,w
  6150  0ACE  0022               	movlb	2	; select bank2
  6151  0ACF  00DC               	movwf	_IOCCF4_InterruptHandler^(0+256)
  6152  0AD0  0008               	return
  6153  0AD1                     __end_of_IOCCF4_SetInterruptHandler:	
  6154                           
  6155                           	psect	text14
  6156  0B00                     __ptext14:	
  6157 ;; *************** function _OSCILLATOR_Initialize *****************
  6158 ;; Defined at:
  6159 ;;		line 88 in file "mcc_generated_files/mcc.c"
  6160 ;; Parameters:    Size  Location     Type
  6161 ;;		None
  6162 ;; Auto vars:     Size  Location     Type
  6163 ;;		None
  6164 ;; Return value:  Size  Location     Type
  6165 ;;                  1    wreg      void 
  6166 ;; Registers used:
  6167 ;;		wreg, status,2
  6168 ;; Tracked objects:
  6169 ;;		On entry : 0/0
  6170 ;;		On exit  : 0/0
  6171 ;;		Unchanged: 0/0
  6172 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6173 ;;      Params:         0       0       0       0       0       0       0       0
  6174 ;;      Locals:         0       0       0       0       0       0       0       0
  6175 ;;      Temps:          0       0       0       0       0       0       0       0
  6176 ;;      Totals:         0       0       0       0       0       0       0       0
  6177 ;;Total ram usage:        0 bytes
  6178 ;; Hardware stack levels used:    1
  6179 ;; Hardware stack levels required when called:    6
  6180 ;; This function calls:
  6181 ;;		Nothing
  6182 ;; This function is called by:
  6183 ;;		_SYSTEM_Initialize
  6184 ;; This function uses a non-reentrant model
  6185 ;;
  6186                           
  6187                           
  6188                           ;psect for function _OSCILLATOR_Initialize
  6189  0B00                     _OSCILLATOR_Initialize:	
  6190                           
  6191                           ;mcc.c: 91: OSCCON1 = 0x00;
  6192                           
  6193                           ;incstack = 0
  6194                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6195  0B00  0032               	movlb	18	; select bank18
  6196  0B01  0199               	clrf	25	;volatile
  6197                           
  6198                           ;mcc.c: 93: OSCCON3 = 0x00;
  6199  0B02  019B               	clrf	27	;volatile
  6200                           
  6201                           ;mcc.c: 95: OSCEN = 0x00;
  6202  0B03  019D               	clrf	29	;volatile
  6203                           
  6204                           ;mcc.c: 97: OSCFRQ = 0x06;
  6205  0B04  3006               	movlw	6
  6206  0B05  009F               	movwf	31	;volatile
  6207                           
  6208                           ;mcc.c: 99: OSCTUNE = 0x00;
  6209  0B06  019E               	clrf	30	;volatile
  6210  0B07                     l340:	
  6211                           ;mcc.c: 102: {
  6212                           
  6213                           ;mcc.c: 101: while(PLLR == 0)
  6214                           
  6215  0B07  181C               	btfsc	28,0	;volatile
  6216  0B08  0008               	return
  6217  0B09  2B07               	goto	l340
  6218  0B0A                     __end_of_OSCILLATOR_Initialize:	
  6219                           
  6220                           	psect	text15
  6221  0B76                     __ptext15:	
  6222 ;; *************** function _CCP1_Initialize *****************
  6223 ;; Defined at:
  6224 ;;		line 58 in file "mcc_generated_files/ccp1.c"
  6225 ;; Parameters:    Size  Location     Type
  6226 ;;		None
  6227 ;; Auto vars:     Size  Location     Type
  6228 ;;		None
  6229 ;; Return value:  Size  Location     Type
  6230 ;;                  1    wreg      void 
  6231 ;; Registers used:
  6232 ;;		wreg, status,2, status,0
  6233 ;; Tracked objects:
  6234 ;;		On entry : 0/0
  6235 ;;		On exit  : 0/0
  6236 ;;		Unchanged: 0/0
  6237 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6238 ;;      Params:         0       0       0       0       0       0       0       0
  6239 ;;      Locals:         0       0       0       0       0       0       0       0
  6240 ;;      Temps:          0       0       0       0       0       0       0       0
  6241 ;;      Totals:         0       0       0       0       0       0       0       0
  6242 ;;Total ram usage:        0 bytes
  6243 ;; Hardware stack levels used:    1
  6244 ;; Hardware stack levels required when called:    6
  6245 ;; This function calls:
  6246 ;;		Nothing
  6247 ;; This function is called by:
  6248 ;;		_SYSTEM_Initialize
  6249 ;; This function uses a non-reentrant model
  6250 ;;
  6251                           
  6252                           
  6253                           ;psect for function _CCP1_Initialize
  6254  0B76                     _CCP1_Initialize:	
  6255                           
  6256                           ;ccp1.c: 63: CCP1CON = 0x83;
  6257                           
  6258                           ;incstack = 0
  6259                           ; Regs used in _CCP1_Initialize: [wreg+status,2+status,0]
  6260  0B76  3083               	movlw	131
  6261  0B77  0025               	movlb	5	; select bank5
  6262  0B78  0093               	movwf	19	;volatile
  6263                           
  6264                           ;ccp1.c: 66: CCP1CAP = 0x00;
  6265  0B79  0194               	clrf	20	;volatile
  6266                           
  6267                           ;ccp1.c: 69: CCPR1H = 0x00;
  6268  0B7A  0192               	clrf	18	;volatile
  6269                           
  6270                           ;ccp1.c: 72: CCPR1L = 0x00;
  6271  0B7B  0191               	clrf	17	;volatile
  6272                           
  6273                           ;ccp1.c: 75: CCPTMRSbits.C1TSEL = 0x2;
  6274  0B7C  081F               	movf	31,w	;volatile
  6275  0B7D  39FC               	andlw	-4
  6276  0B7E  3802               	iorlw	2
  6277  0B7F  009F               	movwf	31	;volatile
  6278                           
  6279                           ;ccp1.c: 78: PIR4bits.CCP1IF = 0;
  6280  0B80  0020               	movlb	0	; select bank0
  6281  0B81  1014               	bcf	20,0	;volatile
  6282                           
  6283                           ;ccp1.c: 81: PIE4bits.CCP1IE = 1;
  6284  0B82  0021               	movlb	1	; select bank1
  6285  0B83  1414               	bsf	20,0	;volatile
  6286  0B84  0008               	return
  6287  0B85                     __end_of_CCP1_Initialize:	
  6288                           
  6289                           	psect	text16
  6290  01A5                     __ptext16:	
  6291 ;; *************** function _ModbuspollSlave *****************
  6292 ;; Defined at:
  6293 ;;		line 316 in file "modbusMS.c"
  6294 ;; Parameters:    Size  Location     Type
  6295 ;;  regs            1    wreg     PTR unsigned int 
  6296 ;;		 -> ModbusData(16), 
  6297 ;;  u8size          1   44[BANK0 ] unsigned char 
  6298 ;; Auto vars:     Size  Location     Type
  6299 ;;  regs            1    3[BANK2 ] PTR unsigned int 
  6300 ;;		 -> ModbusData(16), 
  6301 ;;  u8exception     1    2[BANK2 ] unsigned char 
  6302 ;;  u8current       1    1[BANK2 ] unsigned char 
  6303 ;;  i8state         1    0[BANK2 ] char 
  6304 ;; Return value:  Size  Location     Type
  6305 ;;                  1    wreg      char 
  6306 ;; Registers used:
  6307 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6308 ;; Tracked objects:
  6309 ;;		On entry : 0/0
  6310 ;;		On exit  : 0/0
  6311 ;;		Unchanged: 0/0
  6312 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6313 ;;      Params:         0       1       0       0       0       0       0       0
  6314 ;;      Locals:         0       0       0       4       0       0       0       0
  6315 ;;      Temps:          0       4       0       0       0       0       0       0
  6316 ;;      Totals:         0       5       0       4       0       0       0       0
  6317 ;;Total ram usage:        9 bytes
  6318 ;; Hardware stack levels used:    1
  6319 ;; Hardware stack levels required when called:   10
  6320 ;; This function calls:
  6321 ;;		_Serialavailable
  6322 ;;		_buildException
  6323 ;;		_getRxBuffer
  6324 ;;		_millis
  6325 ;;		_process_FC1
  6326 ;;		_process_FC15
  6327 ;;		_process_FC16
  6328 ;;		_process_FC3
  6329 ;;		_process_FC5
  6330 ;;		_process_FC6
  6331 ;;		_sendTxBuffer
  6332 ;;		_validateRequest
  6333 ;; This function is called by:
  6334 ;;		_main
  6335 ;; This function uses a non-reentrant model
  6336 ;;
  6337                           
  6338                           
  6339                           ;psect for function _ModbuspollSlave
  6340  01A5                     _ModbuspollSlave:	
  6341                           
  6342                           ;incstack = 0
  6343                           ; Regs used in _ModbuspollSlave: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6344                           ;ModbuspollSlave@regs stored from wreg
  6345  01A5  0022               	movlb	2	; select bank2
  6346  01A6  00E1               	movwf	ModbuspollSlave@regs^(0+256)
  6347                           
  6348                           ;modbusMS.c: 319: au16regs = regs;
  6349  01A7  0861               	movf	ModbuspollSlave@regs^(0+256),w
  6350  01A8  0020               	movlb	0	; select bank0
  6351  01A9  00CD               	movwf	??_ModbuspollSlave
  6352  01AA  084D               	movf	??_ModbuspollSlave,w
  6353  01AB  00DC               	movwf	_au16regs
  6354                           
  6355                           ;modbusMS.c: 320: u8regsize = u8size;
  6356  01AC  084C               	movf	ModbuspollSlave@u8size,w
  6357  01AD  00CD               	movwf	??_ModbuspollSlave
  6358  01AE  084D               	movf	??_ModbuspollSlave,w
  6359  01AF  00DB               	movwf	_u8regsize
  6360                           
  6361                           ;modbusMS.c: 321: unsigned char u8current;
  6362                           ;modbusMS.c: 326: u8current = Serialavailable();
  6363  01B0  318A  22A9  3181   	fcall	_Serialavailable
  6364  01B3  0020               	movlb	0	; select bank0
  6365  01B4  00CD               	movwf	??_ModbuspollSlave
  6366  01B5  084D               	movf	??_ModbuspollSlave,w
  6367  01B6  0022               	movlb	2	; select bank2
  6368  01B7  00DF               	movwf	ModbuspollSlave@u8current^(0+256)
  6369                           
  6370                           ;modbusMS.c: 328: if (u8current == 0) return 0;
  6371  01B8  085F               	movf	ModbuspollSlave@u8current^(0+256),w
  6372  01B9  1903               	btfsc	3,2
  6373  01BA  0008               	return
  6374                           
  6375                           ;modbusMS.c: 331: if (u8current != u8lastRec)
  6376                           
  6377                           ;	Return value of _ModbuspollSlave is never used
  6378  01BB  085F               	movf	ModbuspollSlave@u8current^(0+256),w
  6379  01BC  0020               	movlb	0	; select bank0
  6380  01BD  065D               	xorwf	_u8lastRec,w
  6381  01BE  1903               	skipnz
  6382  01BF  29DD               	goto	l4906
  6383                           
  6384                           ;modbusMS.c: 332: {
  6385                           ;modbusMS.c: 333: u8lastRec = u8current;
  6386  01C0  0022               	movlb	2	; select bank2
  6387  01C1  085F               	movf	ModbuspollSlave@u8current^(0+256),w
  6388  01C2  0020               	movlb	0	; select bank0
  6389  01C3  00CD               	movwf	??_ModbuspollSlave
  6390  01C4  084D               	movf	??_ModbuspollSlave,w
  6391  01C5  00DD               	movwf	_u8lastRec
  6392                           
  6393                           ;modbusMS.c: 334: u32time = millis() + 50;
  6394  01C6  318B  2385         	fcall	_millis
  6395  01C8  3032               	movlw	50
  6396  01C9  0020               	movlb	0	; select bank0
  6397  01CA  0725               	addwf	?_millis,w
  6398  01CB  0021               	movlb	1	; select bank1
  6399  01CC  00C0               	movwf	_u32time^(0+128)
  6400  01CD  3000               	movlw	0
  6401  01CE  0020               	movlb	0	; select bank0
  6402  01CF  3D26               	addwfc	?_millis+1,w
  6403  01D0  0021               	movlb	1	; select bank1
  6404  01D1  00C1               	movwf	(_u32time+1)^(0+128)
  6405  01D2  3000               	movlw	0
  6406  01D3  0020               	movlb	0	; select bank0
  6407  01D4  3D27               	addwfc	?_millis+2,w
  6408  01D5  0021               	movlb	1	; select bank1
  6409  01D6  00C2               	movwf	(_u32time+2)^(0+128)
  6410  01D7  3000               	movlw	0
  6411  01D8  0020               	movlb	0	; select bank0
  6412  01D9  3D28               	addwfc	?_millis+3,w
  6413  01DA  0021               	movlb	1	; select bank1
  6414  01DB  00C3               	movwf	(_u32time+3)^(0+128)
  6415                           
  6416                           ;modbusMS.c: 335: return 0;
  6417                           ;	Return value of _ModbuspollSlave is never used
  6418  01DC  0008               	return
  6419  01DD                     l4906:	
  6420                           
  6421                           ;modbusMS.c: 336: }
  6422                           ;modbusMS.c: 337: if (millis() < u32time) return 0;
  6423  01DD  318B  2385  3181   	fcall	_millis
  6424  01E0  0021               	movlb	1	; select bank1
  6425  01E1  0843               	movf	(_u32time+3)^(0+128),w
  6426  01E2  0020               	movlb	0	; select bank0
  6427  01E3  0228               	subwf	?_millis+3,w
  6428  01E4  1D03               	skipz
  6429  01E5  29F6               	goto	u4235
  6430  01E6  0021               	movlb	1	; select bank1
  6431  01E7  0842               	movf	(_u32time+2)^(0+128),w
  6432  01E8  0020               	movlb	0	; select bank0
  6433  01E9  0227               	subwf	?_millis+2,w
  6434  01EA  1D03               	skipz
  6435  01EB  29F6               	goto	u4235
  6436  01EC  0021               	movlb	1	; select bank1
  6437  01ED  0841               	movf	(_u32time+1)^(0+128),w
  6438  01EE  0020               	movlb	0	; select bank0
  6439  01EF  0226               	subwf	?_millis+1,w
  6440  01F0  1D03               	skipz
  6441  01F1  29F6               	goto	u4235
  6442  01F2  0021               	movlb	1	; select bank1
  6443  01F3  0840               	movf	_u32time^(0+128),w
  6444  01F4  0020               	movlb	0	; select bank0
  6445  01F5  0225               	subwf	?_millis,w
  6446  01F6                     u4235:	
  6447  01F6  1C03               	btfss	3,0
  6448  01F7  0008               	return
  6449                           
  6450                           ;modbusMS.c: 339: u8lastRec = 0;
  6451                           
  6452                           ;	Return value of _ModbuspollSlave is never used
  6453  01F8  01DD               	clrf	_u8lastRec
  6454                           
  6455                           ;modbusMS.c: 340: signed char i8state = getRxBuffer();
  6456  01F9  318D  2541  3181   	fcall	_getRxBuffer
  6457  01FC  0020               	movlb	0	; select bank0
  6458  01FD  00CD               	movwf	??_ModbuspollSlave
  6459  01FE  084D               	movf	??_ModbuspollSlave,w
  6460  01FF  0022               	movlb	2	; select bank2
  6461  0200  00DE               	movwf	ModbuspollSlave@i8state^(0+256)
  6462                           
  6463                           ;modbusMS.c: 341: u8lastError = i8state;
  6464  0201  085E               	movf	ModbuspollSlave@i8state^(0+256),w
  6465  0202  0020               	movlb	0	; select bank0
  6466  0203  00CD               	movwf	??_ModbuspollSlave
  6467  0204  084D               	movf	??_ModbuspollSlave,w
  6468  0205  0021               	movlb	1	; select bank1
  6469  0206  00DC               	movwf	_u8lastError^(0+128)
  6470                           
  6471                           ;modbusMS.c: 342: if (i8state < 7) return i8state;
  6472  0207  0022               	movlb	2	; select bank2
  6473  0208  085E               	movf	ModbuspollSlave@i8state^(0+256),w
  6474  0209  3A80               	xorlw	128
  6475  020A  3E79               	addlw	-135
  6476  020B  1C03               	btfss	3,0
  6477  020C  0008               	return
  6478                           
  6479                           ;modbusMS.c: 345: if (au8Buffer[ ID ] != u8ID) return 0;
  6480                           
  6481                           ;	Return value of _ModbuspollSlave is never used
  6482  020D  0021               	movlb	1	; select bank1
  6483  020E  0820               	movf	_au8Buffer^(0+128),w
  6484  020F  0020               	movlb	0	; select bank0
  6485  0210  0660               	xorwf	_u8ID,w
  6486  0211  1D03               	btfss	3,2
  6487  0212  0008               	return
  6488                           
  6489                           ;modbusMS.c: 348: unsigned char u8exception = validateRequest();
  6490                           
  6491                           ;	Return value of _ModbuspollSlave is never used
  6492  0213  3180  2090  3181   	fcall	_validateRequest
  6493  0216  0020               	movlb	0	; select bank0
  6494  0217  00CD               	movwf	??_ModbuspollSlave
  6495  0218  084D               	movf	??_ModbuspollSlave,w
  6496  0219  0022               	movlb	2	; select bank2
  6497  021A  00E0               	movwf	ModbuspollSlave@u8exception^(0+256)
  6498                           
  6499                           ;modbusMS.c: 349: if (u8exception > 0)
  6500  021B  0860               	movf	ModbuspollSlave@u8exception^(0+256),w
  6501  021C  1903               	btfsc	3,2
  6502  021D  2A2F               	goto	l4938
  6503                           
  6504                           ;modbusMS.c: 350: {
  6505                           ;modbusMS.c: 351: if (u8exception != NO_REPLY)
  6506  021E  0A60               	incf	ModbuspollSlave@u8exception^(0+256),w
  6507  021F  1903               	btfsc	3,2
  6508  0220  2A27               	goto	l4934
  6509                           
  6510                           ;modbusMS.c: 352: {
  6511                           ;modbusMS.c: 353: buildException( u8exception );
  6512  0221  0860               	movf	ModbuspollSlave@u8exception^(0+256),w
  6513  0222  318C  24B9  3181   	fcall	_buildException
  6514                           
  6515                           ;modbusMS.c: 354: sendTxBuffer();
  6516  0225  3185  2577         	fcall	_sendTxBuffer
  6517  0227                     l4934:	
  6518                           
  6519                           ;modbusMS.c: 355: }
  6520                           ;modbusMS.c: 356: u8lastError = u8exception;
  6521  0227  0022               	movlb	2	; select bank2
  6522  0228  0860               	movf	ModbuspollSlave@u8exception^(0+256),w
  6523  0229  0020               	movlb	0	; select bank0
  6524  022A  00CD               	movwf	??_ModbuspollSlave
  6525  022B  084D               	movf	??_ModbuspollSlave,w
  6526  022C  0021               	movlb	1	; select bank1
  6527  022D  00DC               	movwf	_u8lastError^(0+128)
  6528                           
  6529                           ;modbusMS.c: 357: return u8exception;
  6530                           ;	Return value of _ModbuspollSlave is never used
  6531  022E  0008               	return
  6532  022F                     l4938:	
  6533                           
  6534                           ;modbusMS.c: 358: }
  6535                           ;modbusMS.c: 360: u32timeOut = millis() + (long)(u16timeOut);
  6536  022F  0021               	movlb	1	; select bank1
  6537  0230  084C               	movf	_u16timeOut^(0+128),w
  6538  0231  0020               	movlb	0	; select bank0
  6539  0232  00CD               	movwf	??_ModbuspollSlave
  6540  0233  0021               	movlb	1	; select bank1
  6541  0234  084D               	movf	(_u16timeOut+1)^(0+128),w
  6542  0235  0020               	movlb	0	; select bank0
  6543  0236  00CE               	movwf	??_ModbuspollSlave+1
  6544  0237  01CF               	clrf	??_ModbuspollSlave+2
  6545  0238  01D0               	clrf	??_ModbuspollSlave+3
  6546  0239  318B  2385  3181   	fcall	_millis
  6547  023C  0020               	movlb	0	; select bank0
  6548  023D  0825               	movf	?_millis,w
  6549  023E  07CD               	addwf	??_ModbuspollSlave,f
  6550  023F  0826               	movf	?_millis+1,w
  6551  0240  3DCE               	addwfc	??_ModbuspollSlave+1,f
  6552  0241  0827               	movf	?_millis+2,w
  6553  0242  3DCF               	addwfc	??_ModbuspollSlave+2,f
  6554  0243  0828               	movf	?_millis+3,w
  6555  0244  3DD0               	addwfc	??_ModbuspollSlave+3,f
  6556  0245  0850               	movf	??_ModbuspollSlave+3,w
  6557  0246  0022               	movlb	2	; select bank2
  6558  0247  00D1               	movwf	(_u32timeOut+3)^(0+256)
  6559  0248  0020               	movlb	0	; select bank0
  6560  0249  084F               	movf	??_ModbuspollSlave+2,w
  6561  024A  0022               	movlb	2	; select bank2
  6562  024B  00D0               	movwf	(_u32timeOut+2)^(0+256)
  6563  024C  0020               	movlb	0	; select bank0
  6564  024D  084E               	movf	??_ModbuspollSlave+1,w
  6565  024E  0022               	movlb	2	; select bank2
  6566  024F  00CF               	movwf	(_u32timeOut+1)^(0+256)
  6567  0250  0020               	movlb	0	; select bank0
  6568  0251  084D               	movf	??_ModbuspollSlave,w
  6569  0252  0022               	movlb	2	; select bank2
  6570  0253  00CE               	movwf	_u32timeOut^(0+256)
  6571                           
  6572                           ;modbusMS.c: 361: u8lastError = 0;
  6573  0254  0021               	movlb	1	; select bank1
  6574  0255  01DC               	clrf	_u8lastError^(0+128)
  6575                           
  6576                           ;modbusMS.c: 364: switch( au8Buffer[ FUNC ] )
  6577  0256  2A93               	goto	l4980
  6578  0257                     l4942:	
  6579                           ;modbusMS.c: 365: {
  6580                           ;modbusMS.c: 366: case MB_FC_READ_COILS:
  6581                           
  6582                           
  6583                           ;modbusMS.c: 367: case MB_FC_READ_DISCRETE_INPUT:
  6584                           ;modbusMS.c: 368: return process_FC1( regs, u8size );
  6585                           ;	Return value of _ModbuspollSlave is never used
  6586  0257  0020               	movlb	0	; select bank0
  6587  0258  084C               	movf	ModbuspollSlave@u8size,w
  6588  0259  00CD               	movwf	??_ModbuspollSlave
  6589  025A  084D               	movf	??_ModbuspollSlave,w
  6590  025B  00B9               	movwf	process_FC1@u8size
  6591  025C  0022               	movlb	2	; select bank2
  6592  025D  0861               	movf	ModbuspollSlave@regs^(0+256),w
  6593  025E  3182  22AF         	fcall	_process_FC1
  6594                           
  6595                           ;modbusMS.c: 369: break;
  6596  0260  0008               	return
  6597  0261                     l4948:	
  6598                           ;modbusMS.c: 370: case MB_FC_READ_INPUT_REGISTER:
  6599                           
  6600                           
  6601                           ;modbusMS.c: 371: case MB_FC_READ_REGISTERS :
  6602                           ;modbusMS.c: 372: return process_FC3( regs, u8size );
  6603                           ;	Return value of _ModbuspollSlave is never used
  6604  0261  0020               	movlb	0	; select bank0
  6605  0262  084C               	movf	ModbuspollSlave@u8size,w
  6606  0263  00CD               	movwf	??_ModbuspollSlave
  6607  0264  084D               	movf	??_ModbuspollSlave,w
  6608  0265  00B9               	movwf	process_FC3@u8size
  6609  0266  0022               	movlb	2	; select bank2
  6610  0267  0861               	movf	ModbuspollSlave@regs^(0+256),w
  6611  0268  3186  2677         	fcall	_process_FC3
  6612                           
  6613                           ;modbusMS.c: 373: break;
  6614  026A  0008               	return
  6615  026B                     l4954:	
  6616                           ;modbusMS.c: 374: case MB_FC_WRITE_COIL:
  6617                           
  6618                           
  6619                           ;modbusMS.c: 375: return process_FC5( regs, u8size );
  6620                           ;	Return value of _ModbuspollSlave is never used
  6621  026B  0020               	movlb	0	; select bank0
  6622  026C  084C               	movf	ModbuspollSlave@u8size,w
  6623  026D  00CD               	movwf	??_ModbuspollSlave
  6624  026E  084D               	movf	??_ModbuspollSlave,w
  6625  026F  00B9               	movwf	process_FC5@u8size
  6626  0270  0022               	movlb	2	; select bank2
  6627  0271  0861               	movf	ModbuspollSlave@regs^(0+256),w
  6628  0272  318F  279B         	fcall	_process_FC5
  6629                           
  6630                           ;modbusMS.c: 376: break;
  6631  0274  0008               	return
  6632  0275                     l4960:	
  6633                           ;modbusMS.c: 377: case MB_FC_WRITE_REGISTER :
  6634                           
  6635                           
  6636                           ;modbusMS.c: 378: return process_FC6( regs, u8size );
  6637                           ;	Return value of _ModbuspollSlave is never used
  6638  0275  0020               	movlb	0	; select bank0
  6639  0276  084C               	movf	ModbuspollSlave@u8size,w
  6640  0277  00CD               	movwf	??_ModbuspollSlave
  6641  0278  084D               	movf	??_ModbuspollSlave,w
  6642  0279  00B9               	movwf	process_FC6@u8size
  6643  027A  0022               	movlb	2	; select bank2
  6644  027B  0861               	movf	ModbuspollSlave@regs^(0+256),w
  6645  027C  318D  25A7         	fcall	_process_FC6
  6646                           
  6647                           ;modbusMS.c: 379: break;
  6648  027E  0008               	return
  6649  027F                     l4966:	
  6650                           ;modbusMS.c: 380: case MB_FC_WRITE_MULTIPLE_COILS:
  6651                           
  6652                           
  6653                           ;modbusMS.c: 381: return process_FC15( regs, u8size );
  6654                           ;	Return value of _ModbuspollSlave is never used
  6655  027F  0020               	movlb	0	; select bank0
  6656  0280  084C               	movf	ModbuspollSlave@u8size,w
  6657  0281  00CD               	movwf	??_ModbuspollSlave
  6658  0282  084D               	movf	??_ModbuspollSlave,w
  6659  0283  00B9               	movwf	process_FC15@u8size
  6660  0284  0022               	movlb	2	; select bank2
  6661  0285  0861               	movf	ModbuspollSlave@regs^(0+256),w
  6662  0286  3184  2438         	fcall	_process_FC15
  6663                           
  6664                           ;modbusMS.c: 382: break;
  6665  0288  0008               	return
  6666  0289                     l4972:	
  6667                           ;modbusMS.c: 383: case MB_FC_WRITE_MULTIPLE_REGISTERS :
  6668                           
  6669                           
  6670                           ;modbusMS.c: 384: return process_FC16( regs, u8size );
  6671                           ;	Return value of _ModbuspollSlave is never used
  6672  0289  0020               	movlb	0	; select bank0
  6673  028A  084C               	movf	ModbuspollSlave@u8size,w
  6674  028B  00CD               	movwf	??_ModbuspollSlave
  6675  028C  084D               	movf	??_ModbuspollSlave,w
  6676  028D  00B9               	movwf	process_FC16@u8size
  6677  028E  0022               	movlb	2	; select bank2
  6678  028F  0861               	movf	ModbuspollSlave@regs^(0+256),w
  6679  0290  318E  2686         	fcall	_process_FC16
  6680                           
  6681                           ;modbusMS.c: 388: }
  6682                           
  6683                           ;modbusMS.c: 387: break;
  6684                           
  6685                           ;modbusMS.c: 386: default:
  6686                           
  6687                           ;modbusMS.c: 385: break;
  6688  0292  0008               	return
  6689  0293                     l4980:	
  6690  0293  0021               	movlb	1	; select bank1
  6691  0294  0821               	movf	(_au8Buffer^(0+128)+1),w
  6692                           
  6693                           ; Switch size 1, requested type "space"
  6694                           ; Number of cases is 8, Range of values is 1 to 16
  6695                           ; switch strategies available:
  6696                           ; Name         Instructions Cycles
  6697                           ; simple_byte           25    13 (average)
  6698                           ; direct_byte           41     9 (fixed)
  6699                           ; jumptable            263     9 (fixed)
  6700                           ;	Chosen strategy is simple_byte
  6701  0295  3A01               	xorlw	1	; case 1
  6702  0296  1903               	skipnz
  6703  0297  2A57               	goto	l4942
  6704  0298  3A03               	xorlw	3	; case 2
  6705  0299  1903               	skipnz
  6706  029A  2A57               	goto	l4942
  6707  029B  3A01               	xorlw	1	; case 3
  6708  029C  1903               	skipnz
  6709  029D  2A61               	goto	l4948
  6710  029E  3A07               	xorlw	7	; case 4
  6711  029F  1903               	skipnz
  6712  02A0  2A61               	goto	l4948
  6713  02A1  3A01               	xorlw	1	; case 5
  6714  02A2  1903               	skipnz
  6715  02A3  2A6B               	goto	l4954
  6716  02A4  3A03               	xorlw	3	; case 6
  6717  02A5  1903               	skipnz
  6718  02A6  2A75               	goto	l4960
  6719  02A7  3A09               	xorlw	9	; case 15
  6720  02A8  1903               	skipnz
  6721  02A9  2A7F               	goto	l4966
  6722  02AA  3A1F               	xorlw	31	; case 16
  6723  02AB  1903               	skipnz
  6724  02AC  2A89               	goto	l4972
  6725  02AD  2AAE               	goto	l800
  6726  02AE                     l800:	
  6727                           ;modbusMS.c: 389: return i8state;
  6728                           ;	Return value of _ModbuspollSlave is never used
  6729                           
  6730  02AE  0008               	return
  6731  02AF                     __end_of_ModbuspollSlave:	
  6732                           
  6733                           	psect	text17
  6734  0090                     __ptext17:	
  6735 ;; *************** function _validateRequest *****************
  6736 ;; Defined at:
  6737 ;;		line 535 in file "modbusMS.c"
  6738 ;; Parameters:    Size  Location     Type
  6739 ;;		None
  6740 ;; Auto vars:     Size  Location     Type
  6741 ;;  i               1   26[BANK0 ] unsigned char 
  6742 ;;  u16regs         2   28[BANK0 ] unsigned int 
  6743 ;;  u16MsgCRC       2   23[BANK0 ] unsigned int 
  6744 ;;  u8regs          1   27[BANK0 ] unsigned char 
  6745 ;;  isSupported     1   25[BANK0 ] unsigned char 
  6746 ;; Return value:  Size  Location     Type
  6747 ;;                  1    wreg      unsigned char 
  6748 ;; Registers used:
  6749 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  6750 ;; Tracked objects:
  6751 ;;		On entry : 0/0
  6752 ;;		On exit  : 0/0
  6753 ;;		Unchanged: 0/0
  6754 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  6755 ;;      Params:         0       0       0       0       0       0       0       0
  6756 ;;      Locals:         0       7       0       0       0       0       0       0
  6757 ;;      Temps:          0       5       0       0       0       0       0       0
  6758 ;;      Totals:         0      12       0       0       0       0       0       0
  6759 ;;Total ram usage:       12 bytes
  6760 ;; Hardware stack levels used:    1
  6761 ;; Hardware stack levels required when called:    7
  6762 ;; This function calls:
  6763 ;;		_calcCRC
  6764 ;;		_wordConvert
  6765 ;; This function is called by:
  6766 ;;		_ModbuspollSlave
  6767 ;; This function uses a non-reentrant model
  6768 ;;
  6769                           
  6770                           
  6771                           ;psect for function _validateRequest
  6772  0090                     _validateRequest:	
  6773                           
  6774                           ;modbusMS.c: 538: unsigned int u16MsgCRC =
  6775                           ;modbusMS.c: 539: ((au8Buffer[u8BufferSize - 2] << 8)
  6776                           ;modbusMS.c: 540: | au8Buffer[u8BufferSize - 1]);
  6777                           
  6778                           ;incstack = 0
  6779                           ; Regs used in _validateRequest: [wreg-fsr1h+status,2+status,0+pclath+cstack]
  6780  0090  0020               	movlb	0	; select bank0
  6781  0091  085E               	movf	_u8BufferSize,w
  6782  0092  3EFF               	addlw	255
  6783  0093  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
  6784  0094  0086               	movwf	6
  6785  0095  0187               	clrf	7
  6786  0096  0801               	movf	1,w
  6787  0097  00B2               	movwf	??_validateRequest
  6788  0098  01B3               	clrf	??_validateRequest+1
  6789  0099  085E               	movf	_u8BufferSize,w
  6790  009A  3EFE               	addlw	254
  6791  009B  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
  6792  009C  0086               	movwf	6
  6793  009D  0187               	clrf	7
  6794  009E  0801               	movf	1,w
  6795  009F  00B4               	movwf	??_validateRequest+2
  6796  00A0  01B5               	clrf	??_validateRequest+3
  6797  00A1  0834               	movf	??_validateRequest+2,w
  6798  00A2  00B5               	movwf	??_validateRequest+3
  6799  00A3  01B4               	clrf	??_validateRequest+2
  6800  00A4  0832               	movf	??_validateRequest,w
  6801  00A5  0434               	iorwf	??_validateRequest+2,w
  6802  00A6  00B7               	movwf	validateRequest@u16MsgCRC
  6803  00A7  0833               	movf	??_validateRequest+1,w
  6804  00A8  0435               	iorwf	??_validateRequest+3,w
  6805  00A9  00B8               	movwf	validateRequest@u16MsgCRC+1
  6806                           
  6807                           ;modbusMS.c: 541: if ( calcCRC( u8BufferSize-2 ) != u16MsgCRC )
  6808  00AA  085E               	movf	_u8BufferSize,w
  6809  00AB  3EFE               	addlw	254
  6810  00AC  318E  2633  3180   	fcall	_calcCRC
  6811  00AF  0020               	movlb	0	; select bank0
  6812  00B0  0838               	movf	validateRequest@u16MsgCRC+1,w
  6813  00B1  0626               	xorwf	?_calcCRC+1,w
  6814  00B2  1D03               	skipz
  6815  00B3  28B6               	goto	u3895
  6816  00B4  0837               	movf	validateRequest@u16MsgCRC,w
  6817  00B5  0625               	xorwf	?_calcCRC,w
  6818  00B6                     u3895:	
  6819  00B6  1903               	skipnz
  6820  00B7  28BF               	goto	l4634
  6821                           
  6822                           ;modbusMS.c: 542: {
  6823                           ;modbusMS.c: 543: u16errCnt ++;
  6824  00B8  3001               	movlw	1
  6825  00B9  0022               	movlb	2	; select bank2
  6826  00BA  07D6               	addwf	_u16errCnt^(0+256),f
  6827  00BB  3000               	movlw	0
  6828  00BC  3DD7               	addwfc	(_u16errCnt+1)^(0+256),f
  6829                           
  6830                           ;modbusMS.c: 544: return NO_REPLY;
  6831  00BD  30FF               	movlw	255
  6832  00BE  0008               	return
  6833  00BF                     l4634:	
  6834                           
  6835                           ;modbusMS.c: 545: }
  6836                           ;modbusMS.c: 548: bool isSupported = 0;
  6837  00BF  0020               	movlb	0	; select bank0
  6838  00C0  01B9               	clrf	validateRequest@isSupported
  6839                           
  6840                           ;modbusMS.c: 549: for (unsigned char i = 0; i< sizeof( fctsupported ); i++)
  6841  00C1  01BA               	clrf	validateRequest@i
  6842  00C2  3008               	movlw	8
  6843  00C3  023A               	subwf	validateRequest@i,w
  6844  00C4  1803               	btfsc	3,0
  6845  00C5  28DF               	goto	l4648
  6846  00C6                     l4640:	
  6847                           
  6848                           ;modbusMS.c: 550: {
  6849                           ;modbusMS.c: 551: if (fctsupported[i] == au8Buffer[FUNC])
  6850  00C6  083A               	movf	validateRequest@i,w
  6851  00C7  3EFD               	addlw	low (_fctsupported| (0+32768))
  6852  00C8  0084               	movwf	4
  6853  00C9  3087               	movlw	high (_fctsupported| (0+32768))
  6854  00CA  1803               	skipnc
  6855  00CB  3E01               	addlw	1
  6856  00CC  0085               	movwf	5
  6857  00CD  0800               	movf	0,w	;code access
  6858  00CE  0021               	movlb	1	; select bank1
  6859  00CF  0621               	xorwf	(_au8Buffer^(0+128)+1),w
  6860  00D0  1D03               	skipz
  6861  00D1  28D6               	goto	l4644
  6862                           
  6863                           ;modbusMS.c: 552: {
  6864                           ;modbusMS.c: 553: isSupported = 1;
  6865  00D2  0020               	movlb	0	; select bank0
  6866  00D3  01B9               	clrf	validateRequest@isSupported
  6867  00D4  0AB9               	incf	validateRequest@isSupported,f
  6868                           
  6869                           ;modbusMS.c: 554: break;
  6870  00D5  28DF               	goto	l4648
  6871  00D6                     l4644:	
  6872  00D6  3001               	movlw	1
  6873  00D7  0020               	movlb	0	; select bank0
  6874  00D8  00B2               	movwf	??_validateRequest
  6875  00D9  0832               	movf	??_validateRequest,w
  6876  00DA  07BA               	addwf	validateRequest@i,f
  6877  00DB  3008               	movlw	8
  6878  00DC  023A               	subwf	validateRequest@i,w
  6879  00DD  1C03               	skipc
  6880  00DE  28C6               	goto	l4640
  6881  00DF                     l4648:	
  6882                           
  6883                           ;modbusMS.c: 555: }
  6884                           ;modbusMS.c: 556: }
  6885                           ;modbusMS.c: 557: if (!isSupported)
  6886  00DF  0839               	movf	validateRequest@isSupported,w
  6887  00E0  1D03               	btfss	3,2
  6888  00E1  28E9               	goto	l4654
  6889                           
  6890                           ;modbusMS.c: 558: {
  6891                           ;modbusMS.c: 559: u16errCnt ++;
  6892  00E2  3001               	movlw	1
  6893  00E3  0022               	movlb	2	; select bank2
  6894  00E4  07D6               	addwf	_u16errCnt^(0+256),f
  6895  00E5  3000               	movlw	0
  6896  00E6  3DD7               	addwfc	(_u16errCnt+1)^(0+256),f
  6897                           
  6898                           ;modbusMS.c: 560: return EXC_FUNC_CODE;
  6899  00E7  3001               	movlw	1
  6900  00E8  0008               	return
  6901  00E9                     l4654:	
  6902                           
  6903                           ;modbusMS.c: 561: }
  6904                           ;modbusMS.c: 564: unsigned int u16regs = 0;
  6905  00E9  0020               	movlb	0	; select bank0
  6906  00EA  01BC               	clrf	validateRequest@u16regs
  6907  00EB  01BD               	clrf	validateRequest@u16regs+1
  6908                           
  6909                           ;modbusMS.c: 565: unsigned char u8regs;
  6910                           ;modbusMS.c: 566: switch ( au8Buffer[ FUNC ] )
  6911  00EC  2988               	goto	l4698
  6912  00ED                     l4656:	
  6913                           ;modbusMS.c: 567: {
  6914                           ;modbusMS.c: 568: case MB_FC_READ_COILS:
  6915                           
  6916                           
  6917                           ;modbusMS.c: 569: case MB_FC_READ_DISCRETE_INPUT:
  6918                           ;modbusMS.c: 570: case MB_FC_WRITE_MULTIPLE_COILS:
  6919                           ;modbusMS.c: 571: u16regs = wordConvert( au8Buffer[ ADD_HI ], au8Buffer[ ADD_LO ]) / 16;
  6920  00ED  0021               	movlb	1	; select bank1
  6921  00EE  0823               	movf	(_au8Buffer^(0+128)+3),w
  6922  00EF  0020               	movlb	0	; select bank0
  6923  00F0  00B2               	movwf	??_validateRequest
  6924  00F1  0832               	movf	??_validateRequest,w
  6925  00F2  00A5               	movwf	wordConvert@lByte
  6926  00F3  0021               	movlb	1	; select bank1
  6927  00F4  0822               	movf	(_au8Buffer^(0+128)+2),w
  6928  00F5  318B  2396  3180   	fcall	_wordConvert
  6929  00F8  0020               	movlb	0	; select bank0
  6930  00F9  0E25               	swapf	?_wordConvert,w
  6931  00FA  390F               	andlw	15
  6932  00FB  00BC               	movwf	validateRequest@u16regs
  6933  00FC  0E26               	swapf	?_wordConvert+1,w
  6934  00FD  39F0               	andlw	240
  6935  00FE  04BC               	iorwf	validateRequest@u16regs,f
  6936  00FF  0E26               	swapf	?_wordConvert+1,w
  6937  0100  390F               	andlw	15
  6938  0101  00BD               	movwf	validateRequest@u16regs+1
  6939                           
  6940                           ;modbusMS.c: 572: u16regs += wordConvert( au8Buffer[ NB_HI ], au8Buffer[ NB_LO ]) /16;
  6941  0102  0021               	movlb	1	; select bank1
  6942  0103  0825               	movf	(_au8Buffer^(0+128)+5),w
  6943  0104  0020               	movlb	0	; select bank0
  6944  0105  00B2               	movwf	??_validateRequest
  6945  0106  0832               	movf	??_validateRequest,w
  6946  0107  00A5               	movwf	wordConvert@lByte
  6947  0108  0021               	movlb	1	; select bank1
  6948  0109  0824               	movf	(_au8Buffer^(0+128)+4),w
  6949  010A  318B  2396  3180   	fcall	_wordConvert
  6950  010D  0020               	movlb	0	; select bank0
  6951  010E  0825               	movf	?_wordConvert,w
  6952  010F  00B3               	movwf	??_validateRequest+1
  6953  0110  0826               	movf	?_wordConvert+1,w
  6954  0111  00B4               	movwf	??_validateRequest+2
  6955  0112  3004               	movlw	4
  6956  0113                     u3945:	
  6957  0113  36B4               	lsrf	??_validateRequest+2,f
  6958  0114  0CB3               	rrf	??_validateRequest+1,f
  6959  0115  0B89               	decfsz	9,f
  6960  0116  2913               	goto	u3945
  6961  0117  0833               	movf	??_validateRequest+1,w
  6962  0118  07BC               	addwf	validateRequest@u16regs,f
  6963  0119  0834               	movf	??_validateRequest+2,w
  6964  011A  3DBD               	addwfc	validateRequest@u16regs+1,f
  6965                           
  6966                           ;modbusMS.c: 573: u8regs = (unsigned char) u16regs;
  6967  011B  083C               	movf	validateRequest@u16regs,w
  6968  011C  00B2               	movwf	??_validateRequest
  6969  011D  0832               	movf	??_validateRequest,w
  6970  011E  00BB               	movwf	validateRequest@u8regs
  6971                           
  6972                           ;modbusMS.c: 574: if (u8regs > u8regsize) return EXC_ADDR_RANGE;
  6973  011F  083B               	movf	validateRequest@u8regs,w
  6974  0120  025B               	subwf	_u8regsize,w
  6975  0121  1803               	skipnc
  6976  0122  29A3               	goto	l4700
  6977  0123  3002               	movlw	2
  6978  0124  0008               	return
  6979  0125                     l4666:	
  6980                           ;modbusMS.c: 576: case MB_FC_WRITE_COIL:
  6981                           
  6982                           ;modbusMS.c: 575: break;
  6983                           
  6984                           
  6985                           ;modbusMS.c: 577: u16regs = wordConvert( au8Buffer[ ADD_HI ], au8Buffer[ ADD_LO ]) / 16;
  6986  0125  0021               	movlb	1	; select bank1
  6987  0126  0823               	movf	(_au8Buffer^(0+128)+3),w
  6988  0127  0020               	movlb	0	; select bank0
  6989  0128  00B2               	movwf	??_validateRequest
  6990  0129  0832               	movf	??_validateRequest,w
  6991  012A  00A5               	movwf	wordConvert@lByte
  6992  012B  0021               	movlb	1	; select bank1
  6993  012C  0822               	movf	(_au8Buffer^(0+128)+2),w
  6994  012D  318B  2396  3180   	fcall	_wordConvert
  6995  0130  0020               	movlb	0	; select bank0
  6996  0131  0E25               	swapf	?_wordConvert,w
  6997  0132  390F               	andlw	15
  6998  0133  00BC               	movwf	validateRequest@u16regs
  6999  0134  0E26               	swapf	?_wordConvert+1,w
  7000  0135  39F0               	andlw	240
  7001  0136  04BC               	iorwf	validateRequest@u16regs,f
  7002  0137  0E26               	swapf	?_wordConvert+1,w
  7003  0138  390F               	andlw	15
  7004  0139  00BD               	movwf	validateRequest@u16regs+1
  7005                           
  7006                           ;modbusMS.c: 578: u8regs = (unsigned char) u16regs;
  7007  013A  083C               	movf	validateRequest@u16regs,w
  7008  013B  00B2               	movwf	??_validateRequest
  7009  013C  0832               	movf	??_validateRequest,w
  7010  013D  00BB               	movwf	validateRequest@u8regs
  7011                           
  7012                           ;modbusMS.c: 579: if (u8regs > u8regsize) return EXC_ADDR_RANGE;
  7013  013E  083B               	movf	validateRequest@u8regs,w
  7014  013F  025B               	subwf	_u8regsize,w
  7015  0140  1803               	skipnc
  7016  0141  29A3               	goto	l4700
  7017  0142  3002               	movlw	2
  7018  0143  0008               	return
  7019  0144                     l4676:	
  7020                           ;modbusMS.c: 581: case MB_FC_WRITE_REGISTER :
  7021                           
  7022                           ;modbusMS.c: 580: break;
  7023                           
  7024                           
  7025                           ;modbusMS.c: 582: u16regs = wordConvert( au8Buffer[ ADD_HI ], au8Buffer[ ADD_LO ]);
  7026  0144  0021               	movlb	1	; select bank1
  7027  0145  0823               	movf	(_au8Buffer^(0+128)+3),w
  7028  0146  0020               	movlb	0	; select bank0
  7029  0147  00B2               	movwf	??_validateRequest
  7030  0148  0832               	movf	??_validateRequest,w
  7031  0149  00A5               	movwf	wordConvert@lByte
  7032  014A  0021               	movlb	1	; select bank1
  7033  014B  0822               	movf	(_au8Buffer^(0+128)+2),w
  7034  014C  318B  2396  3180   	fcall	_wordConvert
  7035  014F  0020               	movlb	0	; select bank0
  7036  0150  0826               	movf	?_wordConvert+1,w
  7037  0151  00BD               	movwf	validateRequest@u16regs+1
  7038  0152  0825               	movf	?_wordConvert,w
  7039  0153  00BC               	movwf	validateRequest@u16regs
  7040                           
  7041                           ;modbusMS.c: 583: u8regs = (unsigned char) u16regs;
  7042  0154  083C               	movf	validateRequest@u16regs,w
  7043  0155  00B2               	movwf	??_validateRequest
  7044  0156  0832               	movf	??_validateRequest,w
  7045  0157  00BB               	movwf	validateRequest@u8regs
  7046                           
  7047                           ;modbusMS.c: 584: if (u8regs > u8regsize) return EXC_ADDR_RANGE;
  7048  0158  083B               	movf	validateRequest@u8regs,w
  7049  0159  025B               	subwf	_u8regsize,w
  7050  015A  1803               	skipnc
  7051  015B  29A3               	goto	l4700
  7052  015C  3002               	movlw	2
  7053  015D  0008               	return
  7054  015E                     l4686:	
  7055                           ;modbusMS.c: 586: case MB_FC_READ_REGISTERS :
  7056                           
  7057                           ;modbusMS.c: 585: break;
  7058                           
  7059                           
  7060                           ;modbusMS.c: 587: case MB_FC_READ_INPUT_REGISTER :
  7061                           ;modbusMS.c: 588: case MB_FC_WRITE_MULTIPLE_REGISTERS :
  7062                           ;modbusMS.c: 589: u16regs = wordConvert( au8Buffer[ ADD_HI ], au8Buffer[ ADD_LO ]);
  7063  015E  0021               	movlb	1	; select bank1
  7064  015F  0823               	movf	(_au8Buffer^(0+128)+3),w
  7065  0160  0020               	movlb	0	; select bank0
  7066  0161  00B2               	movwf	??_validateRequest
  7067  0162  0832               	movf	??_validateRequest,w
  7068  0163  00A5               	movwf	wordConvert@lByte
  7069  0164  0021               	movlb	1	; select bank1
  7070  0165  0822               	movf	(_au8Buffer^(0+128)+2),w
  7071  0166  318B  2396  3180   	fcall	_wordConvert
  7072  0169  0020               	movlb	0	; select bank0
  7073  016A  0826               	movf	?_wordConvert+1,w
  7074  016B  00BD               	movwf	validateRequest@u16regs+1
  7075  016C  0825               	movf	?_wordConvert,w
  7076  016D  00BC               	movwf	validateRequest@u16regs
  7077                           
  7078                           ;modbusMS.c: 590: u16regs += wordConvert( au8Buffer[ NB_HI ], au8Buffer[ NB_LO ]);
  7079  016E  0021               	movlb	1	; select bank1
  7080  016F  0825               	movf	(_au8Buffer^(0+128)+5),w
  7081  0170  0020               	movlb	0	; select bank0
  7082  0171  00B2               	movwf	??_validateRequest
  7083  0172  0832               	movf	??_validateRequest,w
  7084  0173  00A5               	movwf	wordConvert@lByte
  7085  0174  0021               	movlb	1	; select bank1
  7086  0175  0824               	movf	(_au8Buffer^(0+128)+4),w
  7087  0176  318B  2396  3180   	fcall	_wordConvert
  7088  0179  0020               	movlb	0	; select bank0
  7089  017A  0825               	movf	?_wordConvert,w
  7090  017B  07BC               	addwf	validateRequest@u16regs,f
  7091  017C  0826               	movf	?_wordConvert+1,w
  7092  017D  3DBD               	addwfc	validateRequest@u16regs+1,f
  7093                           
  7094                           ;modbusMS.c: 591: u8regs = (unsigned char) u16regs;
  7095  017E  083C               	movf	validateRequest@u16regs,w
  7096  017F  00B2               	movwf	??_validateRequest
  7097  0180  0832               	movf	??_validateRequest,w
  7098  0181  00BB               	movwf	validateRequest@u8regs
  7099                           
  7100                           ;modbusMS.c: 592: if (u8regs > u8regsize) return EXC_ADDR_RANGE;
  7101  0182  083B               	movf	validateRequest@u8regs,w
  7102  0183  025B               	subwf	_u8regsize,w
  7103  0184  1803               	skipnc
  7104  0185  29A3               	goto	l4700
  7105  0186  3002               	movlw	2
  7106  0187  0008               	return
  7107  0188                     l4698:	
  7108                           ;modbusMS.c: 594: }
  7109                           
  7110                           ;modbusMS.c: 593: break;
  7111                           
  7112  0188  0021               	movlb	1	; select bank1
  7113  0189  0821               	movf	(_au8Buffer^(0+128)+1),w
  7114                           
  7115                           ; Switch size 1, requested type "space"
  7116                           ; Number of cases is 8, Range of values is 1 to 16
  7117                           ; switch strategies available:
  7118                           ; Name         Instructions Cycles
  7119                           ; simple_byte           25    13 (average)
  7120                           ; direct_byte           41     9 (fixed)
  7121                           ; jumptable            263     9 (fixed)
  7122                           ;	Chosen strategy is simple_byte
  7123  018A  3A01               	xorlw	1	; case 1
  7124  018B  1903               	skipnz
  7125  018C  28ED               	goto	l4656
  7126  018D  3A03               	xorlw	3	; case 2
  7127  018E  1903               	skipnz
  7128  018F  28ED               	goto	l4656
  7129  0190  3A01               	xorlw	1	; case 3
  7130  0191  1903               	skipnz
  7131  0192  295E               	goto	l4686
  7132  0193  3A07               	xorlw	7	; case 4
  7133  0194  1903               	skipnz
  7134  0195  295E               	goto	l4686
  7135  0196  3A01               	xorlw	1	; case 5
  7136  0197  1903               	skipnz
  7137  0198  2925               	goto	l4666
  7138  0199  3A03               	xorlw	3	; case 6
  7139  019A  1903               	skipnz
  7140  019B  2944               	goto	l4676
  7141  019C  3A09               	xorlw	9	; case 15
  7142  019D  1903               	skipnz
  7143  019E  28ED               	goto	l4656
  7144  019F  3A1F               	xorlw	31	; case 16
  7145  01A0  1903               	skipnz
  7146  01A1  295E               	goto	l4686
  7147  01A2  29A3               	goto	l4700
  7148  01A3                     l4700:	
  7149                           
  7150                           ;modbusMS.c: 595: return 0;
  7151  01A3  3000               	movlw	0
  7152  01A4  0008               	return
  7153  01A5                     __end_of_validateRequest:	
  7154                           
  7155                           	psect	text18
  7156  0DA7                     __ptext18:	
  7157 ;; *************** function _process_FC6 *****************
  7158 ;; Defined at:
  7159 ;;		line 826 in file "modbusMS.c"
  7160 ;; Parameters:    Size  Location     Type
  7161 ;;  regs            1    wreg     PTR unsigned int 
  7162 ;;		 -> ModbusData(16), 
  7163 ;;  u8size          1   25[BANK0 ] unsigned char 
  7164 ;; Auto vars:     Size  Location     Type
  7165 ;;  regs            1   30[BANK0 ] PTR unsigned int 
  7166 ;;		 -> ModbusData(16), 
  7167 ;;  u16val          2   28[BANK0 ] unsigned int 
  7168 ;;  u8CopyBuffer    1   32[BANK0 ] unsigned char 
  7169 ;;  u8add           1   31[BANK0 ] unsigned char 
  7170 ;; Return value:  Size  Location     Type
  7171 ;;                  1    wreg      char 
  7172 ;; Registers used:
  7173 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7174 ;; Tracked objects:
  7175 ;;		On entry : 0/0
  7176 ;;		On exit  : 0/0
  7177 ;;		Unchanged: 0/0
  7178 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7179 ;;      Params:         0       1       0       0       0       0       0       0
  7180 ;;      Locals:         0       5       0       0       0       0       0       0
  7181 ;;      Temps:          0       2       0       0       0       0       0       0
  7182 ;;      Totals:         0       8       0       0       0       0       0       0
  7183 ;;Total ram usage:        8 bytes
  7184 ;; Hardware stack levels used:    1
  7185 ;; Hardware stack levels required when called:    9
  7186 ;; This function calls:
  7187 ;;		_sendTxBuffer
  7188 ;;		_wordConvert
  7189 ;; This function is called by:
  7190 ;;		_ModbuspollSlave
  7191 ;; This function uses a non-reentrant model
  7192 ;;
  7193                           
  7194                           
  7195                           ;psect for function _process_FC6
  7196  0DA7                     _process_FC6:	
  7197                           
  7198                           ;incstack = 0
  7199                           ; Regs used in _process_FC6: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7200                           ;process_FC6@regs stored from wreg
  7201  0DA7  0020               	movlb	0	; select bank0
  7202  0DA8  00BE               	movwf	process_FC6@regs
  7203                           
  7204                           ;modbusMS.c: 829: unsigned char u8add = wordConvert( au8Buffer[ ADD_HI ], au8Buffer[ ADD
      +                          _LO ] );
  7205  0DA9  0021               	movlb	1	; select bank1
  7206  0DAA  0823               	movf	(_au8Buffer^(0+128)+3),w
  7207  0DAB  0020               	movlb	0	; select bank0
  7208  0DAC  00BA               	movwf	??_process_FC6
  7209  0DAD  083A               	movf	??_process_FC6,w
  7210  0DAE  00A5               	movwf	wordConvert@lByte
  7211  0DAF  0021               	movlb	1	; select bank1
  7212  0DB0  0822               	movf	(_au8Buffer^(0+128)+2),w
  7213  0DB1  318B  2396  318D   	fcall	_wordConvert
  7214  0DB4  0020               	movlb	0	; select bank0
  7215  0DB5  0825               	movf	?_wordConvert,w
  7216  0DB6  00BB               	movwf	??_process_FC6+1
  7217  0DB7  083B               	movf	??_process_FC6+1,w
  7218  0DB8  00BF               	movwf	process_FC6@u8add
  7219                           
  7220                           ;modbusMS.c: 830: unsigned char u8CopyBufferSize;
  7221                           ;modbusMS.c: 831: unsigned int u16val = wordConvert( au8Buffer[ NB_HI ], au8Buffer[ NB_L
      +                          O ] );
  7222  0DB9  0021               	movlb	1	; select bank1
  7223  0DBA  0825               	movf	(_au8Buffer^(0+128)+5),w
  7224  0DBB  0020               	movlb	0	; select bank0
  7225  0DBC  00BA               	movwf	??_process_FC6
  7226  0DBD  083A               	movf	??_process_FC6,w
  7227  0DBE  00A5               	movwf	wordConvert@lByte
  7228  0DBF  0021               	movlb	1	; select bank1
  7229  0DC0  0824               	movf	(_au8Buffer^(0+128)+4),w
  7230  0DC1  318B  2396  318D   	fcall	_wordConvert
  7231  0DC4  0020               	movlb	0	; select bank0
  7232  0DC5  0826               	movf	?_wordConvert+1,w
  7233  0DC6  00BD               	movwf	process_FC6@u16val+1
  7234  0DC7  0825               	movf	?_wordConvert,w
  7235  0DC8  00BC               	movwf	process_FC6@u16val
  7236                           
  7237                           ;modbusMS.c: 833: *(regs +u8add) = u16val;
  7238  0DC9  353F               	lslf	process_FC6@u8add,w
  7239  0DCA  073E               	addwf	process_FC6@regs,w
  7240  0DCB  00BA               	movwf	??_process_FC6
  7241  0DCC  083A               	movf	??_process_FC6,w
  7242  0DCD  0086               	movwf	6
  7243  0DCE  0187               	clrf	7
  7244  0DCF  083C               	movf	process_FC6@u16val,w
  7245  0DD0  3FC0               	movwi [0]fsr1
  7246  0DD1  083D               	movf	process_FC6@u16val+1,w
  7247  0DD2  3FC1               	movwi [1]fsr1
  7248                           
  7249                           ;modbusMS.c: 836: u8BufferSize = RESPONSE_SIZE;
  7250  0DD3  3006               	movlw	6
  7251  0DD4  00BA               	movwf	??_process_FC6
  7252  0DD5  083A               	movf	??_process_FC6,w
  7253  0DD6  00DE               	movwf	_u8BufferSize
  7254                           
  7255                           ;modbusMS.c: 838: u8CopyBufferSize = u8BufferSize +2;
  7256  0DD7  085E               	movf	_u8BufferSize,w
  7257  0DD8  3E02               	addlw	2
  7258  0DD9  00BA               	movwf	??_process_FC6
  7259  0DDA  083A               	movf	??_process_FC6,w
  7260  0DDB  00C0               	movwf	process_FC6@u8CopyBufferSize
  7261                           
  7262                           ;modbusMS.c: 839: sendTxBuffer();
  7263  0DDC  3185  2577         	fcall	_sendTxBuffer
  7264                           
  7265                           ;modbusMS.c: 841: return u8CopyBufferSize;
  7266  0DDE  0020               	movlb	0	; select bank0
  7267  0DDF  0840               	movf	process_FC6@u8CopyBufferSize,w
  7268  0DE0  0008               	return
  7269  0DE1                     __end_of_process_FC6:	
  7270                           
  7271                           	psect	text19
  7272  0F9B                     __ptext19:	
  7273 ;; *************** function _process_FC5 *****************
  7274 ;; Defined at:
  7275 ;;		line 793 in file "modbusMS.c"
  7276 ;; Parameters:    Size  Location     Type
  7277 ;;  regs            1    wreg     PTR unsigned int 
  7278 ;;		 -> ModbusData(16), 
  7279 ;;  u8size          1   25[BANK0 ] unsigned char 
  7280 ;; Auto vars:     Size  Location     Type
  7281 ;;  regs            1   32[BANK0 ] PTR unsigned int 
  7282 ;;		 -> ModbusData(16), 
  7283 ;;  u16coil         2   30[BANK0 ] unsigned int 
  7284 ;;  u8currentBit    1   34[BANK0 ] unsigned char 
  7285 ;;  u8currentReg    1   33[BANK0 ] unsigned char 
  7286 ;;  u8CopyBuffer    1   29[BANK0 ] unsigned char 
  7287 ;; Return value:  Size  Location     Type
  7288 ;;                  1    wreg      char 
  7289 ;; Registers used:
  7290 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7291 ;; Tracked objects:
  7292 ;;		On entry : 0/0
  7293 ;;		On exit  : 0/0
  7294 ;;		Unchanged: 0/0
  7295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7296 ;;      Params:         0       1       0       0       0       0       0       0
  7297 ;;      Locals:         0       6       0       0       0       0       0       0
  7298 ;;      Temps:          0       3       0       0       0       0       0       0
  7299 ;;      Totals:         0      10       0       0       0       0       0       0
  7300 ;;Total ram usage:       10 bytes
  7301 ;; Hardware stack levels used:    1
  7302 ;; Hardware stack levels required when called:    9
  7303 ;; This function calls:
  7304 ;;		_sendTxBuffer
  7305 ;;		_wordConvert
  7306 ;; This function is called by:
  7307 ;;		_ModbuspollSlave
  7308 ;; This function uses a non-reentrant model
  7309 ;;
  7310                           
  7311                           
  7312                           ;psect for function _process_FC5
  7313  0F9B                     _process_FC5:	
  7314                           
  7315                           ;incstack = 0
  7316                           ; Regs used in _process_FC5: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7317                           ;process_FC5@regs stored from wreg
  7318  0F9B  0020               	movlb	0	; select bank0
  7319  0F9C  00C0               	movwf	process_FC5@regs
  7320                           
  7321                           ;modbusMS.c: 795: unsigned char u8currentRegister, u8currentBit;
  7322                           ;modbusMS.c: 796: unsigned char u8CopyBufferSize;
  7323                           ;modbusMS.c: 797: unsigned int u16coil = wordConvert( au8Buffer[ ADD_HI ], au8Buffer[ AD
      +                          D_LO ] );
  7324  0F9D  0021               	movlb	1	; select bank1
  7325  0F9E  0823               	movf	(_au8Buffer^(0+128)+3),w
  7326  0F9F  0020               	movlb	0	; select bank0
  7327  0FA0  00BA               	movwf	??_process_FC5
  7328  0FA1  083A               	movf	??_process_FC5,w
  7329  0FA2  00A5               	movwf	wordConvert@lByte
  7330  0FA3  0021               	movlb	1	; select bank1
  7331  0FA4  0822               	movf	(_au8Buffer^(0+128)+2),w
  7332  0FA5  318B  2396  318F   	fcall	_wordConvert
  7333  0FA8  0020               	movlb	0	; select bank0
  7334  0FA9  0826               	movf	?_wordConvert+1,w
  7335  0FAA  00BF               	movwf	process_FC5@u16coil+1
  7336  0FAB  0825               	movf	?_wordConvert,w
  7337  0FAC  00BE               	movwf	process_FC5@u16coil
  7338                           
  7339                           ;modbusMS.c: 800: u8currentRegister = (unsigned char) (u16coil / 16);
  7340  0FAD  083F               	movf	process_FC5@u16coil+1,w
  7341  0FAE  00BB               	movwf	??_process_FC5+1
  7342  0FAF  083E               	movf	process_FC5@u16coil,w
  7343  0FB0  00BA               	movwf	??_process_FC5
  7344  0FB1  3004               	movlw	4
  7345  0FB2                     u4095:	
  7346  0FB2  36BB               	lsrf	??_process_FC5+1,f
  7347  0FB3  0CBA               	rrf	??_process_FC5,f
  7348  0FB4  0B89               	decfsz	9,f
  7349  0FB5  2FB2               	goto	u4095
  7350  0FB6  083A               	movf	??_process_FC5,w
  7351  0FB7  00BC               	movwf	??_process_FC5+2
  7352  0FB8  083C               	movf	??_process_FC5+2,w
  7353  0FB9  00C1               	movwf	process_FC5@u8currentRegister
  7354                           
  7355                           ;modbusMS.c: 801: u8currentBit = (unsigned char) (u16coil % 16);
  7356  0FBA  083E               	movf	process_FC5@u16coil,w
  7357  0FBB  390F               	andlw	15
  7358  0FBC  00BA               	movwf	??_process_FC5
  7359  0FBD  083A               	movf	??_process_FC5,w
  7360  0FBE  00C2               	movwf	process_FC5@u8currentBit
  7361                           
  7362                           ;modbusMS.c: 804: (au8Buffer[ NB_HI ] == 0xff ? ((regs[ u8currentRegister ]) |= (1UL << 
      +                          (u8currentBit))) : ((regs[ u8currentRegister ]) &= ~(1UL << (u8currentBit))));
  7363  0FBF  0021               	movlb	1	; select bank1
  7364  0FC0  0A24               	incf	(_au8Buffer^(0+128)+4),w
  7365  0FC1  1D03               	btfss	3,2
  7366  0FC2  2FDA               	goto	l4798
  7367  0FC3  3001               	movlw	1
  7368  0FC4  0020               	movlb	0	; select bank0
  7369  0FC5  00BA               	movwf	??_process_FC5
  7370  0FC6  3000               	movlw	0
  7371  0FC7  00BB               	movwf	??_process_FC5+1
  7372  0FC8  0A42               	incf	process_FC5@u8currentBit,w
  7373  0FC9  2FCC               	goto	u4114
  7374  0FCA                     u4115:	
  7375  0FCA  35BA               	lslf	??_process_FC5,f
  7376  0FCB  0DBB               	rlf	??_process_FC5+1,f
  7377  0FCC                     u4114:	
  7378  0FCC  0B89               	decfsz	9,f
  7379  0FCD  2FCA               	goto	u4115
  7380  0FCE  3541               	lslf	process_FC5@u8currentRegister,w
  7381  0FCF  0740               	addwf	process_FC5@regs,w
  7382  0FD0  00BC               	movwf	??_process_FC5+2
  7383  0FD1  083C               	movf	??_process_FC5+2,w
  7384  0FD2  0086               	movwf	6
  7385  0FD3  0187               	clrf	7
  7386  0FD4  083A               	movf	??_process_FC5,w
  7387  0FD5  0481               	iorwf	1,f
  7388  0FD6  3141               	addfsr 1,1
  7389  0FD7  083B               	movf	??_process_FC5+1,w
  7390  0FD8  0481               	iorwf	1,f
  7391  0FD9  2FF2               	goto	l4800
  7392  0FDA                     l4798:	
  7393  0FDA  3001               	movlw	1
  7394  0FDB  0020               	movlb	0	; select bank0
  7395  0FDC  00BA               	movwf	??_process_FC5
  7396  0FDD  3000               	movlw	0
  7397  0FDE  00BB               	movwf	??_process_FC5+1
  7398  0FDF  0A42               	incf	process_FC5@u8currentBit,w
  7399  0FE0  2FE3               	goto	u4124
  7400  0FE1                     u4125:	
  7401  0FE1  35BA               	lslf	??_process_FC5,f
  7402  0FE2  0DBB               	rlf	??_process_FC5+1,f
  7403  0FE3                     u4124:	
  7404  0FE3  0B89               	decfsz	9,f
  7405  0FE4  2FE1               	goto	u4125
  7406  0FE5  09BA               	comf	??_process_FC5,f
  7407  0FE6  09BB               	comf	??_process_FC5+1,f
  7408  0FE7  3541               	lslf	process_FC5@u8currentRegister,w
  7409  0FE8  0740               	addwf	process_FC5@regs,w
  7410  0FE9  00BC               	movwf	??_process_FC5+2
  7411  0FEA  083C               	movf	??_process_FC5+2,w
  7412  0FEB  0086               	movwf	6
  7413  0FEC  0187               	clrf	7
  7414  0FED  083A               	movf	??_process_FC5,w
  7415  0FEE  0581               	andwf	1,f
  7416  0FEF  3141               	addfsr 1,1
  7417  0FF0  083B               	movf	??_process_FC5+1,w
  7418  0FF1  0581               	andwf	1,f
  7419  0FF2                     l4800:	
  7420                           
  7421                           ;modbusMS.c: 811: u8BufferSize = 6;
  7422  0FF2  3006               	movlw	6
  7423  0FF3  00BA               	movwf	??_process_FC5
  7424  0FF4  083A               	movf	??_process_FC5,w
  7425  0FF5  00DE               	movwf	_u8BufferSize
  7426                           
  7427                           ;modbusMS.c: 812: u8CopyBufferSize = u8BufferSize +2;
  7428  0FF6  085E               	movf	_u8BufferSize,w
  7429  0FF7  3E02               	addlw	2
  7430  0FF8  00BA               	movwf	??_process_FC5
  7431  0FF9  083A               	movf	??_process_FC5,w
  7432  0FFA  00BD               	movwf	process_FC5@u8CopyBufferSize
  7433                           
  7434                           ;modbusMS.c: 813: sendTxBuffer();
  7435  0FFB  3185  2577         	fcall	_sendTxBuffer
  7436                           
  7437                           ;modbusMS.c: 815: return u8CopyBufferSize;
  7438  0FFD  0020               	movlb	0	; select bank0
  7439  0FFE  083D               	movf	process_FC5@u8CopyBufferSize,w
  7440  0FFF  0008               	return
  7441  1000                     __end_of_process_FC5:	
  7442                           
  7443                           	psect	text20
  7444  0677                     __ptext20:	
  7445 ;; *************** function _process_FC3 *****************
  7446 ;; Defined at:
  7447 ;;		line 761 in file "modbusMS.c"
  7448 ;; Parameters:    Size  Location     Type
  7449 ;;  regs            1    wreg     PTR unsigned int 
  7450 ;;		 -> ModbusData(16), 
  7451 ;;  u8size          1   25[BANK0 ] unsigned char 
  7452 ;; Auto vars:     Size  Location     Type
  7453 ;;  regs            1   31[BANK0 ] PTR unsigned int 
  7454 ;;		 -> ModbusData(16), 
  7455 ;;  i               1   34[BANK0 ] unsigned char 
  7456 ;;  u8regsno        1   33[BANK0 ] unsigned char 
  7457 ;;  u8StartAdd      1   32[BANK0 ] unsigned char 
  7458 ;;  u8CopyBuffer    1   30[BANK0 ] unsigned char 
  7459 ;; Return value:  Size  Location     Type
  7460 ;;                  1    wreg      char 
  7461 ;; Registers used:
  7462 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7463 ;; Tracked objects:
  7464 ;;		On entry : 0/0
  7465 ;;		On exit  : 0/0
  7466 ;;		Unchanged: 0/0
  7467 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7468 ;;      Params:         0       1       0       0       0       0       0       0
  7469 ;;      Locals:         0       5       0       0       0       0       0       0
  7470 ;;      Temps:          0       4       0       0       0       0       0       0
  7471 ;;      Totals:         0      10       0       0       0       0       0       0
  7472 ;;Total ram usage:       10 bytes
  7473 ;; Hardware stack levels used:    1
  7474 ;; Hardware stack levels required when called:    9
  7475 ;; This function calls:
  7476 ;;		_sendTxBuffer
  7477 ;;		_wordConvert
  7478 ;; This function is called by:
  7479 ;;		_ModbuspollSlave
  7480 ;; This function uses a non-reentrant model
  7481 ;;
  7482                           
  7483                           
  7484                           ;psect for function _process_FC3
  7485  0677                     _process_FC3:	
  7486                           
  7487                           ;incstack = 0
  7488                           ; Regs used in _process_FC3: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7489                           ;process_FC3@regs stored from wreg
  7490  0677  0020               	movlb	0	; select bank0
  7491  0678  00BF               	movwf	process_FC3@regs
  7492                           
  7493                           ;modbusMS.c: 764: unsigned char u8StartAdd = wordConvert( au8Buffer[ ADD_HI ], au8Buffer
      +                          [ ADD_LO ] );
  7494  0679  0021               	movlb	1	; select bank1
  7495  067A  0823               	movf	(_au8Buffer^(0+128)+3),w
  7496  067B  0020               	movlb	0	; select bank0
  7497  067C  00BA               	movwf	??_process_FC3
  7498  067D  083A               	movf	??_process_FC3,w
  7499  067E  00A5               	movwf	wordConvert@lByte
  7500  067F  0021               	movlb	1	; select bank1
  7501  0680  0822               	movf	(_au8Buffer^(0+128)+2),w
  7502  0681  318B  2396  3186   	fcall	_wordConvert
  7503  0684  0020               	movlb	0	; select bank0
  7504  0685  0825               	movf	?_wordConvert,w
  7505  0686  00BB               	movwf	??_process_FC3+1
  7506  0687  083B               	movf	??_process_FC3+1,w
  7507  0688  00C0               	movwf	process_FC3@u8StartAdd
  7508                           
  7509                           ;modbusMS.c: 765: unsigned char u8regsno = wordConvert( au8Buffer[ NB_HI ], au8Buffer[ N
      +                          B_LO ] );
  7510  0689  0021               	movlb	1	; select bank1
  7511  068A  0825               	movf	(_au8Buffer^(0+128)+5),w
  7512  068B  0020               	movlb	0	; select bank0
  7513  068C  00BA               	movwf	??_process_FC3
  7514  068D  083A               	movf	??_process_FC3,w
  7515  068E  00A5               	movwf	wordConvert@lByte
  7516  068F  0021               	movlb	1	; select bank1
  7517  0690  0824               	movf	(_au8Buffer^(0+128)+4),w
  7518  0691  318B  2396  3186   	fcall	_wordConvert
  7519  0694  0020               	movlb	0	; select bank0
  7520  0695  0825               	movf	?_wordConvert,w
  7521  0696  00BB               	movwf	??_process_FC3+1
  7522  0697  083B               	movf	??_process_FC3+1,w
  7523  0698  00C1               	movwf	process_FC3@u8regsno
  7524                           
  7525                           ;modbusMS.c: 766: unsigned char u8CopyBufferSize;
  7526                           ;modbusMS.c: 767: unsigned char i;
  7527                           ;modbusMS.c: 769: au8Buffer[ 2 ] = u8regsno * 2;
  7528  0699  3541               	lslf	process_FC3@u8regsno,w
  7529  069A  00BA               	movwf	??_process_FC3
  7530  069B  083A               	movf	??_process_FC3,w
  7531  069C  0021               	movlb	1	; select bank1
  7532  069D  00A2               	movwf	(_au8Buffer^(0+128)+2)
  7533                           
  7534                           ;modbusMS.c: 770: u8BufferSize = 3;
  7535  069E  3003               	movlw	3
  7536  069F  0020               	movlb	0	; select bank0
  7537  06A0  00BA               	movwf	??_process_FC3
  7538  06A1  083A               	movf	??_process_FC3,w
  7539  06A2  00DE               	movwf	_u8BufferSize
  7540                           
  7541                           ;modbusMS.c: 772: for (i = u8StartAdd; i < u8StartAdd + u8regsno; i++)
  7542  06A3  0840               	movf	process_FC3@u8StartAdd,w
  7543  06A4  00BA               	movwf	??_process_FC3
  7544  06A5  083A               	movf	??_process_FC3,w
  7545  06A6  00C2               	movwf	process_FC3@i
  7546  06A7                     l4778:	
  7547  06A7  0840               	movf	process_FC3@u8StartAdd,w
  7548  06A8  0741               	addwf	process_FC3@u8regsno,w
  7549  06A9  00BA               	movwf	??_process_FC3
  7550  06AA  01BB               	clrf	??_process_FC3+1
  7551  06AB  0DBB               	rlf	??_process_FC3+1,f
  7552  06AC  083B               	movf	??_process_FC3+1,w
  7553  06AD  3A80               	xorlw	128
  7554  06AE  3C80               	sublw	128
  7555  06AF  1D03               	skipz
  7556  06B0  2EB3               	goto	u4085
  7557  06B1  083A               	movf	??_process_FC3,w
  7558  06B2  0242               	subwf	process_FC3@i,w
  7559  06B3                     u4085:	
  7560  06B3  1803               	btfsc	3,0
  7561  06B4  2EE3               	goto	l4780
  7562                           
  7563                           ;modbusMS.c: 773: {
  7564                           ;modbusMS.c: 774: au8Buffer[ u8BufferSize ] = ((unsigned char) ((regs[i]) >> 8));
  7565  06B5  0020               	movlb	0	; select bank0
  7566  06B6  3542               	lslf	process_FC3@i,w
  7567  06B7  073F               	addwf	process_FC3@regs,w
  7568  06B8  00BA               	movwf	??_process_FC3
  7569  06B9  083A               	movf	??_process_FC3,w
  7570  06BA  0086               	movwf	6
  7571  06BB  0187               	clrf	7
  7572  06BC  3F40               	moviw [0]fsr1
  7573  06BD  00BB               	movwf	??_process_FC3+1
  7574  06BE  3F41               	moviw [1]fsr1
  7575  06BF  00BC               	movwf	??_process_FC3+2
  7576  06C0  083C               	movf	??_process_FC3+2,w
  7577  06C1  00BD               	movwf	??_process_FC3+3
  7578  06C2  085E               	movf	_u8BufferSize,w
  7579  06C3  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
  7580  06C4  0086               	movwf	6
  7581  06C5  0187               	clrf	7
  7582  06C6  083D               	movf	??_process_FC3+3,w
  7583  06C7  0081               	movwf	1
  7584                           
  7585                           ;modbusMS.c: 775: u8BufferSize++;
  7586  06C8  3001               	movlw	1
  7587  06C9  00BA               	movwf	??_process_FC3
  7588  06CA  083A               	movf	??_process_FC3,w
  7589  06CB  07DE               	addwf	_u8BufferSize,f
  7590                           
  7591                           ;modbusMS.c: 776: au8Buffer[ u8BufferSize ] = ((unsigned char) ((regs[i]) & 0xff));
  7592  06CC  3542               	lslf	process_FC3@i,w
  7593  06CD  073F               	addwf	process_FC3@regs,w
  7594  06CE  00BA               	movwf	??_process_FC3
  7595  06CF  083A               	movf	??_process_FC3,w
  7596  06D0  0086               	movwf	6
  7597  06D1  0187               	clrf	7
  7598  06D2  0801               	movf	1,w
  7599  06D3  00BB               	movwf	??_process_FC3+1
  7600  06D4  085E               	movf	_u8BufferSize,w
  7601  06D5  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
  7602  06D6  0086               	movwf	6
  7603  06D7  0187               	clrf	7
  7604  06D8  083B               	movf	??_process_FC3+1,w
  7605  06D9  0081               	movwf	1
  7606                           
  7607                           ;modbusMS.c: 777: u8BufferSize++;
  7608  06DA  3001               	movlw	1
  7609  06DB  00BA               	movwf	??_process_FC3
  7610  06DC  083A               	movf	??_process_FC3,w
  7611  06DD  07DE               	addwf	_u8BufferSize,f
  7612  06DE  3001               	movlw	1
  7613  06DF  00BA               	movwf	??_process_FC3
  7614  06E0  083A               	movf	??_process_FC3,w
  7615  06E1  07C2               	addwf	process_FC3@i,f
  7616  06E2  2EA7               	goto	l4778
  7617  06E3                     l4780:	
  7618                           
  7619                           ;modbusMS.c: 778: }
  7620                           ;modbusMS.c: 779: u8CopyBufferSize = u8BufferSize +2;
  7621  06E3  0020               	movlb	0	; select bank0
  7622  06E4  085E               	movf	_u8BufferSize,w
  7623  06E5  3E02               	addlw	2
  7624  06E6  00BA               	movwf	??_process_FC3
  7625  06E7  083A               	movf	??_process_FC3,w
  7626  06E8  00BE               	movwf	process_FC3@u8CopyBufferSize
  7627                           
  7628                           ;modbusMS.c: 780: sendTxBuffer();
  7629  06E9  3185  2577         	fcall	_sendTxBuffer
  7630                           
  7631                           ;modbusMS.c: 782: return u8CopyBufferSize;
  7632  06EB  0020               	movlb	0	; select bank0
  7633  06EC  083E               	movf	process_FC3@u8CopyBufferSize,w
  7634  06ED  0008               	return
  7635  06EE                     __end_of_process_FC3:	
  7636                           
  7637                           	psect	text21
  7638  0E86                     __ptext21:	
  7639 ;; *************** function _process_FC16 *****************
  7640 ;; Defined at:
  7641 ;;		line 903 in file "modbusMS.c"
  7642 ;; Parameters:    Size  Location     Type
  7643 ;;  regs            1    wreg     PTR unsigned int 
  7644 ;;		 -> ModbusData(16), 
  7645 ;;  u8size          1   25[BANK0 ] unsigned char 
  7646 ;; Auto vars:     Size  Location     Type
  7647 ;;  regs            1   31[BANK0 ] PTR unsigned int 
  7648 ;;		 -> ModbusData(16), 
  7649 ;;  temp            2   29[BANK0 ] unsigned int 
  7650 ;;  i               1   35[BANK0 ] unsigned char 
  7651 ;;  u8regsno        1   34[BANK0 ] unsigned char 
  7652 ;;  u8CopyBuffer    1   33[BANK0 ] unsigned char 
  7653 ;;  u8StartAdd      1   32[BANK0 ] unsigned char 
  7654 ;;  u8func          1   28[BANK0 ] unsigned char 
  7655 ;; Return value:  Size  Location     Type
  7656 ;;                  1    wreg      char 
  7657 ;; Registers used:
  7658 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7659 ;; Tracked objects:
  7660 ;;		On entry : 0/0
  7661 ;;		On exit  : 0/0
  7662 ;;		Unchanged: 0/0
  7663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7664 ;;      Params:         0       1       0       0       0       0       0       0
  7665 ;;      Locals:         0       8       0       0       0       0       0       0
  7666 ;;      Temps:          0       2       0       0       0       0       0       0
  7667 ;;      Totals:         0      11       0       0       0       0       0       0
  7668 ;;Total ram usage:       11 bytes
  7669 ;; Hardware stack levels used:    1
  7670 ;; Hardware stack levels required when called:    9
  7671 ;; This function calls:
  7672 ;;		_sendTxBuffer
  7673 ;;		_wordConvert
  7674 ;; This function is called by:
  7675 ;;		_ModbuspollSlave
  7676 ;; This function uses a non-reentrant model
  7677 ;;
  7678                           
  7679                           
  7680                           ;psect for function _process_FC16
  7681  0E86                     _process_FC16:	
  7682                           
  7683                           ;incstack = 0
  7684                           ; Regs used in _process_FC16: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7685                           ;process_FC16@regs stored from wreg
  7686  0E86  0020               	movlb	0	; select bank0
  7687  0E87  00BF               	movwf	process_FC16@regs
  7688                           
  7689                           ;modbusMS.c: 905: unsigned char u8func = au8Buffer[ FUNC ];
  7690  0E88  0021               	movlb	1	; select bank1
  7691  0E89  0821               	movf	(_au8Buffer^(0+128)+1),w
  7692  0E8A  0020               	movlb	0	; select bank0
  7693  0E8B  00BA               	movwf	??_process_FC16
  7694  0E8C  083A               	movf	??_process_FC16,w
  7695  0E8D  00BC               	movwf	process_FC16@u8func
  7696                           
  7697                           ;modbusMS.c: 906: unsigned char u8StartAdd = au8Buffer[ ADD_HI ] << 8 | au8Buffer[ ADD_L
      +                          O ];
  7698  0E8E  0021               	movlb	1	; select bank1
  7699  0E8F  0823               	movf	(_au8Buffer^(0+128)+3),w
  7700  0E90  0020               	movlb	0	; select bank0
  7701  0E91  00BA               	movwf	??_process_FC16
  7702  0E92  083A               	movf	??_process_FC16,w
  7703  0E93  00C0               	movwf	process_FC16@u8StartAdd
  7704                           
  7705                           ;modbusMS.c: 907: unsigned char u8regsno = au8Buffer[ NB_HI ] << 8 | au8Buffer[ NB_LO ];
  7706  0E94  0021               	movlb	1	; select bank1
  7707  0E95  0825               	movf	(_au8Buffer^(0+128)+5),w
  7708  0E96  0020               	movlb	0	; select bank0
  7709  0E97  00BA               	movwf	??_process_FC16
  7710  0E98  083A               	movf	??_process_FC16,w
  7711  0E99  00C2               	movwf	process_FC16@u8regsno
  7712                           
  7713                           ;modbusMS.c: 908: unsigned char u8CopyBufferSize;
  7714                           ;modbusMS.c: 909: unsigned char i;
  7715                           ;modbusMS.c: 910: unsigned int temp;
  7716                           ;modbusMS.c: 913: au8Buffer[ NB_HI ] = 0;
  7717  0E9A  0021               	movlb	1	; select bank1
  7718  0E9B  01A4               	clrf	(_au8Buffer^(0+128)+4)
  7719                           
  7720                           ;modbusMS.c: 914: au8Buffer[ NB_LO ] = u8regsno;
  7721  0E9C  0020               	movlb	0	; select bank0
  7722  0E9D  0842               	movf	process_FC16@u8regsno,w
  7723  0E9E  00BA               	movwf	??_process_FC16
  7724  0E9F  083A               	movf	??_process_FC16,w
  7725  0EA0  0021               	movlb	1	; select bank1
  7726  0EA1  00A5               	movwf	(_au8Buffer^(0+128)+5)
  7727                           
  7728                           ;modbusMS.c: 915: u8BufferSize = RESPONSE_SIZE;
  7729  0EA2  3006               	movlw	6
  7730  0EA3  0020               	movlb	0	; select bank0
  7731  0EA4  00BA               	movwf	??_process_FC16
  7732  0EA5  083A               	movf	??_process_FC16,w
  7733  0EA6  00DE               	movwf	_u8BufferSize
  7734                           
  7735                           ;modbusMS.c: 918: for (i = 0; i < u8regsno; i++)
  7736  0EA7  01C3               	clrf	process_FC16@i
  7737  0EA8                     l4880:	
  7738  0EA8  0842               	movf	process_FC16@u8regsno,w
  7739  0EA9  0243               	subwf	process_FC16@i,w
  7740  0EAA  1803               	btfsc	3,0
  7741  0EAB  2ED3               	goto	l4882
  7742                           
  7743                           ;modbusMS.c: 919: {
  7744                           ;modbusMS.c: 920: temp = wordConvert(*(au8Buffer + (BYTE_CNT + 1) + (i * 2)), *(au8Buffe
      +                          r +(BYTE_CNT + 2) + (i * 2)));
  7745  0EAC  3543               	lslf	process_FC16@i,w
  7746  0EAD  3EA8               	addlw	(low ((_au8Buffer| 0+8)))& (0+255)
  7747  0EAE  0086               	movwf	6
  7748  0EAF  0187               	clrf	7
  7749  0EB0  0801               	movf	1,w
  7750  0EB1  00BA               	movwf	??_process_FC16
  7751  0EB2  083A               	movf	??_process_FC16,w
  7752  0EB3  00A5               	movwf	wordConvert@lByte
  7753  0EB4  3543               	lslf	process_FC16@i,w
  7754  0EB5  3EA7               	addlw	(low ((_au8Buffer| 0+7)))& (0+255)
  7755  0EB6  0086               	movwf	6
  7756  0EB7  0187               	clrf	7
  7757  0EB8  0801               	movf	1,w
  7758  0EB9  318B  2396  318E   	fcall	_wordConvert
  7759  0EBC  0020               	movlb	0	; select bank0
  7760  0EBD  0826               	movf	?_wordConvert+1,w
  7761  0EBE  00BE               	movwf	process_FC16@temp+1
  7762  0EBF  0825               	movf	?_wordConvert,w
  7763  0EC0  00BD               	movwf	process_FC16@temp
  7764                           
  7765                           ;modbusMS.c: 922: *(regs+ u8StartAdd + i)= temp;
  7766  0EC1  3540               	lslf	process_FC16@u8StartAdd,w
  7767  0EC2  073F               	addwf	process_FC16@regs,w
  7768  0EC3  00BA               	movwf	??_process_FC16
  7769  0EC4  3543               	lslf	process_FC16@i,w
  7770  0EC5  073A               	addwf	??_process_FC16,w
  7771  0EC6  00BB               	movwf	??_process_FC16+1
  7772  0EC7  083B               	movf	??_process_FC16+1,w
  7773  0EC8  0086               	movwf	6
  7774  0EC9  0187               	clrf	7
  7775  0ECA  083D               	movf	process_FC16@temp,w
  7776  0ECB  3FC0               	movwi [0]fsr1
  7777  0ECC  083E               	movf	process_FC16@temp+1,w
  7778  0ECD  3FC1               	movwi [1]fsr1
  7779  0ECE  3001               	movlw	1
  7780  0ECF  00BA               	movwf	??_process_FC16
  7781  0ED0  083A               	movf	??_process_FC16,w
  7782  0ED1  07C3               	addwf	process_FC16@i,f
  7783  0ED2  2EA8               	goto	l4880
  7784  0ED3                     l4882:	
  7785                           
  7786                           ;modbusMS.c: 923: }
  7787                           ;modbusMS.c: 924: u8CopyBufferSize = u8BufferSize +2;
  7788  0ED3  085E               	movf	_u8BufferSize,w
  7789  0ED4  3E02               	addlw	2
  7790  0ED5  00BA               	movwf	??_process_FC16
  7791  0ED6  083A               	movf	??_process_FC16,w
  7792  0ED7  00C1               	movwf	process_FC16@u8CopyBufferSize
  7793                           
  7794                           ;modbusMS.c: 925: sendTxBuffer();
  7795  0ED8  3185  2577         	fcall	_sendTxBuffer
  7796                           
  7797                           ;modbusMS.c: 927: return u8CopyBufferSize;
  7798  0EDA  0020               	movlb	0	; select bank0
  7799  0EDB  0841               	movf	process_FC16@u8CopyBufferSize,w
  7800  0EDC  0008               	return
  7801  0EDD                     __end_of_process_FC16:	
  7802                           
  7803                           	psect	text22
  7804  0438                     __ptext22:	
  7805 ;; *************** function _process_FC15 *****************
  7806 ;; Defined at:
  7807 ;;		line 852 in file "modbusMS.c"
  7808 ;; Parameters:    Size  Location     Type
  7809 ;;  regs            1    wreg     PTR unsigned int 
  7810 ;;		 -> ModbusData(16), 
  7811 ;;  u8size          1   25[BANK0 ] unsigned char 
  7812 ;; Auto vars:     Size  Location     Type
  7813 ;;  regs            1   38[BANK0 ] PTR unsigned int 
  7814 ;;		 -> ModbusData(16), 
  7815 ;;  u16currentCo    2   41[BANK0 ] unsigned int 
  7816 ;;  u16coil         2   36[BANK0 ] unsigned int 
  7817 ;;  u16Coilno       2   31[BANK0 ] unsigned int 
  7818 ;;  u16StartCoil    2   29[BANK0 ] unsigned int 
  7819 ;;  u8bitsno        1   43[BANK0 ] unsigned char 
  7820 ;;  u8currentBit    1   40[BANK0 ] unsigned char 
  7821 ;;  u8currentReg    1   39[BANK0 ] unsigned char 
  7822 ;;  u8frameByte     1   35[BANK0 ] unsigned char 
  7823 ;;  bTemp           1   34[BANK0 ] unsigned char 
  7824 ;;  u8CopyBuffer    1   33[BANK0 ] unsigned char 
  7825 ;; Return value:  Size  Location     Type
  7826 ;;                  1    wreg      char 
  7827 ;; Registers used:
  7828 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7829 ;; Tracked objects:
  7830 ;;		On entry : 0/0
  7831 ;;		On exit  : 0/0
  7832 ;;		Unchanged: 0/0
  7833 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  7834 ;;      Params:         0       1       0       0       0       0       0       0
  7835 ;;      Locals:         0      15       0       0       0       0       0       0
  7836 ;;      Temps:          0       3       0       0       0       0       0       0
  7837 ;;      Totals:         0      19       0       0       0       0       0       0
  7838 ;;Total ram usage:       19 bytes
  7839 ;; Hardware stack levels used:    1
  7840 ;; Hardware stack levels required when called:    9
  7841 ;; This function calls:
  7842 ;;		_sendTxBuffer
  7843 ;;		_wordConvert
  7844 ;; This function is called by:
  7845 ;;		_ModbuspollSlave
  7846 ;; This function uses a non-reentrant model
  7847 ;;
  7848                           
  7849                           
  7850                           ;psect for function _process_FC15
  7851  0438                     _process_FC15:	
  7852                           
  7853                           ;incstack = 0
  7854                           ; Regs used in _process_FC15: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7855                           ;process_FC15@regs stored from wreg
  7856  0438  0020               	movlb	0	; select bank0
  7857  0439  00C6               	movwf	process_FC15@regs
  7858                           
  7859                           ;modbusMS.c: 854: unsigned char u8currentRegister, u8currentBit, u8frameByte, u8bitsno;
  7860                           ;modbusMS.c: 855: unsigned char u8CopyBufferSize;
  7861                           ;modbusMS.c: 856: unsigned int u16currentCoil, u16coil;
  7862                           ;modbusMS.c: 857: bool bTemp;
  7863                           ;modbusMS.c: 860: unsigned int u16StartCoil = wordConvert( au8Buffer[ ADD_HI ], au8Buffe
      +                          r[ ADD_LO ] );
  7864  043A  0021               	movlb	1	; select bank1
  7865  043B  0823               	movf	(_au8Buffer^(0+128)+3),w
  7866  043C  0020               	movlb	0	; select bank0
  7867  043D  00BA               	movwf	??_process_FC15
  7868  043E  083A               	movf	??_process_FC15,w
  7869  043F  00A5               	movwf	wordConvert@lByte
  7870  0440  0021               	movlb	1	; select bank1
  7871  0441  0822               	movf	(_au8Buffer^(0+128)+2),w
  7872  0442  318B  2396  3184   	fcall	_wordConvert
  7873  0445  0020               	movlb	0	; select bank0
  7874  0446  0826               	movf	?_wordConvert+1,w
  7875  0447  00BE               	movwf	process_FC15@u16StartCoil+1
  7876  0448  0825               	movf	?_wordConvert,w
  7877  0449  00BD               	movwf	process_FC15@u16StartCoil
  7878                           
  7879                           ;modbusMS.c: 861: unsigned int u16Coilno = wordConvert( au8Buffer[ NB_HI ], au8Buffer[ N
      +                          B_LO ] );
  7880  044A  0021               	movlb	1	; select bank1
  7881  044B  0825               	movf	(_au8Buffer^(0+128)+5),w
  7882  044C  0020               	movlb	0	; select bank0
  7883  044D  00BA               	movwf	??_process_FC15
  7884  044E  083A               	movf	??_process_FC15,w
  7885  044F  00A5               	movwf	wordConvert@lByte
  7886  0450  0021               	movlb	1	; select bank1
  7887  0451  0824               	movf	(_au8Buffer^(0+128)+4),w
  7888  0452  318B  2396  3184   	fcall	_wordConvert
  7889  0455  0020               	movlb	0	; select bank0
  7890  0456  0826               	movf	?_wordConvert+1,w
  7891  0457  00C0               	movwf	process_FC15@u16Coilno+1
  7892  0458  0825               	movf	?_wordConvert,w
  7893  0459  00BF               	movwf	process_FC15@u16Coilno
  7894                           
  7895                           ;modbusMS.c: 865: u8bitsno = 0;
  7896  045A  01CB               	clrf	process_FC15@u8bitsno
  7897                           
  7898                           ;modbusMS.c: 866: u8frameByte = 7;
  7899  045B  3007               	movlw	7
  7900  045C  00BA               	movwf	??_process_FC15
  7901  045D  083A               	movf	??_process_FC15,w
  7902  045E  00C3               	movwf	process_FC15@u8frameByte
  7903                           
  7904                           ;modbusMS.c: 867: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
  7905  045F  01C9               	clrf	process_FC15@u16currentCoil
  7906  0460  01CA               	clrf	process_FC15@u16currentCoil+1
  7907  0461                     l4852:	
  7908  0461  0840               	movf	process_FC15@u16Coilno+1,w
  7909  0462  024A               	subwf	process_FC15@u16currentCoil+1,w
  7910  0463  1D03               	skipz
  7911  0464  2C67               	goto	u4195
  7912  0465  083F               	movf	process_FC15@u16Coilno,w
  7913  0466  0249               	subwf	process_FC15@u16currentCoil,w
  7914  0467                     u4195:	
  7915  0467  1803               	btfsc	3,0
  7916  0468  2CD3               	goto	l4854
  7917                           
  7918                           ;modbusMS.c: 868: {
  7919                           ;modbusMS.c: 870: u16coil = u16StartCoil + u16currentCoil;
  7920  0469  0849               	movf	process_FC15@u16currentCoil,w
  7921  046A  073D               	addwf	process_FC15@u16StartCoil,w
  7922  046B  00C4               	movwf	process_FC15@u16coil
  7923  046C  084A               	movf	process_FC15@u16currentCoil+1,w
  7924  046D  3D3E               	addwfc	process_FC15@u16StartCoil+1,w
  7925  046E  00C5               	movwf	process_FC15@u16coil+1
  7926                           
  7927                           ;modbusMS.c: 871: u8currentRegister = (unsigned char) (u16coil / 16);
  7928  046F  0845               	movf	process_FC15@u16coil+1,w
  7929  0470  00BB               	movwf	??_process_FC15+1
  7930  0471  0844               	movf	process_FC15@u16coil,w
  7931  0472  00BA               	movwf	??_process_FC15
  7932  0473  3004               	movlw	4
  7933  0474                     u4135:	
  7934  0474  36BB               	lsrf	??_process_FC15+1,f
  7935  0475  0CBA               	rrf	??_process_FC15,f
  7936  0476  0B89               	decfsz	9,f
  7937  0477  2C74               	goto	u4135
  7938  0478  083A               	movf	??_process_FC15,w
  7939  0479  00BC               	movwf	??_process_FC15+2
  7940  047A  083C               	movf	??_process_FC15+2,w
  7941  047B  00C7               	movwf	process_FC15@u8currentRegister
  7942                           
  7943                           ;modbusMS.c: 872: u8currentBit = (unsigned char) (u16coil % 16);
  7944  047C  0844               	movf	process_FC15@u16coil,w
  7945  047D  390F               	andlw	15
  7946  047E  00BA               	movwf	??_process_FC15
  7947  047F  083A               	movf	??_process_FC15,w
  7948  0480  00C8               	movwf	process_FC15@u8currentBit
  7949                           
  7950                           ;modbusMS.c: 874: bTemp = (((*(au8Buffer +u8frameByte)) >> (u8bitsno)) & 0x01);
  7951  0481  0843               	movf	process_FC15@u8frameByte,w
  7952  0482  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
  7953  0483  0086               	movwf	6
  7954  0484  0187               	clrf	7
  7955  0485  0801               	movf	1,w
  7956  0486  00BA               	movwf	??_process_FC15
  7957  0487  0A4B               	incf	process_FC15@u8bitsno,w
  7958  0488  2C8A               	goto	u4144
  7959  0489                     u4145:	
  7960  0489  36BA               	lsrf	??_process_FC15,f
  7961  048A                     u4144:	
  7962  048A  0B89               	decfsz	9,f
  7963  048B  2C89               	goto	u4145
  7964  048C  083A               	movf	??_process_FC15,w
  7965  048D  3901               	andlw	1
  7966  048E  00BB               	movwf	??_process_FC15+1
  7967  048F  083B               	movf	??_process_FC15+1,w
  7968  0490  00C2               	movwf	process_FC15@bTemp
  7969                           
  7970                           ;modbusMS.c: 876: (bTemp ? ((*(regs+u8currentRegister)) |= (1UL << (u8currentBit))) : ((
      +                          *(regs+u8currentRegister)) &= ~(1UL << (u8currentBit))));
  7971  0491  0842               	movf	process_FC15@bTemp,w
  7972  0492  1903               	btfsc	3,2
  7973  0493  2CAA               	goto	l4840
  7974  0494  3001               	movlw	1
  7975  0495  00BA               	movwf	??_process_FC15
  7976  0496  3000               	movlw	0
  7977  0497  00BB               	movwf	??_process_FC15+1
  7978  0498  0A48               	incf	process_FC15@u8currentBit,w
  7979  0499  2C9C               	goto	u4164
  7980  049A                     u4165:	
  7981  049A  35BA               	lslf	??_process_FC15,f
  7982  049B  0DBB               	rlf	??_process_FC15+1,f
  7983  049C                     u4164:	
  7984  049C  0B89               	decfsz	9,f
  7985  049D  2C9A               	goto	u4165
  7986  049E  3547               	lslf	process_FC15@u8currentRegister,w
  7987  049F  0746               	addwf	process_FC15@regs,w
  7988  04A0  00BC               	movwf	??_process_FC15+2
  7989  04A1  083C               	movf	??_process_FC15+2,w
  7990  04A2  0086               	movwf	6
  7991  04A3  0187               	clrf	7
  7992  04A4  083A               	movf	??_process_FC15,w
  7993  04A5  0481               	iorwf	1,f
  7994  04A6  3141               	addfsr 1,1
  7995  04A7  083B               	movf	??_process_FC15+1,w
  7996  04A8  0481               	iorwf	1,f
  7997  04A9  2CC1               	goto	l4842
  7998  04AA                     l4840:	
  7999  04AA  3001               	movlw	1
  8000  04AB  00BA               	movwf	??_process_FC15
  8001  04AC  3000               	movlw	0
  8002  04AD  00BB               	movwf	??_process_FC15+1
  8003  04AE  0A48               	incf	process_FC15@u8currentBit,w
  8004  04AF  2CB2               	goto	u4174
  8005  04B0                     u4175:	
  8006  04B0  35BA               	lslf	??_process_FC15,f
  8007  04B1  0DBB               	rlf	??_process_FC15+1,f
  8008  04B2                     u4174:	
  8009  04B2  0B89               	decfsz	9,f
  8010  04B3  2CB0               	goto	u4175
  8011  04B4  09BA               	comf	??_process_FC15,f
  8012  04B5  09BB               	comf	??_process_FC15+1,f
  8013  04B6  3547               	lslf	process_FC15@u8currentRegister,w
  8014  04B7  0746               	addwf	process_FC15@regs,w
  8015  04B8  00BC               	movwf	??_process_FC15+2
  8016  04B9  083C               	movf	??_process_FC15+2,w
  8017  04BA  0086               	movwf	6
  8018  04BB  0187               	clrf	7
  8019  04BC  083A               	movf	??_process_FC15,w
  8020  04BD  0581               	andwf	1,f
  8021  04BE  3141               	addfsr 1,1
  8022  04BF  083B               	movf	??_process_FC15+1,w
  8023  04C0  0581               	andwf	1,f
  8024  04C1                     l4842:	
  8025                           
  8026                           ;modbusMS.c: 878: u8bitsno ++;
  8027  04C1  3001               	movlw	1
  8028  04C2  00BA               	movwf	??_process_FC15
  8029  04C3  083A               	movf	??_process_FC15,w
  8030  04C4  07CB               	addwf	process_FC15@u8bitsno,f
  8031                           
  8032                           ;modbusMS.c: 880: if (u8bitsno > 7)
  8033  04C5  3008               	movlw	8
  8034  04C6  024B               	subwf	process_FC15@u8bitsno,w
  8035  04C7  1C03               	skipc
  8036  04C8  2CCE               	goto	l4850
  8037                           
  8038                           ;modbusMS.c: 881: {
  8039                           ;modbusMS.c: 882: u8bitsno = 0;
  8040  04C9  01CB               	clrf	process_FC15@u8bitsno
  8041                           
  8042                           ;modbusMS.c: 883: u8frameByte++;
  8043  04CA  3001               	movlw	1
  8044  04CB  00BA               	movwf	??_process_FC15
  8045  04CC  083A               	movf	??_process_FC15,w
  8046  04CD  07C3               	addwf	process_FC15@u8frameByte,f
  8047  04CE                     l4850:	
  8048  04CE  3001               	movlw	1
  8049  04CF  07C9               	addwf	process_FC15@u16currentCoil,f
  8050  04D0  3000               	movlw	0
  8051  04D1  3DCA               	addwfc	process_FC15@u16currentCoil+1,f
  8052  04D2  2C61               	goto	l4852
  8053  04D3                     l4854:	
  8054                           
  8055                           ;modbusMS.c: 884: }
  8056                           ;modbusMS.c: 885: }
  8057                           ;modbusMS.c: 889: u8BufferSize = 6;
  8058  04D3  3006               	movlw	6
  8059  04D4  00BA               	movwf	??_process_FC15
  8060  04D5  083A               	movf	??_process_FC15,w
  8061  04D6  00DE               	movwf	_u8BufferSize
  8062                           
  8063                           ;modbusMS.c: 890: u8CopyBufferSize = u8BufferSize +2;
  8064  04D7  085E               	movf	_u8BufferSize,w
  8065  04D8  3E02               	addlw	2
  8066  04D9  00BA               	movwf	??_process_FC15
  8067  04DA  083A               	movf	??_process_FC15,w
  8068  04DB  00C1               	movwf	process_FC15@u8CopyBufferSize
  8069                           
  8070                           ;modbusMS.c: 891: sendTxBuffer();
  8071  04DC  3185  2577         	fcall	_sendTxBuffer
  8072                           
  8073                           ;modbusMS.c: 892: return u8CopyBufferSize;
  8074  04DE  0020               	movlb	0	; select bank0
  8075  04DF  0841               	movf	process_FC15@u8CopyBufferSize,w
  8076  04E0  0008               	return
  8077  04E1                     __end_of_process_FC15:	
  8078                           
  8079                           	psect	text23
  8080  02AF                     __ptext23:	
  8081 ;; *************** function _process_FC1 *****************
  8082 ;; Defined at:
  8083 ;;		line 706 in file "modbusMS.c"
  8084 ;; Parameters:    Size  Location     Type
  8085 ;;  regs            1    wreg     PTR unsigned int 
  8086 ;;		 -> ModbusData(16), 
  8087 ;;  u8size          1   25[BANK0 ] unsigned char 
  8088 ;; Auto vars:     Size  Location     Type
  8089 ;;  regs            1   29[BANK0 ] PTR unsigned int 
  8090 ;;		 -> ModbusData(16), 
  8091 ;;  u16Coilno       2   41[BANK0 ] unsigned int 
  8092 ;;  u16currentCo    2   38[BANK0 ] unsigned int 
  8093 ;;  u16coil         2   36[BANK0 ] unsigned int 
  8094 ;;  u16StartCoil    2   33[BANK0 ] unsigned int 
  8095 ;;  u8bitsno        1   40[BANK0 ] unsigned char 
  8096 ;;  u8bytesno       1   35[BANK0 ] unsigned char 
  8097 ;;  u8CopyBuffer    1   32[BANK0 ] unsigned char 
  8098 ;;  u8currentBit    1   31[BANK0 ] unsigned char 
  8099 ;;  u8currentReg    1   30[BANK0 ] unsigned char 
  8100 ;; Return value:  Size  Location     Type
  8101 ;;                  1    wreg      char 
  8102 ;; Registers used:
  8103 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8104 ;; Tracked objects:
  8105 ;;		On entry : 0/0
  8106 ;;		On exit  : 0/0
  8107 ;;		Unchanged: 0/0
  8108 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8109 ;;      Params:         0       1       0       0       0       0       0       0
  8110 ;;      Locals:         0      14       0       0       0       0       0       0
  8111 ;;      Temps:          0       3       0       0       0       0       0       0
  8112 ;;      Totals:         0      18       0       0       0       0       0       0
  8113 ;;Total ram usage:       18 bytes
  8114 ;; Hardware stack levels used:    1
  8115 ;; Hardware stack levels required when called:    9
  8116 ;; This function calls:
  8117 ;;		_sendTxBuffer
  8118 ;;		_wordConvert
  8119 ;; This function is called by:
  8120 ;;		_ModbuspollSlave
  8121 ;; This function uses a non-reentrant model
  8122 ;;
  8123                           
  8124                           
  8125                           ;psect for function _process_FC1
  8126  02AF                     _process_FC1:	
  8127                           
  8128                           ;incstack = 0
  8129                           ; Regs used in _process_FC1: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8130                           ;process_FC1@regs stored from wreg
  8131  02AF  0020               	movlb	0	; select bank0
  8132  02B0  00BD               	movwf	process_FC1@regs
  8133                           
  8134                           ;modbusMS.c: 708: unsigned char u8currentRegister, u8currentBit, u8bytesno, u8bitsno;
  8135                           ;modbusMS.c: 709: unsigned char u8CopyBufferSize;
  8136                           ;modbusMS.c: 710: unsigned int u16currentCoil, u16coil;
  8137                           ;modbusMS.c: 713: unsigned int u16StartCoil=0;
  8138  02B1  01C1               	clrf	process_FC1@u16StartCoil
  8139  02B2  01C2               	clrf	process_FC1@u16StartCoil+1
  8140                           
  8141                           ;modbusMS.c: 714: unsigned int u16Coilno=0;
  8142  02B3  01C9               	clrf	process_FC1@u16Coilno
  8143  02B4  01CA               	clrf	process_FC1@u16Coilno+1
  8144                           
  8145                           ;modbusMS.c: 715: u16StartCoil = wordConvert( au8Buffer[ADD_HI], au8Buffer[ADD_LO] );
  8146  02B5  0021               	movlb	1	; select bank1
  8147  02B6  0823               	movf	(_au8Buffer^(0+128)+3),w
  8148  02B7  0020               	movlb	0	; select bank0
  8149  02B8  00BA               	movwf	??_process_FC1
  8150  02B9  083A               	movf	??_process_FC1,w
  8151  02BA  00A5               	movwf	wordConvert@lByte
  8152  02BB  0021               	movlb	1	; select bank1
  8153  02BC  0822               	movf	(_au8Buffer^(0+128)+2),w
  8154  02BD  318B  2396  3182   	fcall	_wordConvert
  8155  02C0  0020               	movlb	0	; select bank0
  8156  02C1  0826               	movf	?_wordConvert+1,w
  8157  02C2  00C2               	movwf	process_FC1@u16StartCoil+1
  8158  02C3  0825               	movf	?_wordConvert,w
  8159  02C4  00C1               	movwf	process_FC1@u16StartCoil
  8160                           
  8161                           ;modbusMS.c: 716: u16Coilno = wordConvert( au8Buffer[NB_HI], au8Buffer[NB_LO] );
  8162  02C5  0021               	movlb	1	; select bank1
  8163  02C6  0825               	movf	(_au8Buffer^(0+128)+5),w
  8164  02C7  0020               	movlb	0	; select bank0
  8165  02C8  00BA               	movwf	??_process_FC1
  8166  02C9  083A               	movf	??_process_FC1,w
  8167  02CA  00A5               	movwf	wordConvert@lByte
  8168  02CB  0021               	movlb	1	; select bank1
  8169  02CC  0824               	movf	(_au8Buffer^(0+128)+4),w
  8170  02CD  318B  2396  3182   	fcall	_wordConvert
  8171  02D0  0020               	movlb	0	; select bank0
  8172  02D1  0826               	movf	?_wordConvert+1,w
  8173  02D2  00CA               	movwf	process_FC1@u16Coilno+1
  8174  02D3  0825               	movf	?_wordConvert,w
  8175  02D4  00C9               	movwf	process_FC1@u16Coilno
  8176                           
  8177                           ;modbusMS.c: 719: u8bytesno = (unsigned char) (u16Coilno / 8);
  8178  02D5  084A               	movf	process_FC1@u16Coilno+1,w
  8179  02D6  00BB               	movwf	??_process_FC1+1
  8180  02D7  0849               	movf	process_FC1@u16Coilno,w
  8181  02D8  00BA               	movwf	??_process_FC1
  8182  02D9  36BB               	lsrf	??_process_FC1+1,f
  8183  02DA  0CBA               	rrf	??_process_FC1,f
  8184  02DB  36BB               	lsrf	??_process_FC1+1,f
  8185  02DC  0CBA               	rrf	??_process_FC1,f
  8186  02DD  36BB               	lsrf	??_process_FC1+1,f
  8187  02DE  0CBA               	rrf	??_process_FC1,f
  8188  02DF  083A               	movf	??_process_FC1,w
  8189  02E0  00BC               	movwf	??_process_FC1+2
  8190  02E1  083C               	movf	??_process_FC1+2,w
  8191  02E2  00C3               	movwf	process_FC1@u8bytesno
  8192                           
  8193                           ;modbusMS.c: 720: if (u16Coilno % 8 != 0) u8bytesno ++;
  8194  02E3  3007               	movlw	7
  8195  02E4  0549               	andwf	process_FC1@u16Coilno,w
  8196  02E5  00BA               	movwf	??_process_FC1
  8197  02E6  3000               	movlw	0
  8198  02E7  054A               	andwf	process_FC1@u16Coilno+1,w
  8199  02E8  00BB               	movwf	??_process_FC1+1
  8200  02E9  083A               	movf	??_process_FC1,w
  8201  02EA  043B               	iorwf	??_process_FC1+1,w
  8202  02EB  1903               	btfsc	3,2
  8203  02EC  2AF1               	goto	l4724
  8204  02ED  3001               	movlw	1
  8205  02EE  00BA               	movwf	??_process_FC1
  8206  02EF  083A               	movf	??_process_FC1,w
  8207  02F0  07C3               	addwf	process_FC1@u8bytesno,f
  8208  02F1                     l4724:	
  8209                           
  8210                           ;modbusMS.c: 721: au8Buffer[ ADD_HI ] = u8bytesno;
  8211  02F1  0843               	movf	process_FC1@u8bytesno,w
  8212  02F2  00BA               	movwf	??_process_FC1
  8213  02F3  083A               	movf	??_process_FC1,w
  8214  02F4  0021               	movlb	1	; select bank1
  8215  02F5  00A2               	movwf	(_au8Buffer^(0+128)+2)
  8216                           
  8217                           ;modbusMS.c: 722: u8BufferSize = ADD_LO;
  8218  02F6  3003               	movlw	3
  8219  02F7  0020               	movlb	0	; select bank0
  8220  02F8  00BA               	movwf	??_process_FC1
  8221  02F9  083A               	movf	??_process_FC1,w
  8222  02FA  00DE               	movwf	_u8BufferSize
  8223                           
  8224                           ;modbusMS.c: 725: u8bitsno = 0;
  8225  02FB  01C8               	clrf	process_FC1@u8bitsno
  8226                           
  8227                           ;modbusMS.c: 727: for (u16currentCoil = 0; u16currentCoil < u16Coilno; u16currentCoil++)
  8228  02FC  01C6               	clrf	process_FC1@u16currentCoil
  8229  02FD  01C7               	clrf	process_FC1@u16currentCoil+1
  8230  02FE                     l4752:	
  8231  02FE  084A               	movf	process_FC1@u16Coilno+1,w
  8232  02FF  0247               	subwf	process_FC1@u16currentCoil+1,w
  8233  0300  1D03               	skipz
  8234  0301  2B04               	goto	u4065
  8235  0302  0849               	movf	process_FC1@u16Coilno,w
  8236  0303  0246               	subwf	process_FC1@u16currentCoil,w
  8237  0304                     u4065:	
  8238  0304  1803               	btfsc	3,0
  8239  0305  2B62               	goto	l4754
  8240                           
  8241                           ;modbusMS.c: 728: {
  8242                           ;modbusMS.c: 729: u16coil = u16StartCoil + u16currentCoil;
  8243  0306  0846               	movf	process_FC1@u16currentCoil,w
  8244  0307  0741               	addwf	process_FC1@u16StartCoil,w
  8245  0308  00C4               	movwf	process_FC1@u16coil
  8246  0309  0847               	movf	process_FC1@u16currentCoil+1,w
  8247  030A  3D42               	addwfc	process_FC1@u16StartCoil+1,w
  8248  030B  00C5               	movwf	process_FC1@u16coil+1
  8249                           
  8250                           ;modbusMS.c: 730: u8currentRegister = (unsigned char) (u16coil / 16);
  8251  030C  0845               	movf	process_FC1@u16coil+1,w
  8252  030D  00BB               	movwf	??_process_FC1+1
  8253  030E  0844               	movf	process_FC1@u16coil,w
  8254  030F  00BA               	movwf	??_process_FC1
  8255  0310  3004               	movlw	4
  8256  0311                     u4005:	
  8257  0311  36BB               	lsrf	??_process_FC1+1,f
  8258  0312  0CBA               	rrf	??_process_FC1,f
  8259  0313  0B89               	decfsz	9,f
  8260  0314  2B11               	goto	u4005
  8261  0315  083A               	movf	??_process_FC1,w
  8262  0316  00BC               	movwf	??_process_FC1+2
  8263  0317  083C               	movf	??_process_FC1+2,w
  8264  0318  00BE               	movwf	process_FC1@u8currentRegister
  8265                           
  8266                           ;modbusMS.c: 731: u8currentBit = (unsigned char) (u16coil % 16);
  8267  0319  0844               	movf	process_FC1@u16coil,w
  8268  031A  390F               	andlw	15
  8269  031B  00BA               	movwf	??_process_FC1
  8270  031C  083A               	movf	??_process_FC1,w
  8271  031D  00BF               	movwf	process_FC1@u8currentBit
  8272                           
  8273                           ;modbusMS.c: 733: ((((regs[ u8currentRegister ]) >> (u8currentBit)) & 0x01) ? ((au8Buffe
      +                          r[ u8BufferSize ]) |= (1UL << (u8bitsno))) : ((au8Buffer[ u8BufferSize ]) &= ~(1UL << (u
      +                          8bitsno))));
  8274  031E  353E               	lslf	process_FC1@u8currentRegister,w
  8275  031F  073D               	addwf	process_FC1@regs,w
  8276  0320  00BA               	movwf	??_process_FC1
  8277  0321  083A               	movf	??_process_FC1,w
  8278  0322  0086               	movwf	6
  8279  0323  0187               	clrf	7
  8280  0324  3F40               	moviw [0]fsr1
  8281  0325  00BB               	movwf	??_process_FC1+1
  8282  0326  3F41               	moviw [1]fsr1
  8283  0327  00BC               	movwf	??_process_FC1+2
  8284  0328  0A3F               	incf	process_FC1@u8currentBit,w
  8285  0329  2B2C               	goto	u4014
  8286  032A                     u4015:	
  8287  032A  36BC               	lsrf	??_process_FC1+2,f
  8288  032B  0CBB               	rrf	??_process_FC1+1,f
  8289  032C                     u4014:	
  8290  032C  0B89               	decfsz	9,f
  8291  032D  2B2A               	goto	u4015
  8292  032E  1C3B               	btfss	??_process_FC1+1,0
  8293  032F  2B40               	goto	l4740
  8294  0330  3001               	movlw	1
  8295  0331  00BA               	movwf	??_process_FC1
  8296  0332  0A48               	incf	process_FC1@u8bitsno,w
  8297  0333  2B35               	goto	u4034
  8298  0334                     u4035:	
  8299  0334  35BA               	lslf	??_process_FC1,f
  8300  0335                     u4034:	
  8301  0335  0B89               	decfsz	9,f
  8302  0336  2B34               	goto	u4035
  8303  0337  083A               	movf	??_process_FC1,w
  8304  0338  00BB               	movwf	??_process_FC1+1
  8305  0339  085E               	movf	_u8BufferSize,w
  8306  033A  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
  8307  033B  0086               	movwf	6
  8308  033C  0187               	clrf	7
  8309  033D  083B               	movf	??_process_FC1+1,w
  8310  033E  0481               	iorwf	1,f
  8311  033F  2B50               	goto	l4742
  8312  0340                     l4740:	
  8313  0340  3001               	movlw	1
  8314  0341  00BA               	movwf	??_process_FC1
  8315  0342  0A48               	incf	process_FC1@u8bitsno,w
  8316  0343  2B45               	goto	u4044
  8317  0344                     u4045:	
  8318  0344  35BA               	lslf	??_process_FC1,f
  8319  0345                     u4044:	
  8320  0345  0B89               	decfsz	9,f
  8321  0346  2B44               	goto	u4045
  8322  0347  083A               	movf	??_process_FC1,w
  8323  0348  3AFF               	xorlw	255
  8324  0349  00BB               	movwf	??_process_FC1+1
  8325  034A  085E               	movf	_u8BufferSize,w
  8326  034B  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
  8327  034C  0086               	movwf	6
  8328  034D  0187               	clrf	7
  8329  034E  083B               	movf	??_process_FC1+1,w
  8330  034F  0581               	andwf	1,f
  8331  0350                     l4742:	
  8332                           
  8333                           ;modbusMS.c: 737: u8bitsno ++;
  8334  0350  3001               	movlw	1
  8335  0351  00BA               	movwf	??_process_FC1
  8336  0352  083A               	movf	??_process_FC1,w
  8337  0353  07C8               	addwf	process_FC1@u8bitsno,f
  8338                           
  8339                           ;modbusMS.c: 739: if (u8bitsno > 7)
  8340  0354  3008               	movlw	8
  8341  0355  0248               	subwf	process_FC1@u8bitsno,w
  8342  0356  1C03               	skipc
  8343  0357  2B5D               	goto	l4750
  8344                           
  8345                           ;modbusMS.c: 740: {
  8346                           ;modbusMS.c: 741: u8bitsno = 0;
  8347  0358  01C8               	clrf	process_FC1@u8bitsno
  8348                           
  8349                           ;modbusMS.c: 742: u8BufferSize++;
  8350  0359  3001               	movlw	1
  8351  035A  00BA               	movwf	??_process_FC1
  8352  035B  083A               	movf	??_process_FC1,w
  8353  035C  07DE               	addwf	_u8BufferSize,f
  8354  035D                     l4750:	
  8355  035D  3001               	movlw	1
  8356  035E  07C6               	addwf	process_FC1@u16currentCoil,f
  8357  035F  3000               	movlw	0
  8358  0360  3DC7               	addwfc	process_FC1@u16currentCoil+1,f
  8359  0361  2AFE               	goto	l4752
  8360  0362                     l4754:	
  8361                           
  8362                           ;modbusMS.c: 743: }
  8363                           ;modbusMS.c: 744: }
  8364                           ;modbusMS.c: 747: if (u16Coilno % 8 != 0) u8BufferSize ++;
  8365  0362  3007               	movlw	7
  8366  0363  0549               	andwf	process_FC1@u16Coilno,w
  8367  0364  00BA               	movwf	??_process_FC1
  8368  0365  3000               	movlw	0
  8369  0366  054A               	andwf	process_FC1@u16Coilno+1,w
  8370  0367  00BB               	movwf	??_process_FC1+1
  8371  0368  083A               	movf	??_process_FC1,w
  8372  0369  043B               	iorwf	??_process_FC1+1,w
  8373  036A  1903               	btfsc	3,2
  8374  036B  2B70               	goto	l904
  8375  036C  3001               	movlw	1
  8376  036D  00BA               	movwf	??_process_FC1
  8377  036E  083A               	movf	??_process_FC1,w
  8378  036F  07DE               	addwf	_u8BufferSize,f
  8379  0370                     l904:	
  8380                           
  8381                           ;modbusMS.c: 748: u8CopyBufferSize = u8BufferSize +2;
  8382  0370  085E               	movf	_u8BufferSize,w
  8383  0371  3E02               	addlw	2
  8384  0372  00BA               	movwf	??_process_FC1
  8385  0373  083A               	movf	??_process_FC1,w
  8386  0374  00C0               	movwf	process_FC1@u8CopyBufferSize
  8387                           
  8388                           ;modbusMS.c: 749: sendTxBuffer();
  8389  0375  3185  2577         	fcall	_sendTxBuffer
  8390                           
  8391                           ;modbusMS.c: 750: return u8CopyBufferSize;
  8392  0377  0020               	movlb	0	; select bank0
  8393  0378  0840               	movf	process_FC1@u8CopyBufferSize,w
  8394  0379  0008               	return
  8395  037A                     __end_of_process_FC1:	
  8396                           
  8397                           	psect	text24
  8398  0B96                     __ptext24:	
  8399 ;; *************** function _wordConvert *****************
  8400 ;; Defined at:
  8401 ;;		line 1051 in file "modbusMS.c"
  8402 ;; Parameters:    Size  Location     Type
  8403 ;;  hByte           1    wreg     unsigned char 
  8404 ;;  lByte           1    5[BANK0 ] unsigned char 
  8405 ;; Auto vars:     Size  Location     Type
  8406 ;;  hByte           1   12[BANK0 ] unsigned char 
  8407 ;; Return value:  Size  Location     Type
  8408 ;;                  2    5[BANK0 ] unsigned int 
  8409 ;; Registers used:
  8410 ;;		wreg, status,2, status,0
  8411 ;; Tracked objects:
  8412 ;;		On entry : 0/0
  8413 ;;		On exit  : 0/0
  8414 ;;		Unchanged: 0/0
  8415 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8416 ;;      Params:         0       2       0       0       0       0       0       0
  8417 ;;      Locals:         0       1       0       0       0       0       0       0
  8418 ;;      Temps:          0       5       0       0       0       0       0       0
  8419 ;;      Totals:         0       8       0       0       0       0       0       0
  8420 ;;Total ram usage:        8 bytes
  8421 ;; Hardware stack levels used:    1
  8422 ;; Hardware stack levels required when called:    6
  8423 ;; This function calls:
  8424 ;;		Nothing
  8425 ;; This function is called by:
  8426 ;;		_validateRequest
  8427 ;;		_process_FC1
  8428 ;;		_process_FC3
  8429 ;;		_process_FC5
  8430 ;;		_process_FC6
  8431 ;;		_process_FC15
  8432 ;;		_process_FC16
  8433 ;;		_get_FC1
  8434 ;;		_get_FC3
  8435 ;; This function uses a non-reentrant model
  8436 ;;
  8437                           
  8438                           
  8439                           ;psect for function _wordConvert
  8440  0B96                     _wordConvert:	
  8441                           
  8442                           ;incstack = 0
  8443                           ; Regs used in _wordConvert: [wreg+status,2+status,0]
  8444                           ;wordConvert@hByte stored from wreg
  8445  0B96  0020               	movlb	0	; select bank0
  8446  0B97  00AC               	movwf	wordConvert@hByte
  8447                           
  8448                           ;modbusMS.c: 1053: return (((unsigned int)hByte) << 8 )+ (unsigned int)lByte;
  8449  0B98  0825               	movf	wordConvert@lByte,w
  8450  0B99  00A7               	movwf	??_wordConvert
  8451  0B9A  01A8               	clrf	??_wordConvert+1
  8452  0B9B  082C               	movf	wordConvert@hByte,w
  8453  0B9C  00A9               	movwf	??_wordConvert+2
  8454  0B9D  01AA               	clrf	??_wordConvert+3
  8455  0B9E  0829               	movf	??_wordConvert+2,w
  8456  0B9F  00AA               	movwf	??_wordConvert+3
  8457  0BA0  01A9               	clrf	??_wordConvert+2
  8458  0BA1  0827               	movf	??_wordConvert,w
  8459  0BA2  0729               	addwf	??_wordConvert+2,w
  8460  0BA3  00A5               	movwf	?_wordConvert
  8461  0BA4  0828               	movf	??_wordConvert+1,w
  8462  0BA5  3D2A               	addwfc	??_wordConvert+3,w
  8463  0BA6  00A6               	movwf	?_wordConvert+1
  8464  0BA7  0008               	return
  8465  0BA8                     __end_of_wordConvert:	
  8466                           
  8467                           	psect	text25
  8468  0577                     __ptext25:	
  8469 ;; *************** function _sendTxBuffer *****************
  8470 ;; Defined at:
  8471 ;;		line 442 in file "modbusMS.c"
  8472 ;; Parameters:    Size  Location     Type
  8473 ;;		None
  8474 ;; Auto vars:     Size  Location     Type
  8475 ;;  u16crc          2   22[BANK0 ] unsigned int 
  8476 ;;  i               1   24[BANK0 ] unsigned char 
  8477 ;; Return value:  Size  Location     Type
  8478 ;;                  1    wreg      void 
  8479 ;; Registers used:
  8480 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8481 ;; Tracked objects:
  8482 ;;		On entry : 0/0
  8483 ;;		On exit  : 0/0
  8484 ;;		Unchanged: 0/0
  8485 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8486 ;;      Params:         0       0       0       0       0       0       0       0
  8487 ;;      Locals:         0       3       0       0       0       0       0       0
  8488 ;;      Temps:          0       4       0       0       0       0       0       0
  8489 ;;      Totals:         0       7       0       0       0       0       0       0
  8490 ;;Total ram usage:        7 bytes
  8491 ;; Hardware stack levels used:    1
  8492 ;; Hardware stack levels required when called:    8
  8493 ;; This function calls:
  8494 ;;		_ClearSerialRxBuffer
  8495 ;;		_Serialwrite
  8496 ;;		_calcCRC
  8497 ;;		_millis
  8498 ;; This function is called by:
  8499 ;;		_ModbuspollSlave
  8500 ;;		_process_FC1
  8501 ;;		_process_FC3
  8502 ;;		_process_FC5
  8503 ;;		_process_FC6
  8504 ;;		_process_FC15
  8505 ;;		_process_FC16
  8506 ;;		_Modbusquery
  8507 ;; This function uses a non-reentrant model
  8508 ;;
  8509                           
  8510                           
  8511                           ;psect for function _sendTxBuffer
  8512  0577                     _sendTxBuffer:	
  8513                           
  8514                           ;modbusMS.c: 444: unsigned char i = 0;
  8515                           
  8516                           ;incstack = 0
  8517                           ; Regs used in _sendTxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8518  0577  0020               	movlb	0	; select bank0
  8519  0578  01B8               	clrf	sendTxBuffer@i
  8520                           
  8521                           ;modbusMS.c: 447: PIR1bits.RCIF=0;
  8522  0579  1291               	bcf	17,5	;volatile
  8523                           
  8524                           ;modbusMS.c: 448: PIE1bits.RCIE = 0;
  8525  057A  0021               	movlb	1	; select bank1
  8526  057B  1291               	bcf	17,5	;volatile
  8527                           
  8528                           ;modbusMS.c: 449: do { LATBbits.LATB6 = 1; } while(0);
  8529  057C  0022               	movlb	2	; select bank2
  8530  057D  170D               	bsf	13,6	;volatile
  8531                           
  8532                           ;modbusMS.c: 451: unsigned int u16crc = calcCRC( u8BufferSize );
  8533  057E  0020               	movlb	0	; select bank0
  8534  057F  085E               	movf	_u8BufferSize,w
  8535  0580  318E  2633  3185   	fcall	_calcCRC
  8536  0583  0020               	movlb	0	; select bank0
  8537  0584  0826               	movf	?_calcCRC+1,w
  8538  0585  00B7               	movwf	sendTxBuffer@u16crc+1
  8539  0586  0825               	movf	?_calcCRC,w
  8540  0587  00B6               	movwf	sendTxBuffer@u16crc
  8541                           
  8542                           ;modbusMS.c: 452: au8Buffer[ u8BufferSize ] = u16crc >> 8;
  8543  0588  0837               	movf	sendTxBuffer@u16crc+1,w
  8544  0589  00B2               	movwf	??_sendTxBuffer
  8545  058A  085E               	movf	_u8BufferSize,w
  8546  058B  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
  8547  058C  0086               	movwf	6
  8548  058D  0187               	clrf	7
  8549  058E  0832               	movf	??_sendTxBuffer,w
  8550  058F  0081               	movwf	1
  8551                           
  8552                           ;modbusMS.c: 453: u8BufferSize++;
  8553  0590  3001               	movlw	1
  8554  0591  00B2               	movwf	??_sendTxBuffer
  8555  0592  0832               	movf	??_sendTxBuffer,w
  8556  0593  07DE               	addwf	_u8BufferSize,f
  8557                           
  8558                           ;modbusMS.c: 454: au8Buffer[ u8BufferSize ] = u16crc & 0x00ff;
  8559  0594  0836               	movf	sendTxBuffer@u16crc,w
  8560  0595  00B2               	movwf	??_sendTxBuffer
  8561  0596  085E               	movf	_u8BufferSize,w
  8562  0597  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
  8563  0598  0086               	movwf	6
  8564  0599  0187               	clrf	7
  8565  059A  0832               	movf	??_sendTxBuffer,w
  8566  059B  0081               	movwf	1
  8567                           
  8568                           ;modbusMS.c: 455: u8BufferSize++;
  8569  059C  3001               	movlw	1
  8570  059D  00B2               	movwf	??_sendTxBuffer
  8571  059E  0832               	movf	??_sendTxBuffer,w
  8572  059F  07DE               	addwf	_u8BufferSize,f
  8573                           
  8574                           ;modbusMS.c: 456: if(u8ID != 0 )
  8575  05A0  0860               	movf	_u8ID,w
  8576  05A1  1903               	btfsc	3,2
  8577  05A2  2DAF               	goto	l4578
  8578                           
  8579                           ;modbusMS.c: 457: {
  8580                           ;modbusMS.c: 458: au8Buffer[ u8BufferSize ] = '\r';
  8581  05A3  300D               	movlw	13
  8582  05A4  00B2               	movwf	??_sendTxBuffer
  8583  05A5  085E               	movf	_u8BufferSize,w
  8584  05A6  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
  8585  05A7  0086               	movwf	6
  8586  05A8  0187               	clrf	7
  8587  05A9  0832               	movf	??_sendTxBuffer,w
  8588  05AA  0081               	movwf	1
  8589                           
  8590                           ;modbusMS.c: 459: u8BufferSize++;
  8591  05AB  3001               	movlw	1
  8592  05AC  00B2               	movwf	??_sendTxBuffer
  8593  05AD  0832               	movf	??_sendTxBuffer,w
  8594  05AE  07DE               	addwf	_u8BufferSize,f
  8595  05AF                     l4578:	
  8596                           
  8597                           ;modbusMS.c: 460: }
  8598                           ;modbusMS.c: 469: for( i=0;i<u8BufferSize;i++)
  8599  05AF  01B8               	clrf	sendTxBuffer@i
  8600  05B0                     l4584:	
  8601  05B0  085E               	movf	_u8BufferSize,w
  8602  05B1  0238               	subwf	sendTxBuffer@i,w
  8603  05B2  1803               	btfsc	3,0
  8604  05B3  2DC2               	goto	l4586
  8605                           
  8606                           ;modbusMS.c: 470: Serialwrite(au8Buffer[i]);
  8607  05B4  0838               	movf	sendTxBuffer@i,w
  8608  05B5  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
  8609  05B6  0086               	movwf	6
  8610  05B7  0187               	clrf	7
  8611  05B8  0801               	movf	1,w
  8612  05B9  318A  22F6  3185   	fcall	_Serialwrite
  8613  05BC  3001               	movlw	1
  8614  05BD  0020               	movlb	0	; select bank0
  8615  05BE  00B2               	movwf	??_sendTxBuffer
  8616  05BF  0832               	movf	??_sendTxBuffer,w
  8617  05C0  07B8               	addwf	sendTxBuffer@i,f
  8618  05C1  2DB0               	goto	l4584
  8619  05C2                     l4586:	
  8620                           
  8621                           ;modbusMS.c: 480: u8BufferSize = 0;
  8622  05C2  01DE               	clrf	_u8BufferSize
  8623                           
  8624                           ;modbusMS.c: 483: u32timeOut = millis() + (unsigned long) u16timeOut;
  8625  05C3  0021               	movlb	1	; select bank1
  8626  05C4  084C               	movf	_u16timeOut^(0+128),w
  8627  05C5  0020               	movlb	0	; select bank0
  8628  05C6  00B2               	movwf	??_sendTxBuffer
  8629  05C7  0021               	movlb	1	; select bank1
  8630  05C8  084D               	movf	(_u16timeOut+1)^(0+128),w
  8631  05C9  0020               	movlb	0	; select bank0
  8632  05CA  00B3               	movwf	??_sendTxBuffer+1
  8633  05CB  01B4               	clrf	??_sendTxBuffer+2
  8634  05CC  01B5               	clrf	??_sendTxBuffer+3
  8635  05CD  318B  2385  3185   	fcall	_millis
  8636  05D0  0020               	movlb	0	; select bank0
  8637  05D1  0825               	movf	?_millis,w
  8638  05D2  07B2               	addwf	??_sendTxBuffer,f
  8639  05D3  0826               	movf	?_millis+1,w
  8640  05D4  3DB3               	addwfc	??_sendTxBuffer+1,f
  8641  05D5  0827               	movf	?_millis+2,w
  8642  05D6  3DB4               	addwfc	??_sendTxBuffer+2,f
  8643  05D7  0828               	movf	?_millis+3,w
  8644  05D8  3DB5               	addwfc	??_sendTxBuffer+3,f
  8645  05D9  0835               	movf	??_sendTxBuffer+3,w
  8646  05DA  0022               	movlb	2	; select bank2
  8647  05DB  00D1               	movwf	(_u32timeOut+3)^(0+256)
  8648  05DC  0020               	movlb	0	; select bank0
  8649  05DD  0834               	movf	??_sendTxBuffer+2,w
  8650  05DE  0022               	movlb	2	; select bank2
  8651  05DF  00D0               	movwf	(_u32timeOut+2)^(0+256)
  8652  05E0  0020               	movlb	0	; select bank0
  8653  05E1  0833               	movf	??_sendTxBuffer+1,w
  8654  05E2  0022               	movlb	2	; select bank2
  8655  05E3  00CF               	movwf	(_u32timeOut+1)^(0+256)
  8656  05E4  0020               	movlb	0	; select bank0
  8657  05E5  0832               	movf	??_sendTxBuffer,w
  8658  05E6  0022               	movlb	2	; select bank2
  8659  05E7  00CE               	movwf	_u32timeOut^(0+256)
  8660                           
  8661                           ;modbusMS.c: 486: u16OutCnt++;
  8662  05E8  3001               	movlw	1
  8663  05E9  07D8               	addwf	_u16OutCnt^(0+256),f
  8664  05EA  3000               	movlw	0
  8665  05EB  3DD9               	addwfc	(_u16OutCnt+1)^(0+256),f
  8666                           
  8667                           ;modbusMS.c: 488: if(u8ID != 0 )
  8668  05EC  0020               	movlb	0	; select bank0
  8669  05ED  0860               	movf	_u8ID,w
  8670  05EE  1903               	btfsc	3,2
  8671  05EF  0008               	return
  8672                           
  8673                           ;modbusMS.c: 489: {
  8674                           ;modbusMS.c: 490: PIR1bits.RCIF=0;
  8675  05F0  1291               	bcf	17,5	;volatile
  8676                           
  8677                           ;modbusMS.c: 491: PIE1bits.RCIE = 1;
  8678  05F1  0021               	movlb	1	; select bank1
  8679  05F2  1691               	bsf	17,5	;volatile
  8680                           
  8681                           ;modbusMS.c: 492: do { LATBbits.LATB6 = 0; } while(0);
  8682  05F3  0022               	movlb	2	; select bank2
  8683  05F4  130D               	bcf	13,6	;volatile
  8684                           
  8685                           ;modbusMS.c: 493: ClearSerialRxBuffer();
  8686  05F5  318B  234A         	fcall	_ClearSerialRxBuffer
  8687  05F7  0008               	return
  8688  05F8                     __end_of_sendTxBuffer:	
  8689                           
  8690                           	psect	text26
  8691  0B85                     __ptext26:	
  8692 ;; *************** function _millis *****************
  8693 ;; Defined at:
  8694 ;;		line 374 in file "main.c"
  8695 ;; Parameters:    Size  Location     Type
  8696 ;;		None
  8697 ;; Auto vars:     Size  Location     Type
  8698 ;;		None
  8699 ;; Return value:  Size  Location     Type
  8700 ;;                  4    5[BANK0 ] unsigned long 
  8701 ;; Registers used:
  8702 ;;		wreg
  8703 ;; Tracked objects:
  8704 ;;		On entry : 0/0
  8705 ;;		On exit  : 0/0
  8706 ;;		Unchanged: 0/0
  8707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8708 ;;      Params:         0       4       0       0       0       0       0       0
  8709 ;;      Locals:         0       0       0       0       0       0       0       0
  8710 ;;      Temps:          0       0       0       0       0       0       0       0
  8711 ;;      Totals:         0       4       0       0       0       0       0       0
  8712 ;;Total ram usage:        4 bytes
  8713 ;; Hardware stack levels used:    1
  8714 ;; Hardware stack levels required when called:    6
  8715 ;; This function calls:
  8716 ;;		Nothing
  8717 ;; This function is called by:
  8718 ;;		_ModbuspollSlave
  8719 ;;		_sendTxBuffer
  8720 ;;		_ModbuspollMaster
  8721 ;;		_ModbusgetTimeOutState
  8722 ;; This function uses a non-reentrant model
  8723 ;;
  8724                           
  8725                           
  8726                           ;psect for function _millis
  8727  0B85                     _millis:	
  8728                           
  8729                           ;main.c: 376: return TimertickMsec;
  8730                           
  8731                           ;incstack = 0
  8732                           ; Regs used in _millis: [wreg]
  8733  0B85  0021               	movlb	1	; select bank1
  8734  0B86  0847               	movf	(_TimertickMsec+3)^(0+128),w
  8735  0B87  0020               	movlb	0	; select bank0
  8736  0B88  00A8               	movwf	?_millis+3
  8737  0B89  0021               	movlb	1	; select bank1
  8738  0B8A  0846               	movf	(_TimertickMsec+2)^(0+128),w
  8739  0B8B  0020               	movlb	0	; select bank0
  8740  0B8C  00A7               	movwf	?_millis+2
  8741  0B8D  0021               	movlb	1	; select bank1
  8742  0B8E  0845               	movf	(_TimertickMsec+1)^(0+128),w
  8743  0B8F  0020               	movlb	0	; select bank0
  8744  0B90  00A6               	movwf	?_millis+1
  8745  0B91  0021               	movlb	1	; select bank1
  8746  0B92  0844               	movf	_TimertickMsec^(0+128),w
  8747  0B93  0020               	movlb	0	; select bank0
  8748  0B94  00A5               	movwf	?_millis
  8749  0B95  0008               	return
  8750  0B96                     __end_of_millis:	
  8751                           
  8752                           	psect	text27
  8753  0E33                     __ptext27:	
  8754 ;; *************** function _calcCRC *****************
  8755 ;; Defined at:
  8756 ;;		line 504 in file "modbusMS.c"
  8757 ;; Parameters:    Size  Location     Type
  8758 ;;  u8length        1    wreg     unsigned char 
  8759 ;; Auto vars:     Size  Location     Type
  8760 ;;  u8length        1    9[BANK0 ] unsigned char 
  8761 ;;  j               1   15[BANK0 ] unsigned char 
  8762 ;;  i               1   14[BANK0 ] unsigned char 
  8763 ;;  temp            2   16[BANK0 ] unsigned int 
  8764 ;;  flag            2   12[BANK0 ] unsigned int 
  8765 ;;  temp2           2   10[BANK0 ] unsigned int 
  8766 ;; Return value:  Size  Location     Type
  8767 ;;                  2    5[BANK0 ] unsigned int 
  8768 ;; Registers used:
  8769 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8770 ;; Tracked objects:
  8771 ;;		On entry : 0/0
  8772 ;;		On exit  : 0/0
  8773 ;;		Unchanged: 0/0
  8774 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8775 ;;      Params:         0       2       0       0       0       0       0       0
  8776 ;;      Locals:         0       9       0       0       0       0       0       0
  8777 ;;      Temps:          0       2       0       0       0       0       0       0
  8778 ;;      Totals:         0      13       0       0       0       0       0       0
  8779 ;;Total ram usage:       13 bytes
  8780 ;; Hardware stack levels used:    1
  8781 ;; Hardware stack levels required when called:    6
  8782 ;; This function calls:
  8783 ;;		Nothing
  8784 ;; This function is called by:
  8785 ;;		_sendTxBuffer
  8786 ;;		_validateRequest
  8787 ;;		_validateAnswer
  8788 ;; This function uses a non-reentrant model
  8789 ;;
  8790                           
  8791                           
  8792                           ;psect for function _calcCRC
  8793  0E33                     _calcCRC:	
  8794                           
  8795                           ;incstack = 0
  8796                           ; Regs used in _calcCRC: [wreg+fsr1l+fsr1h+status,2+status,0]
  8797                           ;calcCRC@u8length stored from wreg
  8798  0E33  0020               	movlb	0	; select bank0
  8799  0E34  00A9               	movwf	calcCRC@u8length
  8800                           
  8801                           ;modbusMS.c: 506: unsigned int temp, temp2, flag;
  8802                           ;modbusMS.c: 507: temp = 0xFFFF;
  8803  0E35  30FF               	movlw	255
  8804  0E36  00B0               	movwf	calcCRC@temp
  8805  0E37  30FF               	movlw	255
  8806  0E38  00B1               	movwf	calcCRC@temp+1
  8807                           
  8808                           ;modbusMS.c: 508: for (unsigned char i = 0; i < u8length; i++)
  8809  0E39  01AE               	clrf	calcCRC@i
  8810  0E3A                     l4536:	
  8811  0E3A  0829               	movf	calcCRC@u8length,w
  8812  0E3B  022E               	subwf	calcCRC@i,w
  8813  0E3C  1803               	btfsc	3,0
  8814  0E3D  2E6D               	goto	l4538
  8815                           
  8816                           ;modbusMS.c: 509: {
  8817                           ;modbusMS.c: 510: temp = temp ^ au8Buffer[i];
  8818  0E3E  082E               	movf	calcCRC@i,w
  8819  0E3F  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
  8820  0E40  0086               	movwf	6
  8821  0E41  0187               	clrf	7
  8822  0E42  0830               	movf	calcCRC@temp,w
  8823  0E43  0601               	xorwf	1,w
  8824  0E44  00B0               	movwf	calcCRC@temp
  8825  0E45  0831               	movf	calcCRC@temp+1,w
  8826  0E46  00B1               	movwf	calcCRC@temp+1
  8827                           
  8828                           ;modbusMS.c: 511: for (unsigned char j = 1; j <= 8; j++)
  8829  0E47  01AF               	clrf	calcCRC@j
  8830  0E48  0AAF               	incf	calcCRC@j,f
  8831  0E49  3009               	movlw	9
  8832  0E4A  022F               	subwf	calcCRC@j,w
  8833  0E4B  1803               	btfsc	3,0
  8834  0E4C  2E68               	goto	l4534
  8835  0E4D                     l4522:	
  8836                           
  8837                           ;modbusMS.c: 512: {
  8838                           ;modbusMS.c: 513: flag = temp & 0x0001;
  8839  0E4D  3001               	movlw	1
  8840  0E4E  0530               	andwf	calcCRC@temp,w
  8841  0E4F  00AC               	movwf	calcCRC@flag
  8842  0E50  3000               	movlw	0
  8843  0E51  0531               	andwf	calcCRC@temp+1,w
  8844  0E52  00AD               	movwf	calcCRC@flag+1
  8845                           
  8846                           ;modbusMS.c: 514: temp >>=1;
  8847  0E53  3001               	movlw	1
  8848  0E54                     u3795:	
  8849  0E54  36B1               	lsrf	calcCRC@temp+1,f
  8850  0E55  0CB0               	rrf	calcCRC@temp,f
  8851  0E56  0B89               	decfsz	9,f
  8852  0E57  2E54               	goto	u3795
  8853                           
  8854                           ;modbusMS.c: 515: if (flag)
  8855  0E58  082C               	movf	calcCRC@flag,w
  8856  0E59  042D               	iorwf	calcCRC@flag+1,w
  8857  0E5A  1903               	btfsc	3,2
  8858  0E5B  2E60               	goto	l4530
  8859                           
  8860                           ;modbusMS.c: 516: temp ^= 0xA001;
  8861  0E5C  3001               	movlw	1
  8862  0E5D  06B0               	xorwf	calcCRC@temp,f
  8863  0E5E  30A0               	movlw	160
  8864  0E5F  06B1               	xorwf	calcCRC@temp+1,f
  8865  0E60                     l4530:	
  8866  0E60  3001               	movlw	1
  8867  0E61  00A7               	movwf	??_calcCRC
  8868  0E62  0827               	movf	??_calcCRC,w
  8869  0E63  07AF               	addwf	calcCRC@j,f
  8870  0E64  3009               	movlw	9
  8871  0E65  022F               	subwf	calcCRC@j,w
  8872  0E66  1C03               	skipc
  8873  0E67  2E4D               	goto	l4522
  8874  0E68                     l4534:	
  8875  0E68  3001               	movlw	1
  8876  0E69  00A7               	movwf	??_calcCRC
  8877  0E6A  0827               	movf	??_calcCRC,w
  8878  0E6B  07AE               	addwf	calcCRC@i,f
  8879  0E6C  2E3A               	goto	l4536
  8880  0E6D                     l4538:	
  8881                           
  8882                           ;modbusMS.c: 517: }
  8883                           ;modbusMS.c: 518: }
  8884                           ;modbusMS.c: 520: temp2 = temp >> 8;
  8885  0E6D  0831               	movf	calcCRC@temp+1,w
  8886  0E6E  00A8               	movwf	??_calcCRC+1
  8887  0E6F  0830               	movf	calcCRC@temp,w
  8888  0E70  00A7               	movwf	??_calcCRC
  8889  0E71  0828               	movf	??_calcCRC+1,w
  8890  0E72  00A7               	movwf	??_calcCRC
  8891  0E73  01A8               	clrf	??_calcCRC+1
  8892  0E74  0827               	movf	??_calcCRC,w
  8893  0E75  00AA               	movwf	calcCRC@temp2
  8894  0E76  0828               	movf	??_calcCRC+1,w
  8895  0E77  00AB               	movwf	calcCRC@temp2+1
  8896                           
  8897                           ;modbusMS.c: 521: temp = (temp << 8) | temp2;
  8898  0E78  0830               	movf	calcCRC@temp,w
  8899  0E79  00A8               	movwf	??_calcCRC+1
  8900  0E7A  01A7               	clrf	??_calcCRC
  8901  0E7B  082A               	movf	calcCRC@temp2,w
  8902  0E7C  0427               	iorwf	??_calcCRC,w
  8903  0E7D  00B0               	movwf	calcCRC@temp
  8904  0E7E  082B               	movf	calcCRC@temp2+1,w
  8905  0E7F  0428               	iorwf	??_calcCRC+1,w
  8906  0E80  00B1               	movwf	calcCRC@temp+1
  8907                           
  8908                           ;modbusMS.c: 525: return temp;
  8909  0E81  0831               	movf	calcCRC@temp+1,w
  8910  0E82  00A6               	movwf	?_calcCRC+1
  8911  0E83  0830               	movf	calcCRC@temp,w
  8912  0E84  00A5               	movwf	?_calcCRC
  8913  0E85  0008               	return
  8914  0E86                     __end_of_calcCRC:	
  8915                           
  8916                           	psect	text28
  8917  0AF6                     __ptext28:	
  8918 ;; *************** function _Serialwrite *****************
  8919 ;; Defined at:
  8920 ;;		line 461 in file "main.c"
  8921 ;; Parameters:    Size  Location     Type
  8922 ;;  temp            1    wreg     unsigned char 
  8923 ;; Auto vars:     Size  Location     Type
  8924 ;;  temp            1    5[BANK0 ] unsigned char 
  8925 ;; Return value:  Size  Location     Type
  8926 ;;                  1    wreg      void 
  8927 ;; Registers used:
  8928 ;;		wreg
  8929 ;; Tracked objects:
  8930 ;;		On entry : 0/0
  8931 ;;		On exit  : 0/0
  8932 ;;		Unchanged: 0/0
  8933 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8934 ;;      Params:         0       0       0       0       0       0       0       0
  8935 ;;      Locals:         0       1       0       0       0       0       0       0
  8936 ;;      Temps:          0       0       0       0       0       0       0       0
  8937 ;;      Totals:         0       1       0       0       0       0       0       0
  8938 ;;Total ram usage:        1 bytes
  8939 ;; Hardware stack levels used:    1
  8940 ;; Hardware stack levels required when called:    6
  8941 ;; This function calls:
  8942 ;;		Nothing
  8943 ;; This function is called by:
  8944 ;;		_sendTxBuffer
  8945 ;; This function uses a non-reentrant model
  8946 ;;
  8947                           
  8948                           
  8949                           ;psect for function _Serialwrite
  8950  0AF6                     _Serialwrite:	
  8951                           
  8952                           ;incstack = 0
  8953                           ; Regs used in _Serialwrite: [wreg]
  8954                           ;Serialwrite@temp stored from wreg
  8955  0AF6  0020               	movlb	0	; select bank0
  8956  0AF7  00A5               	movwf	Serialwrite@temp
  8957                           
  8958                           ;main.c: 464: PIR1bits.TXIF=0;
  8959  0AF8  1211               	bcf	17,4	;volatile
  8960                           
  8961                           ;main.c: 465: TX1REG = temp;
  8962  0AF9  0825               	movf	Serialwrite@temp,w
  8963  0AFA  0023               	movlb	3	; select bank3
  8964  0AFB  009A               	movwf	26	;volatile
  8965  0AFC                     l590:	
  8966                           ;main.c: 467: {
  8967                           
  8968                           ;main.c: 466: while(0 == PIR1bits.TXIF)
  8969                           
  8970  0AFC  0020               	movlb	0	; select bank0
  8971  0AFD  1A11               	btfsc	17,4	;volatile
  8972  0AFE  0008               	return
  8973  0AFF  2AFC               	goto	l590
  8974  0B00                     __end_of_Serialwrite:	
  8975                           
  8976                           	psect	text29
  8977  0B4A                     __ptext29:	
  8978 ;; *************** function _ClearSerialRxBuffer *****************
  8979 ;; Defined at:
  8980 ;;		line 445 in file "main.c"
  8981 ;; Parameters:    Size  Location     Type
  8982 ;;		None
  8983 ;; Auto vars:     Size  Location     Type
  8984 ;;  bdummy          1    8[BANK0 ] unsigned char 
  8985 ;; Return value:  Size  Location     Type
  8986 ;;                  1    wreg      void 
  8987 ;; Registers used:
  8988 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8989 ;; Tracked objects:
  8990 ;;		On entry : 0/0
  8991 ;;		On exit  : 0/0
  8992 ;;		Unchanged: 0/0
  8993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  8994 ;;      Params:         0       0       0       0       0       0       0       0
  8995 ;;      Locals:         0       1       0       0       0       0       0       0
  8996 ;;      Temps:          0       1       0       0       0       0       0       0
  8997 ;;      Totals:         0       2       0       0       0       0       0       0
  8998 ;;Total ram usage:        2 bytes
  8999 ;; Hardware stack levels used:    1
  9000 ;; Hardware stack levels required when called:    7
  9001 ;; This function calls:
  9002 ;;		_EUSART_Read
  9003 ;; This function is called by:
  9004 ;;		_sendTxBuffer
  9005 ;;		_Modbusquery
  9006 ;; This function uses a non-reentrant model
  9007 ;;
  9008                           
  9009                           
  9010                           ;psect for function _ClearSerialRxBuffer
  9011  0B4A                     _ClearSerialRxBuffer:	
  9012  0B4A                     l4502:	
  9013                           ;main.c: 447: unsigned char bdummy;
  9014                           ;main.c: 448: while(eusartRxCount)
  9015                           
  9016                           ;incstack = 0
  9017                           ; Regs used in _ClearSerialRxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9018                           
  9019  0B4A  0020               	movlb	0	; select bank0
  9020  0B4B  0864               	movf	_eusartRxCount,w	;volatile
  9021  0B4C  1903               	btfsc	3,2
  9022  0B4D  2B56               	goto	l4504
  9023                           
  9024                           ;main.c: 449: {
  9025                           ;main.c: 450: bdummy=EUSART_Read();
  9026  0B4E  318C  24D9  318B   	fcall	_EUSART_Read
  9027  0B51  0020               	movlb	0	; select bank0
  9028  0B52  00A7               	movwf	??_ClearSerialRxBuffer
  9029  0B53  0827               	movf	??_ClearSerialRxBuffer,w
  9030  0B54  00A8               	movwf	ClearSerialRxBuffer@bdummy
  9031  0B55  2B4A               	goto	l4502
  9032  0B56                     l4504:	
  9033                           
  9034                           ;main.c: 451: }
  9035                           ;main.c: 452: eusartRxCount=0;
  9036  0B56  01E4               	clrf	_eusartRxCount	;volatile
  9037  0B57  0008               	return
  9038  0B58                     __end_of_ClearSerialRxBuffer:	
  9039                           
  9040                           	psect	text30
  9041  0D41                     __ptext30:	
  9042 ;; *************** function _getRxBuffer *****************
  9043 ;; Defined at:
  9044 ;;		line 401 in file "modbusMS.c"
  9045 ;; Parameters:    Size  Location     Type
  9046 ;;		None
  9047 ;; Auto vars:     Size  Location     Type
  9048 ;;  bBuffOverflo    1    8[BANK0 ] unsigned char 
  9049 ;; Return value:  Size  Location     Type
  9050 ;;                  1    wreg      char 
  9051 ;; Registers used:
  9052 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9053 ;; Tracked objects:
  9054 ;;		On entry : 0/0
  9055 ;;		On exit  : 0/0
  9056 ;;		Unchanged: 0/0
  9057 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9058 ;;      Params:         0       0       0       0       0       0       0       0
  9059 ;;      Locals:         0       1       0       0       0       0       0       0
  9060 ;;      Temps:          0       1       0       0       0       0       0       0
  9061 ;;      Totals:         0       2       0       0       0       0       0       0
  9062 ;;Total ram usage:        2 bytes
  9063 ;; Hardware stack levels used:    1
  9064 ;; Hardware stack levels required when called:    8
  9065 ;; This function calls:
  9066 ;;		_Serialavailable
  9067 ;;		_Serialread
  9068 ;; This function is called by:
  9069 ;;		_ModbuspollSlave
  9070 ;;		_ModbuspollMaster
  9071 ;; This function uses a non-reentrant model
  9072 ;;
  9073                           
  9074                           
  9075                           ;psect for function _getRxBuffer
  9076  0D41                     _getRxBuffer:	
  9077                           
  9078                           ;modbusMS.c: 403: bool bBuffOverflow = 0;
  9079                           
  9080                           ;incstack = 0
  9081                           ; Regs used in _getRxBuffer: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9082  0D41  0020               	movlb	0	; select bank0
  9083  0D42  01A8               	clrf	getRxBuffer@bBuffOverflow
  9084                           
  9085                           ;modbusMS.c: 407: u8BufferSize = 0;
  9086  0D43  01DE               	clrf	_u8BufferSize
  9087  0D44                     l4612:	
  9088                           ;modbusMS.c: 409: while ( Serialavailable())
  9089                           
  9090  0D44  318A  22A9  318D   	fcall	_Serialavailable
  9091  0D47  3A00               	xorlw	0
  9092  0D48  1903               	btfsc	3,2
  9093  0D49  2D60               	goto	l4614
  9094                           
  9095                           ;modbusMS.c: 410: {
  9096                           ;modbusMS.c: 411: au8Buffer[ u8BufferSize ] = Serialread();
  9097  0D4A  318A  22AC  318D   	fcall	_Serialread
  9098  0D4D  0020               	movlb	0	; select bank0
  9099  0D4E  00A7               	movwf	??_getRxBuffer
  9100  0D4F  085E               	movf	_u8BufferSize,w
  9101  0D50  3EA0               	addlw	(low (_au8Buffer| 0))& (0+255)
  9102  0D51  0086               	movwf	6
  9103  0D52  0187               	clrf	7
  9104  0D53  0827               	movf	??_getRxBuffer,w
  9105  0D54  0081               	movwf	1
  9106                           
  9107                           ;modbusMS.c: 415: u8BufferSize ++;
  9108  0D55  3001               	movlw	1
  9109  0D56  00A7               	movwf	??_getRxBuffer
  9110  0D57  0827               	movf	??_getRxBuffer,w
  9111  0D58  07DE               	addwf	_u8BufferSize,f
  9112                           
  9113                           ;modbusMS.c: 417: if (u8BufferSize >= 32) bBuffOverflow = 1;
  9114  0D59  3020               	movlw	32
  9115  0D5A  025E               	subwf	_u8BufferSize,w
  9116  0D5B  1C03               	skipc
  9117  0D5C  2D44               	goto	l4612
  9118  0D5D  01A8               	clrf	getRxBuffer@bBuffOverflow
  9119  0D5E  0AA8               	incf	getRxBuffer@bBuffOverflow,f
  9120  0D5F  2D44               	goto	l4612
  9121  0D60                     l4614:	
  9122                           
  9123                           ;modbusMS.c: 418: }
  9124                           ;modbusMS.c: 420: u16InCnt++;
  9125  0D60  3001               	movlw	1
  9126  0D61  0021               	movlb	1	; select bank1
  9127  0D62  07CE               	addwf	_u16InCnt^(0+128),f
  9128  0D63  3000               	movlw	0
  9129  0D64  3DCF               	addwfc	(_u16InCnt+1)^(0+128),f
  9130                           
  9131                           ;modbusMS.c: 422: if (bBuffOverflow)
  9132  0D65  0020               	movlb	0	; select bank0
  9133  0D66  0828               	movf	getRxBuffer@bBuffOverflow,w
  9134  0D67  1903               	btfsc	3,2
  9135  0D68  2D70               	goto	l4622
  9136                           
  9137                           ;modbusMS.c: 423: {
  9138                           ;modbusMS.c: 424: u16errCnt++;
  9139  0D69  3001               	movlw	1
  9140  0D6A  0022               	movlb	2	; select bank2
  9141  0D6B  07D6               	addwf	_u16errCnt^(0+256),f
  9142  0D6C  3000               	movlw	0
  9143  0D6D  3DD7               	addwfc	(_u16errCnt+1)^(0+256),f
  9144                           
  9145                           ;modbusMS.c: 425: return ERR_BUFF_OVERFLOW;
  9146  0D6E  30FD               	movlw	253
  9147  0D6F  0008               	return
  9148  0D70                     l4622:	
  9149                           
  9150                           ;modbusMS.c: 426: }
  9151                           ;modbusMS.c: 427: return u8BufferSize;
  9152  0D70  0020               	movlb	0	; select bank0
  9153  0D71  085E               	movf	_u8BufferSize,w
  9154  0D72  0008               	return
  9155  0D73                     __end_of_getRxBuffer:	
  9156                           
  9157                           	psect	text31
  9158  0AAC                     __ptext31:	
  9159 ;; *************** function _Serialread *****************
  9160 ;; Defined at:
  9161 ;;		line 457 in file "main.c"
  9162 ;; Parameters:    Size  Location     Type
  9163 ;;		None
  9164 ;; Auto vars:     Size  Location     Type
  9165 ;;		None
  9166 ;; Return value:  Size  Location     Type
  9167 ;;                  1    wreg      unsigned char 
  9168 ;; Registers used:
  9169 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9170 ;; Tracked objects:
  9171 ;;		On entry : 0/0
  9172 ;;		On exit  : 0/0
  9173 ;;		Unchanged: 0/0
  9174 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9175 ;;      Params:         0       0       0       0       0       0       0       0
  9176 ;;      Locals:         0       0       0       0       0       0       0       0
  9177 ;;      Temps:          0       0       0       0       0       0       0       0
  9178 ;;      Totals:         0       0       0       0       0       0       0       0
  9179 ;;Total ram usage:        0 bytes
  9180 ;; Hardware stack levels used:    1
  9181 ;; Hardware stack levels required when called:    7
  9182 ;; This function calls:
  9183 ;;		_EUSART_Read
  9184 ;; This function is called by:
  9185 ;;		_getRxBuffer
  9186 ;; This function uses a non-reentrant model
  9187 ;;
  9188                           
  9189                           
  9190                           ;psect for function _Serialread
  9191  0AAC                     _Serialread:	
  9192                           
  9193                           ;main.c: 459: return EUSART_Read();
  9194                           
  9195                           ;incstack = 0
  9196                           ; Regs used in _Serialread: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9197  0AAC  318C  24D9         	fcall	_EUSART_Read
  9198  0AAE  0008               	return
  9199  0AAF                     __end_of_Serialread:	
  9200                           
  9201                           	psect	text32
  9202  0CD9                     __ptext32:	
  9203 ;; *************** function _EUSART_Read *****************
  9204 ;; Defined at:
  9205 ;;		line 112 in file "mcc_generated_files/eusart.c"
  9206 ;; Parameters:    Size  Location     Type
  9207 ;;		None
  9208 ;; Auto vars:     Size  Location     Type
  9209 ;;  readValue       1    6[BANK0 ] unsigned char 
  9210 ;; Return value:  Size  Location     Type
  9211 ;;                  1    wreg      unsigned char 
  9212 ;; Registers used:
  9213 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  9214 ;; Tracked objects:
  9215 ;;		On entry : 0/0
  9216 ;;		On exit  : 0/0
  9217 ;;		Unchanged: 0/0
  9218 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9219 ;;      Params:         0       0       0       0       0       0       0       0
  9220 ;;      Locals:         0       1       0       0       0       0       0       0
  9221 ;;      Temps:          0       1       0       0       0       0       0       0
  9222 ;;      Totals:         0       2       0       0       0       0       0       0
  9223 ;;Total ram usage:        2 bytes
  9224 ;; Hardware stack levels used:    1
  9225 ;; Hardware stack levels required when called:    6
  9226 ;; This function calls:
  9227 ;;		Nothing
  9228 ;; This function is called by:
  9229 ;;		_ClearSerialRxBuffer
  9230 ;;		_Serialread
  9231 ;; This function uses a non-reentrant model
  9232 ;;
  9233                           
  9234                           
  9235                           ;psect for function _EUSART_Read
  9236  0CD9                     _EUSART_Read:	
  9237                           
  9238                           ;eusart.c: 114: uint8_t readValue = 0;
  9239                           
  9240                           ;incstack = 0
  9241                           ; Regs used in _EUSART_Read: [wreg+fsr1l+fsr1h+status,2+status,0]
  9242  0CD9  0020               	movlb	0	; select bank0
  9243  0CDA  01A6               	clrf	EUSART_Read@readValue
  9244  0CDB                     l4474:	
  9245                           ;eusart.c: 117: {
  9246                           
  9247                           ;eusart.c: 116: while(0 == eusartRxCount)
  9248                           
  9249  0CDB  0864               	movf	_eusartRxCount,w	;volatile
  9250  0CDC  1903               	btfsc	3,2
  9251  0CDD  2CDB               	goto	l4474
  9252                           
  9253                           ;eusart.c: 118: }
  9254                           ;eusart.c: 120: readValue = eusartRxBuffer[eusartRxTail++];
  9255  0CDE  0865               	movf	_eusartRxTail,w
  9256  0CDF  3EA0               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
  9257  0CE0  0086               	movwf	6
  9258  0CE1  3001               	movlw	1	; select bank3/4
  9259  0CE2  0087               	movwf	7
  9260  0CE3  0801               	movf	1,w
  9261  0CE4  00A5               	movwf	??_EUSART_Read
  9262  0CE5  0825               	movf	??_EUSART_Read,w
  9263  0CE6  00A6               	movwf	EUSART_Read@readValue
  9264  0CE7  3001               	movlw	1
  9265  0CE8  00A5               	movwf	??_EUSART_Read
  9266  0CE9  0825               	movf	??_EUSART_Read,w
  9267  0CEA  07E5               	addwf	_eusartRxTail,f	;volatile
  9268                           
  9269                           ;eusart.c: 121: if(sizeof(eusartRxBuffer) <= eusartRxTail)
  9270  0CEB  3020               	movlw	32
  9271  0CEC  0265               	subwf	_eusartRxTail,w	;volatile
  9272  0CED  1803               	btfsc	3,0
  9273                           
  9274                           ;eusart.c: 122: {
  9275                           ;eusart.c: 123: eusartRxTail = 0;
  9276  0CEE  01E5               	clrf	_eusartRxTail	;volatile
  9277                           
  9278                           ;eusart.c: 124: }
  9279                           ;eusart.c: 125: PIE1bits.RCIE = 0;
  9280  0CEF  0021               	movlb	1	; select bank1
  9281  0CF0  1291               	bcf	17,5	;volatile
  9282                           
  9283                           ;eusart.c: 126: eusartRxCount--;
  9284  0CF1  3001               	movlw	1
  9285  0CF2  0020               	movlb	0	; select bank0
  9286  0CF3  02E4               	subwf	_eusartRxCount,f	;volatile
  9287                           
  9288                           ;eusart.c: 127: PIE1bits.RCIE = 1;
  9289  0CF4  0021               	movlb	1	; select bank1
  9290  0CF5  1691               	bsf	17,5	;volatile
  9291                           
  9292                           ;eusart.c: 129: return readValue;
  9293  0CF6  0020               	movlb	0	; select bank0
  9294  0CF7  0826               	movf	EUSART_Read@readValue,w
  9295  0CF8  0008               	return
  9296  0CF9                     __end_of_EUSART_Read:	
  9297                           
  9298                           	psect	text33
  9299  0AA9                     __ptext33:	
  9300 ;; *************** function _Serialavailable *****************
  9301 ;; Defined at:
  9302 ;;		line 440 in file "main.c"
  9303 ;; Parameters:    Size  Location     Type
  9304 ;;		None
  9305 ;; Auto vars:     Size  Location     Type
  9306 ;;		None
  9307 ;; Return value:  Size  Location     Type
  9308 ;;                  1    wreg      unsigned char 
  9309 ;; Registers used:
  9310 ;;		wreg
  9311 ;; Tracked objects:
  9312 ;;		On entry : 0/0
  9313 ;;		On exit  : 0/0
  9314 ;;		Unchanged: 0/0
  9315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9316 ;;      Params:         0       0       0       0       0       0       0       0
  9317 ;;      Locals:         0       0       0       0       0       0       0       0
  9318 ;;      Temps:          0       0       0       0       0       0       0       0
  9319 ;;      Totals:         0       0       0       0       0       0       0       0
  9320 ;;Total ram usage:        0 bytes
  9321 ;; Hardware stack levels used:    1
  9322 ;; Hardware stack levels required when called:    6
  9323 ;; This function calls:
  9324 ;;		Nothing
  9325 ;; This function is called by:
  9326 ;;		_ModbuspollSlave
  9327 ;;		_getRxBuffer
  9328 ;;		_ModbuspollMaster
  9329 ;; This function uses a non-reentrant model
  9330 ;;
  9331                           
  9332                           
  9333                           ;psect for function _Serialavailable
  9334  0AA9                     _Serialavailable:	
  9335                           
  9336                           ;main.c: 442: return eusartRxCount;
  9337                           
  9338                           ;incstack = 0
  9339                           ; Regs used in _Serialavailable: [wreg]
  9340  0AA9  0020               	movlb	0	; select bank0
  9341  0AAA  0864               	movf	_eusartRxCount,w	;volatile
  9342  0AAB  0008               	return
  9343  0AAC                     __end_of_Serialavailable:	
  9344                           
  9345                           	psect	text34
  9346  0CB9                     __ptext34:	
  9347 ;; *************** function _buildException *****************
  9348 ;; Defined at:
  9349 ;;		line 649 in file "modbusMS.c"
  9350 ;; Parameters:    Size  Location     Type
  9351 ;;  u8exception     1    wreg     unsigned char 
  9352 ;; Auto vars:     Size  Location     Type
  9353 ;;  u8exception     1    6[BANK0 ] unsigned char 
  9354 ;;  u8func          1    7[BANK0 ] unsigned char 
  9355 ;; Return value:  Size  Location     Type
  9356 ;;                  1    wreg      void 
  9357 ;; Registers used:
  9358 ;;		wreg, status,2, status,0
  9359 ;; Tracked objects:
  9360 ;;		On entry : 0/0
  9361 ;;		On exit  : 0/0
  9362 ;;		Unchanged: 0/0
  9363 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9364 ;;      Params:         0       0       0       0       0       0       0       0
  9365 ;;      Locals:         0       2       0       0       0       0       0       0
  9366 ;;      Temps:          0       1       0       0       0       0       0       0
  9367 ;;      Totals:         0       3       0       0       0       0       0       0
  9368 ;;Total ram usage:        3 bytes
  9369 ;; Hardware stack levels used:    1
  9370 ;; Hardware stack levels required when called:    6
  9371 ;; This function calls:
  9372 ;;		Nothing
  9373 ;; This function is called by:
  9374 ;;		_ModbuspollSlave
  9375 ;; This function uses a non-reentrant model
  9376 ;;
  9377                           
  9378                           
  9379                           ;psect for function _buildException
  9380  0CB9                     _buildException:	
  9381                           
  9382                           ;incstack = 0
  9383                           ; Regs used in _buildException: [wreg+status,2+status,0]
  9384                           ;buildException@u8exception stored from wreg
  9385  0CB9  0020               	movlb	0	; select bank0
  9386  0CBA  00A6               	movwf	buildException@u8exception
  9387                           
  9388                           ;modbusMS.c: 651: unsigned char u8func = au8Buffer[ FUNC ];
  9389  0CBB  0021               	movlb	1	; select bank1
  9390  0CBC  0821               	movf	(_au8Buffer^(0+128)+1),w
  9391  0CBD  0020               	movlb	0	; select bank0
  9392  0CBE  00A5               	movwf	??_buildException
  9393  0CBF  0825               	movf	??_buildException,w
  9394  0CC0  00A7               	movwf	buildException@u8func
  9395                           
  9396                           ;modbusMS.c: 653: au8Buffer[ ID ] = u8ID;
  9397  0CC1  0860               	movf	_u8ID,w
  9398  0CC2  00A5               	movwf	??_buildException
  9399  0CC3  0825               	movf	??_buildException,w
  9400  0CC4  0021               	movlb	1	; select bank1
  9401  0CC5  00A0               	movwf	_au8Buffer^(0+128)
  9402                           
  9403                           ;modbusMS.c: 654: au8Buffer[ FUNC ] = u8func + 0x80;
  9404  0CC6  0020               	movlb	0	; select bank0
  9405  0CC7  0827               	movf	buildException@u8func,w
  9406  0CC8  3E80               	addlw	128
  9407  0CC9  00A5               	movwf	??_buildException
  9408  0CCA  0825               	movf	??_buildException,w
  9409  0CCB  0021               	movlb	1	; select bank1
  9410  0CCC  00A1               	movwf	(_au8Buffer^(0+128)+1)
  9411                           
  9412                           ;modbusMS.c: 655: au8Buffer[ 2 ] = u8exception;
  9413  0CCD  0020               	movlb	0	; select bank0
  9414  0CCE  0826               	movf	buildException@u8exception,w
  9415  0CCF  00A5               	movwf	??_buildException
  9416  0CD0  0825               	movf	??_buildException,w
  9417  0CD1  0021               	movlb	1	; select bank1
  9418  0CD2  00A2               	movwf	(_au8Buffer^(0+128)+2)
  9419                           
  9420                           ;modbusMS.c: 656: u8BufferSize = EXCEPTION_SIZE;
  9421  0CD3  3003               	movlw	3
  9422  0CD4  0020               	movlb	0	; select bank0
  9423  0CD5  00A5               	movwf	??_buildException
  9424  0CD6  0825               	movf	??_buildException,w
  9425  0CD7  00DE               	movwf	_u8BufferSize
  9426  0CD8  0008               	return
  9427  0CD9                     __end_of_buildException:	
  9428                           
  9429                           	psect	text35
  9430  0CF9                     __ptext35:	
  9431 ;; *************** function _Modbusinit *****************
  9432 ;; Defined at:
  9433 ;;		line 53 in file "modbusMS.c"
  9434 ;; Parameters:    Size  Location     Type
  9435 ;;  u8id            1    wreg     unsigned char 
  9436 ;; Auto vars:     Size  Location     Type
  9437 ;;  u8id            1   11[BANK0 ] unsigned char 
  9438 ;; Return value:  Size  Location     Type
  9439 ;;                  1    wreg      void 
  9440 ;; Registers used:
  9441 ;;		wreg, status,2, status,0, pclath, cstack
  9442 ;; Tracked objects:
  9443 ;;		On entry : 0/0
  9444 ;;		On exit  : 0/0
  9445 ;;		Unchanged: 0/0
  9446 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9447 ;;      Params:         0       0       0       0       0       0       0       0
  9448 ;;      Locals:         0       1       0       0       0       0       0       0
  9449 ;;      Temps:          0       1       0       0       0       0       0       0
  9450 ;;      Totals:         0       2       0       0       0       0       0       0
  9451 ;;Total ram usage:        2 bytes
  9452 ;; Hardware stack levels used:    1
  9453 ;; Hardware stack levels required when called:    8
  9454 ;; This function calls:
  9455 ;;		_Serialbegin
  9456 ;; This function is called by:
  9457 ;;		_main
  9458 ;; This function uses a non-reentrant model
  9459 ;;
  9460                           
  9461                           
  9462                           ;psect for function _Modbusinit
  9463  0CF9                     _Modbusinit:	
  9464                           
  9465                           ;incstack = 0
  9466                           ; Regs used in _Modbusinit: [wreg+status,2+status,0+pclath+cstack]
  9467                           ;Modbusinit@u8id stored from wreg
  9468  0CF9  0020               	movlb	0	; select bank0
  9469  0CFA  00AB               	movwf	Modbusinit@u8id
  9470                           
  9471                           ;modbusMS.c: 55: u8ID = u8id;
  9472  0CFB  082B               	movf	Modbusinit@u8id,w
  9473  0CFC  00AA               	movwf	??_Modbusinit
  9474  0CFD  082A               	movf	??_Modbusinit,w
  9475  0CFE  00E0               	movwf	_u8ID
  9476                           
  9477                           ;modbusMS.c: 58: u16timeOut = 1000;
  9478  0CFF  30E8               	movlw	232
  9479  0D00  0021               	movlb	1	; select bank1
  9480  0D01  00CC               	movwf	_u16timeOut^(0+128)
  9481  0D02  3003               	movlw	3
  9482  0D03  00CD               	movwf	(_u16timeOut^(0+128)+1)
  9483                           
  9484                           ;modbusMS.c: 60: Serialbegin(115200);
  9485  0D04  3000               	movlw	0
  9486  0D05  0020               	movlb	0	; select bank0
  9487  0D06  00A9               	movwf	Serialbegin@baud+3
  9488  0D07  3001               	movlw	1
  9489  0D08  00A8               	movwf	Serialbegin@baud+2
  9490  0D09  30C2               	movlw	194
  9491  0D0A  00A7               	movwf	Serialbegin@baud+1
  9492  0D0B  3000               	movlw	0
  9493  0D0C  00A6               	movwf	Serialbegin@baud
  9494  0D0D  318A  22A6         	fcall	_Serialbegin
  9495                           
  9496                           ;modbusMS.c: 63: u8lastRec = u8BufferSize = 0;
  9497  0D0F  0020               	movlb	0	; select bank0
  9498  0D10  01DE               	clrf	_u8BufferSize
  9499  0D11  01DD               	clrf	_u8lastRec
  9500                           
  9501                           ;modbusMS.c: 64: u16InCnt = u16OutCnt = u16errCnt = 0;
  9502  0D12  0022               	movlb	2	; select bank2
  9503  0D13  01D6               	clrf	_u16errCnt^(0+256)
  9504  0D14  01D7               	clrf	(_u16errCnt+1)^(0+256)
  9505  0D15  01D8               	clrf	_u16OutCnt^(0+256)
  9506  0D16  01D9               	clrf	(_u16OutCnt+1)^(0+256)
  9507  0D17  0021               	movlb	1	; select bank1
  9508  0D18  01CE               	clrf	_u16InCnt^(0+128)
  9509  0D19  01CF               	clrf	(_u16InCnt+1)^(0+128)
  9510  0D1A  0008               	return
  9511  0D1B                     __end_of_Modbusinit:	
  9512                           
  9513                           	psect	text36
  9514  0AA6                     __ptext36:	
  9515 ;; *************** function _Serialbegin *****************
  9516 ;; Defined at:
  9517 ;;		line 436 in file "main.c"
  9518 ;; Parameters:    Size  Location     Type
  9519 ;;  baud            4    6[BANK0 ] unsigned long 
  9520 ;; Auto vars:     Size  Location     Type
  9521 ;;		None
  9522 ;; Return value:  Size  Location     Type
  9523 ;;                  1    wreg      void 
  9524 ;; Registers used:
  9525 ;;		wreg, status,2, status,0, pclath, cstack
  9526 ;; Tracked objects:
  9527 ;;		On entry : 0/0
  9528 ;;		On exit  : 0/0
  9529 ;;		Unchanged: 0/0
  9530 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9531 ;;      Params:         0       4       0       0       0       0       0       0
  9532 ;;      Locals:         0       0       0       0       0       0       0       0
  9533 ;;      Temps:          0       0       0       0       0       0       0       0
  9534 ;;      Totals:         0       4       0       0       0       0       0       0
  9535 ;;Total ram usage:        4 bytes
  9536 ;; Hardware stack levels used:    1
  9537 ;; Hardware stack levels required when called:    7
  9538 ;; This function calls:
  9539 ;;		_EUSART_Initialize
  9540 ;; This function is called by:
  9541 ;;		_Modbusinit
  9542 ;; This function uses a non-reentrant model
  9543 ;;
  9544                           
  9545                           
  9546                           ;psect for function _Serialbegin
  9547  0AA6                     _Serialbegin:	
  9548                           
  9549                           ;main.c: 438: EUSART_Initialize();
  9550                           
  9551                           ;incstack = 0
  9552                           ; Regs used in _Serialbegin: [wreg+status,2+status,0+pclath+cstack]
  9553  0AA6  318C  2413         	fcall	_EUSART_Initialize
  9554  0AA8  0008               	return
  9555  0AA9                     __end_of_Serialbegin:	
  9556                           
  9557                           	psect	text37
  9558  0C13                     __ptext37:	
  9559 ;; *************** function _EUSART_Initialize *****************
  9560 ;; Defined at:
  9561 ;;		line 75 in file "mcc_generated_files/eusart.c"
  9562 ;; Parameters:    Size  Location     Type
  9563 ;;		None
  9564 ;; Auto vars:     Size  Location     Type
  9565 ;;		None
  9566 ;; Return value:  Size  Location     Type
  9567 ;;                  1    wreg      void 
  9568 ;; Registers used:
  9569 ;;		wreg, status,2
  9570 ;; Tracked objects:
  9571 ;;		On entry : 0/0
  9572 ;;		On exit  : 0/0
  9573 ;;		Unchanged: 0/0
  9574 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9575 ;;      Params:         0       0       0       0       0       0       0       0
  9576 ;;      Locals:         0       0       0       0       0       0       0       0
  9577 ;;      Temps:          0       1       0       0       0       0       0       0
  9578 ;;      Totals:         0       1       0       0       0       0       0       0
  9579 ;;Total ram usage:        1 bytes
  9580 ;; Hardware stack levels used:    1
  9581 ;; Hardware stack levels required when called:    6
  9582 ;; This function calls:
  9583 ;;		Nothing
  9584 ;; This function is called by:
  9585 ;;		_SYSTEM_Initialize
  9586 ;;		_Serialbegin
  9587 ;; This function uses a non-reentrant model
  9588 ;;
  9589                           
  9590                           
  9591                           ;psect for function _EUSART_Initialize
  9592  0C13                     _EUSART_Initialize:	
  9593                           
  9594                           ;eusart.c: 78: PIE1bits.RCIE = 0;
  9595                           
  9596                           ;incstack = 0
  9597                           ; Regs used in _EUSART_Initialize: [wreg+status,2]
  9598  0C13  0021               	movlb	1	; select bank1
  9599  0C14  1291               	bcf	17,5	;volatile
  9600                           
  9601                           ;eusart.c: 79: PIE1bits.TXIE = 0;
  9602  0C15  1211               	bcf	17,4	;volatile
  9603                           
  9604                           ;eusart.c: 84: BAUD1CON = 0x08;
  9605  0C16  3008               	movlw	8
  9606  0C17  0023               	movlb	3	; select bank3
  9607  0C18  009F               	movwf	31	;volatile
  9608                           
  9609                           ;eusart.c: 87: RC1STA = 0x90;
  9610  0C19  3090               	movlw	144
  9611  0C1A  009D               	movwf	29	;volatile
  9612                           
  9613                           ;eusart.c: 90: TX1STA = 0x24;
  9614  0C1B  3024               	movlw	36
  9615  0C1C  009E               	movwf	30	;volatile
  9616                           
  9617                           ;eusart.c: 93: SP1BRGL = 0x44;
  9618  0C1D  3044               	movlw	68
  9619  0C1E  009B               	movwf	27	;volatile
  9620                           
  9621                           ;eusart.c: 96: SP1BRGH = 0x00;
  9622  0C1F  019C               	clrf	28	;volatile
  9623                           
  9624                           ;eusart.c: 100: eusartTxHead = 0;
  9625  0C20  0020               	movlb	0	; select bank0
  9626  0C21  01E9               	clrf	_eusartTxHead	;volatile
  9627                           
  9628                           ;eusart.c: 101: eusartTxTail = 0;
  9629  0C22  01E8               	clrf	_eusartTxTail	;volatile
  9630                           
  9631                           ;eusart.c: 102: eusartTxBufferRemaining = sizeof(eusartTxBuffer);
  9632  0C23  3020               	movlw	32
  9633  0C24  00A5               	movwf	??_EUSART_Initialize
  9634  0C25  0825               	movf	??_EUSART_Initialize,w
  9635  0C26  00E7               	movwf	_eusartTxBufferRemaining	;volatile
  9636                           
  9637                           ;eusart.c: 104: eusartRxHead = 0;
  9638  0C27  01E6               	clrf	_eusartRxHead	;volatile
  9639                           
  9640                           ;eusart.c: 105: eusartRxTail = 0;
  9641  0C28  01E5               	clrf	_eusartRxTail	;volatile
  9642                           
  9643                           ;eusart.c: 106: eusartRxCount = 0;
  9644  0C29  01E4               	clrf	_eusartRxCount	;volatile
  9645                           
  9646                           ;eusart.c: 109: PIE1bits.RCIE = 1;
  9647  0C2A  0021               	movlb	1	; select bank1
  9648  0C2B  1691               	bsf	17,5	;volatile
  9649  0C2C  0008               	return
  9650  0C2D                     __end_of_EUSART_Initialize:	
  9651                           
  9652                           	psect	text38
  9653  0AA3                     __ptext38:	
  9654 ;; *************** function _LedONStatusBusy *****************
  9655 ;; Defined at:
  9656 ;;		line 12 in file "LED_Ctrl.c"
  9657 ;; Parameters:    Size  Location     Type
  9658 ;;		None
  9659 ;; Auto vars:     Size  Location     Type
  9660 ;;		None
  9661 ;; Return value:  Size  Location     Type
  9662 ;;                  1    wreg      unsigned char 
  9663 ;; Registers used:
  9664 ;;		wreg
  9665 ;; Tracked objects:
  9666 ;;		On entry : 0/0
  9667 ;;		On exit  : 0/0
  9668 ;;		Unchanged: 0/0
  9669 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9670 ;;      Params:         0       0       0       0       0       0       0       0
  9671 ;;      Locals:         0       0       0       0       0       0       0       0
  9672 ;;      Temps:          0       0       0       0       0       0       0       0
  9673 ;;      Totals:         0       0       0       0       0       0       0       0
  9674 ;;Total ram usage:        0 bytes
  9675 ;; Hardware stack levels used:    1
  9676 ;; Hardware stack levels required when called:    6
  9677 ;; This function calls:
  9678 ;;		Nothing
  9679 ;; This function is called by:
  9680 ;;		_main
  9681 ;; This function uses a non-reentrant model
  9682 ;;
  9683                           
  9684                           
  9685                           ;psect for function _LedONStatusBusy
  9686  0AA3                     _LedONStatusBusy:	
  9687                           
  9688                           ;LED_Ctrl.c: 14: return Led_ON;
  9689                           
  9690                           ;incstack = 0
  9691                           ; Regs used in _LedONStatusBusy: [wreg]
  9692  0AA3  0020               	movlb	0	; select bank0
  9693  0AA4  0861               	movf	_Led_ON,w
  9694  0AA5  0008               	return
  9695  0AA6                     __end_of_LedONStatusBusy:	
  9696                           
  9697                           	psect	text39
  9698  0762                     __ptext39:	
  9699 ;; *************** function _LedONStartConfig *****************
  9700 ;; Defined at:
  9701 ;;		line 18 in file "LED_Ctrl.c"
  9702 ;; Parameters:    Size  Location     Type
  9703 ;;  LEDcolor        1    wreg     unsigned char 
  9704 ;;  LedONDuratio    1   13[BANK0 ] unsigned char 
  9705 ;;  LedONNumBlin    1   14[BANK0 ] unsigned char 
  9706 ;; Auto vars:     Size  Location     Type
  9707 ;;  LEDcolor        1   17[BANK0 ] unsigned char 
  9708 ;; Return value:  Size  Location     Type
  9709 ;;                  1    wreg      unsigned char 
  9710 ;; Registers used:
  9711 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  9712 ;; Tracked objects:
  9713 ;;		On entry : 0/0
  9714 ;;		On exit  : 0/0
  9715 ;;		Unchanged: 0/0
  9716 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9717 ;;      Params:         0       2       0       0       0       0       0       0
  9718 ;;      Locals:         0       1       0       0       0       0       0       0
  9719 ;;      Temps:          0       2       0       0       0       0       0       0
  9720 ;;      Totals:         0       5       0       0       0       0       0       0
  9721 ;;Total ram usage:        5 bytes
  9722 ;; Hardware stack levels used:    1
  9723 ;; Hardware stack levels required when called:    7
  9724 ;; This function calls:
  9725 ;;		___lwdiv
  9726 ;;		___wmul
  9727 ;; This function is called by:
  9728 ;;		_main
  9729 ;; This function uses a non-reentrant model
  9730 ;;
  9731                           
  9732                           
  9733                           ;psect for function _LedONStartConfig
  9734  0762                     _LedONStartConfig:	
  9735                           
  9736                           ;incstack = 0
  9737                           ; Regs used in _LedONStartConfig: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  9738                           ;LedONStartConfig@LEDcolor stored from wreg
  9739  0762  0020               	movlb	0	; select bank0
  9740  0763  00B1               	movwf	LedONStartConfig@LEDcolor
  9741                           
  9742                           ;LED_Ctrl.c: 20: if(Led_ON!=1 && (LedONDurationSec!=0)&& (LedONDurationSec <= 60))
  9743  0764  0361               	decf	_Led_ON,w
  9744  0765  1903               	btfsc	3,2
  9745  0766  0008               	return
  9746  0767  082D               	movf	LedONStartConfig@LedONDurationSec,w
  9747  0768  1903               	btfsc	3,2
  9748  0769  0008               	return
  9749  076A  303D               	movlw	61
  9750  076B  022D               	subwf	LedONStartConfig@LedONDurationSec,w
  9751  076C  1803               	skipnc
  9752  076D  0008               	return
  9753                           
  9754                           ;LED_Ctrl.c: 21: {
  9755                           ;LED_Ctrl.c: 22: Led_ON=1;
  9756  076E  01E1               	clrf	_Led_ON
  9757  076F  0AE1               	incf	_Led_ON,f
  9758                           
  9759                           ;LED_Ctrl.c: 23: LED_Color=LEDcolor;
  9760  0770  0831               	movf	LedONStartConfig@LEDcolor,w
  9761  0771  00AF               	movwf	??_LedONStartConfig
  9762  0772  082F               	movf	??_LedONStartConfig,w
  9763  0773  00EA               	movwf	_LED_Color
  9764                           
  9765                           ;LED_Ctrl.c: 25: switch(LED_Color)
  9766  0774  2F7E               	goto	l3954
  9767  0775                     l616:	
  9768                           ;LED_Ctrl.c: 26: {
  9769                           ;LED_Ctrl.c: 27: case 0 : do { LATCbits.LATC0 = 1; } while(0);
  9770                           
  9771  0775  0022               	movlb	2	; select bank2
  9772  0776  140E               	bsf	14,0	;volatile
  9773                           
  9774                           ;LED_Ctrl.c: 28: break;
  9775  0777  2F8A               	goto	l3956
  9776  0778                     l620:	
  9777                           ;LED_Ctrl.c: 29: case 1 : do { LATCbits.LATC1 = 1; } while(0);
  9778                           
  9779  0778  0022               	movlb	2	; select bank2
  9780  0779  148E               	bsf	14,1	;volatile
  9781                           
  9782                           ;LED_Ctrl.c: 30: break;
  9783  077A  2F8A               	goto	l3956
  9784  077B                     l623:	
  9785                           ;LED_Ctrl.c: 31: case 2 : do { LATCbits.LATC2 = 1; } while(0);
  9786                           
  9787  077B  0022               	movlb	2	; select bank2
  9788  077C  150E               	bsf	14,2	;volatile
  9789                           
  9790                           ;LED_Ctrl.c: 34: }
  9791                           
  9792                           ;LED_Ctrl.c: 33: default : break;
  9793                           
  9794                           ;LED_Ctrl.c: 32: break;
  9795  077D  2F8A               	goto	l3956
  9796  077E                     l3954:	
  9797  077E  0020               	movlb	0	; select bank0
  9798  077F  086A               	movf	_LED_Color,w
  9799                           
  9800                           ; Switch size 1, requested type "space"
  9801                           ; Number of cases is 3, Range of values is 0 to 2
  9802                           ; switch strategies available:
  9803                           ; Name         Instructions Cycles
  9804                           ; simple_byte           10     6 (average)
  9805                           ; direct_byte           12     6 (fixed)
  9806                           ; jumptable            260     6 (fixed)
  9807                           ;	Chosen strategy is simple_byte
  9808  0780  3A00               	xorlw	0	; case 0
  9809  0781  1903               	skipnz
  9810  0782  2F75               	goto	l616
  9811  0783  3A01               	xorlw	1	; case 1
  9812  0784  1903               	skipnz
  9813  0785  2F78               	goto	l620
  9814  0786  3A03               	xorlw	3	; case 2
  9815  0787  1903               	skipnz
  9816  0788  2F7B               	goto	l623
  9817  0789  2F8A               	goto	l3956
  9818  078A                     l3956:	
  9819                           
  9820                           ;LED_Ctrl.c: 36: LED_msec_Cnt=0;
  9821  078A  0021               	movlb	1	; select bank1
  9822  078B  01D2               	clrf	_LED_msec_Cnt^(0+128)
  9823  078C  01D3               	clrf	(_LED_msec_Cnt+1)^(0+128)
  9824                           
  9825                           ;LED_Ctrl.c: 37: LedON_Duration_msec=((unsigned int)LedONDurationSec)*1000;
  9826  078D  0020               	movlb	0	; select bank0
  9827  078E  082D               	movf	LedONStartConfig@LedONDurationSec,w
  9828  078F  00AF               	movwf	??_LedONStartConfig
  9829  0790  01B0               	clrf	??_LedONStartConfig+1
  9830  0791  082F               	movf	??_LedONStartConfig,w
  9831  0792  00A5               	movwf	___wmul@multiplier
  9832  0793  0830               	movf	??_LedONStartConfig+1,w
  9833  0794  00A6               	movwf	___wmul@multiplier+1
  9834  0795  30E8               	movlw	232
  9835  0796  00A7               	movwf	___wmul@multiplicand
  9836  0797  3003               	movlw	3
  9837  0798  00A8               	movwf	___wmul@multiplicand+1
  9838  0799  318C  247F  3187   	fcall	___wmul
  9839  079C  0020               	movlb	0	; select bank0
  9840  079D  0826               	movf	?___wmul+1,w
  9841  079E  00D2               	movwf	_LedON_Duration_msec+1
  9842  079F  0825               	movf	?___wmul,w
  9843  07A0  00D1               	movwf	_LedON_Duration_msec
  9844                           
  9845                           ;LED_Ctrl.c: 38: if(LedONNumBlink > 1)
  9846  07A1  3002               	movlw	2
  9847  07A2  022E               	subwf	LedONStartConfig@LedONNumBlink,w
  9848  07A3  1C03               	skipc
  9849  07A4  2FBC               	goto	l3964
  9850                           
  9851                           ;LED_Ctrl.c: 39: Blick_tickPointMsec=(LedON_Duration_msec/(((LedONNumBlink-1)*2)+1));
  9852  07A5  082E               	movf	LedONStartConfig@LedONNumBlink,w
  9853  07A6  00AF               	movwf	??_LedONStartConfig
  9854  07A7  01B0               	clrf	??_LedONStartConfig+1
  9855  07A8  35AF               	lslf	??_LedONStartConfig,f
  9856  07A9  0DB0               	rlf	??_LedONStartConfig+1,f
  9857  07AA  082F               	movf	??_LedONStartConfig,w
  9858  07AB  3EFF               	addlw	255
  9859  07AC  00A5               	movwf	___lwdiv@divisor
  9860  07AD  30FF               	movlw	255
  9861  07AE  3D30               	addwfc	??_LedONStartConfig+1,w
  9862  07AF  00A6               	movwf	___lwdiv@divisor+1
  9863  07B0  0852               	movf	_LedON_Duration_msec+1,w
  9864  07B1  00A8               	movwf	___lwdiv@dividend+1
  9865  07B2  0851               	movf	_LedON_Duration_msec,w
  9866  07B3  00A7               	movwf	___lwdiv@dividend
  9867  07B4  3187  27C8  3187   	fcall	___lwdiv
  9868  07B7  0020               	movlb	0	; select bank0
  9869  07B8  0826               	movf	?___lwdiv+1,w
  9870  07B9  00D4               	movwf	_Blick_tickPointMsec+1
  9871  07BA  0825               	movf	?___lwdiv,w
  9872  07BB  2FBF               	goto	L1
  9873  07BC                     l3964:	
  9874                           
  9875                           ;LED_Ctrl.c: 40: else
  9876                           ;LED_Ctrl.c: 41: Blick_tickPointMsec=LedON_Duration_msec;
  9877  07BC  0852               	movf	_LedON_Duration_msec+1,w
  9878  07BD  00D4               	movwf	_Blick_tickPointMsec+1
  9879  07BE  0851               	movf	_LedON_Duration_msec,w
  9880  07BF                     L1:	
  9881  07BF  00D3               	movwf	_Blick_tickPointMsec
  9882                           
  9883                           ;LED_Ctrl.c: 43: Blick_tickPoint=Blick_tickPointMsec;
  9884  07C0  0854               	movf	_Blick_tickPointMsec+1,w
  9885  07C1  0021               	movlb	1	; select bank1
  9886  07C2  00D1               	movwf	(_Blick_tickPoint+1)^(0+128)
  9887  07C3  0020               	movlb	0	; select bank0
  9888  07C4  0853               	movf	_Blick_tickPointMsec,w
  9889  07C5  0021               	movlb	1	; select bank1
  9890  07C6  00D0               	movwf	_Blick_tickPoint^(0+128)
  9891                           
  9892                           ;LED_Ctrl.c: 46: else
  9893                           ;LED_Ctrl.c: 47: {
  9894                           ;LED_Ctrl.c: 48: return 0;
  9895                           ;	Return value of _LedONStartConfig is never used
  9896                           
  9897                           ;LED_Ctrl.c: 45: }
  9898                           
  9899                           ;LED_Ctrl.c: 44: return 1;
  9900                           ;	Return value of _LedONStartConfig is never used
  9901  07C7  0008               	return
  9902  07C8                     __end_of_LedONStartConfig:	
  9903                           
  9904                           	psect	text40
  9905  0C7F                     __ptext40:	
  9906 ;; *************** function ___wmul *****************
  9907 ;; Defined at:
  9908 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
  9909 ;; Parameters:    Size  Location     Type
  9910 ;;  multiplier      2    5[BANK0 ] unsigned int 
  9911 ;;  multiplicand    2    7[BANK0 ] unsigned int 
  9912 ;; Auto vars:     Size  Location     Type
  9913 ;;  product         2    9[BANK0 ] unsigned int 
  9914 ;; Return value:  Size  Location     Type
  9915 ;;                  2    5[BANK0 ] unsigned int 
  9916 ;; Registers used:
  9917 ;;		wreg, status,2, status,0
  9918 ;; Tracked objects:
  9919 ;;		On entry : 0/0
  9920 ;;		On exit  : 0/0
  9921 ;;		Unchanged: 0/0
  9922 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9923 ;;      Params:         0       4       0       0       0       0       0       0
  9924 ;;      Locals:         0       2       0       0       0       0       0       0
  9925 ;;      Temps:          0       0       0       0       0       0       0       0
  9926 ;;      Totals:         0       6       0       0       0       0       0       0
  9927 ;;Total ram usage:        6 bytes
  9928 ;; Hardware stack levels used:    1
  9929 ;; Hardware stack levels required when called:    6
  9930 ;; This function calls:
  9931 ;;		Nothing
  9932 ;; This function is called by:
  9933 ;;		_LedONStartConfig
  9934 ;; This function uses a non-reentrant model
  9935 ;;
  9936                           
  9937                           
  9938                           ;psect for function ___wmul
  9939  0C7F                     ___wmul:	
  9940                           
  9941                           ;incstack = 0
  9942                           ; Regs used in ___wmul: [wreg+status,2+status,0]
  9943  0C7F  0020               	movlb	0	; select bank0
  9944  0C80  01A9               	clrf	___wmul@product
  9945  0C81  01AA               	clrf	___wmul@product+1
  9946  0C82                     l3832:	
  9947  0C82  1C25               	btfss	___wmul@multiplier,0
  9948  0C83  2C88               	goto	l1084
  9949  0C84  0827               	movf	___wmul@multiplicand,w
  9950  0C85  07A9               	addwf	___wmul@product,f
  9951  0C86  0828               	movf	___wmul@multiplicand+1,w
  9952  0C87  3DAA               	addwfc	___wmul@product+1,f
  9953  0C88                     l1084:	
  9954  0C88  3001               	movlw	1
  9955  0C89                     u2885:	
  9956  0C89  35A7               	lslf	___wmul@multiplicand,f
  9957  0C8A  0DA8               	rlf	___wmul@multiplicand+1,f
  9958  0C8B  0B89               	decfsz	9,f
  9959  0C8C  2C89               	goto	u2885
  9960  0C8D  3001               	movlw	1
  9961  0C8E                     u2895:	
  9962  0C8E  36A6               	lsrf	___wmul@multiplier+1,f
  9963  0C8F  0CA5               	rrf	___wmul@multiplier,f
  9964  0C90  0B89               	decfsz	9,f
  9965  0C91  2C8E               	goto	u2895
  9966  0C92  0825               	movf	___wmul@multiplier,w
  9967  0C93  0426               	iorwf	___wmul@multiplier+1,w
  9968  0C94  1D03               	btfss	3,2
  9969  0C95  2C82               	goto	l3832
  9970  0C96  082A               	movf	___wmul@product+1,w
  9971  0C97  00A6               	movwf	?___wmul+1
  9972  0C98  0829               	movf	___wmul@product,w
  9973  0C99  00A5               	movwf	?___wmul
  9974  0C9A  0008               	return
  9975  0C9B                     __end_of___wmul:	
  9976                           
  9977                           	psect	text41
  9978  07C8                     __ptext41:	
  9979 ;; *************** function ___lwdiv *****************
  9980 ;; Defined at:
  9981 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
  9982 ;; Parameters:    Size  Location     Type
  9983 ;;  divisor         2    5[BANK0 ] unsigned int 
  9984 ;;  dividend        2    7[BANK0 ] unsigned int 
  9985 ;; Auto vars:     Size  Location     Type
  9986 ;;  quotient        2   10[BANK0 ] unsigned int 
  9987 ;;  counter         1   12[BANK0 ] unsigned char 
  9988 ;; Return value:  Size  Location     Type
  9989 ;;                  2    5[BANK0 ] unsigned int 
  9990 ;; Registers used:
  9991 ;;		wreg, status,2, status,0
  9992 ;; Tracked objects:
  9993 ;;		On entry : 0/0
  9994 ;;		On exit  : 0/0
  9995 ;;		Unchanged: 0/0
  9996 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
  9997 ;;      Params:         0       4       0       0       0       0       0       0
  9998 ;;      Locals:         0       3       0       0       0       0       0       0
  9999 ;;      Temps:          0       1       0       0       0       0       0       0
 10000 ;;      Totals:         0       8       0       0       0       0       0       0
 10001 ;;Total ram usage:        8 bytes
 10002 ;; Hardware stack levels used:    1
 10003 ;; Hardware stack levels required when called:    6
 10004 ;; This function calls:
 10005 ;;		Nothing
 10006 ;; This function is called by:
 10007 ;;		_LedONStartConfig
 10008 ;; This function uses a non-reentrant model
 10009 ;;
 10010                           
 10011                           
 10012                           ;psect for function ___lwdiv
 10013  07C8                     ___lwdiv:	
 10014                           
 10015                           ;incstack = 0
 10016                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
 10017  07C8  0020               	movlb	0	; select bank0
 10018  07C9  01AA               	clrf	___lwdiv@quotient
 10019  07CA  01AB               	clrf	___lwdiv@quotient+1
 10020  07CB  0825               	movf	___lwdiv@divisor,w
 10021  07CC  0426               	iorwf	___lwdiv@divisor+1,w
 10022  07CD  1903               	btfsc	3,2
 10023  07CE  2FF8               	goto	l3866
 10024  07CF  01AC               	clrf	___lwdiv@counter
 10025  07D0  0AAC               	incf	___lwdiv@counter,f
 10026  07D1                     l3854:	
 10027  07D1  1BA6               	btfsc	___lwdiv@divisor+1,7
 10028  07D2  2FDD               	goto	l3856
 10029  07D3  3001               	movlw	1
 10030  07D4                     u2925:	
 10031  07D4  35A5               	lslf	___lwdiv@divisor,f
 10032  07D5  0DA6               	rlf	___lwdiv@divisor+1,f
 10033  07D6  0B89               	decfsz	9,f
 10034  07D7  2FD4               	goto	u2925
 10035  07D8  3001               	movlw	1
 10036  07D9  00A9               	movwf	??___lwdiv
 10037  07DA  0829               	movf	??___lwdiv,w
 10038  07DB  07AC               	addwf	___lwdiv@counter,f
 10039  07DC  2FD1               	goto	l3854
 10040  07DD                     l3856:	
 10041  07DD  3001               	movlw	1
 10042  07DE                     u2945:	
 10043  07DE  35AA               	lslf	___lwdiv@quotient,f
 10044  07DF  0DAB               	rlf	___lwdiv@quotient+1,f
 10045  07E0  0B89               	decfsz	9,f
 10046  07E1  2FDE               	goto	u2945
 10047  07E2  0826               	movf	___lwdiv@divisor+1,w
 10048  07E3  0228               	subwf	___lwdiv@dividend+1,w
 10049  07E4  1D03               	skipz
 10050  07E5  2FE8               	goto	u2955
 10051  07E6  0825               	movf	___lwdiv@divisor,w
 10052  07E7  0227               	subwf	___lwdiv@dividend,w
 10053  07E8                     u2955:	
 10054  07E8  1C03               	skipc
 10055  07E9  2FEF               	goto	l3862
 10056  07EA  0825               	movf	___lwdiv@divisor,w
 10057  07EB  02A7               	subwf	___lwdiv@dividend,f
 10058  07EC  0826               	movf	___lwdiv@divisor+1,w
 10059  07ED  3BA8               	subwfb	___lwdiv@dividend+1,f
 10060  07EE  142A               	bsf	___lwdiv@quotient,0
 10061  07EF                     l3862:	
 10062  07EF  3001               	movlw	1
 10063  07F0                     u2965:	
 10064  07F0  36A6               	lsrf	___lwdiv@divisor+1,f
 10065  07F1  0CA5               	rrf	___lwdiv@divisor,f
 10066  07F2  0B89               	decfsz	9,f
 10067  07F3  2FF0               	goto	u2965
 10068  07F4  3001               	movlw	1
 10069  07F5  02AC               	subwf	___lwdiv@counter,f
 10070  07F6  1D03               	btfss	3,2
 10071  07F7  2FDD               	goto	l3856
 10072  07F8                     l3866:	
 10073  07F8  082B               	movf	___lwdiv@quotient+1,w
 10074  07F9  00A6               	movwf	?___lwdiv+1
 10075  07FA  082A               	movf	___lwdiv@quotient,w
 10076  07FB  00A5               	movwf	?___lwdiv
 10077  07FC  0008               	return
 10078  07FD                     __end_of___lwdiv:	
 10079                           
 10080                           	psect	intentry
 10081  0004                     __pintentry:	
 10082 ;; *************** function _INTERRUPT_InterruptManager *****************
 10083 ;; Defined at:
 10084 ;;		line 51 in file "mcc_generated_files/interrupt_manager.c"
 10085 ;; Parameters:    Size  Location     Type
 10086 ;;		None
 10087 ;; Auto vars:     Size  Location     Type
 10088 ;;		None
 10089 ;; Return value:  Size  Location     Type
 10090 ;;                  1    wreg      void 
 10091 ;; Registers used:
 10092 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10093 ;; Tracked objects:
 10094 ;;		On entry : 0/0
 10095 ;;		On exit  : 0/0
 10096 ;;		Unchanged: 0/0
 10097 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10098 ;;      Params:         0       0       0       0       0       0       0       0
 10099 ;;      Locals:         0       0       0       0       0       0       0       0
 10100 ;;      Temps:          0       1       0       0       0       0       0       0
 10101 ;;      Totals:         0       1       0       0       0       0       0       0
 10102 ;;Total ram usage:        1 bytes
 10103 ;; Hardware stack levels used:    1
 10104 ;; Hardware stack levels required when called:    5
 10105 ;; This function calls:
 10106 ;;		_CCP1_CaptureISR
 10107 ;;		_EUSART_Receive_ISR
 10108 ;;		_EUSART_Transmit_ISR
 10109 ;;		_PIN_MANAGER_IOC
 10110 ;;		_TMR0_ISR
 10111 ;;		_TMR3_ISR
 10112 ;; This function is called by:
 10113 ;;		Interrupt level 1
 10114 ;; This function uses a non-reentrant model
 10115 ;;
 10116                           
 10117  0004                     _INTERRUPT_InterruptManager:	
 10118                           
 10119                           ;incstack = 0
 10120  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10121                           
 10122                           ; Regs used in _INTERRUPT_InterruptManager: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10123  0005  3180               	pagesel	$
 10124  0006  0020               	movlb	0	; select bank0
 10125  0007  087F               	movf	127,w
 10126  0008  00A4               	movwf	??_INTERRUPT_InterruptManager
 10127                           
 10128                           ;interrupt_manager.c: 54: if(PIE0bits.TMR0IE == 1 && PIR0bits.TMR0IF == 1)
 10129  0009  0021               	movlb	1	; select bank1
 10130  000A  1E90               	btfss	16,5	;volatile
 10131  000B  2813               	goto	i1l379
 10132  000C  0020               	movlb	0	; select bank0
 10133  000D  1E90               	btfss	16,5	;volatile
 10134  000E  2813               	goto	i1l379
 10135                           
 10136                           ;interrupt_manager.c: 55: {
 10137                           ;interrupt_manager.c: 56: TMR0_ISR();
 10138  000F  318A  22BC  3180   	fcall	_TMR0_ISR
 10139                           
 10140                           ;interrupt_manager.c: 57: }
 10141  0012  284B               	goto	i1l391
 10142  0013                     i1l379:	
 10143                           
 10144                           ;interrupt_manager.c: 58: else if(INTCONbits.PEIE == 1 && PIE1bits.TXIE == 1 && PIR1bits
      +                          .TXIF == 1)
 10145  0013  1F0B               	btfss	11,6	;volatile
 10146  0014  281F               	goto	i1l381
 10147  0015  0021               	movlb	1	; select bank1
 10148  0016  1E11               	btfss	17,4	;volatile
 10149  0017  281F               	goto	i1l381
 10150  0018  0020               	movlb	0	; select bank0
 10151  0019  1E11               	btfss	17,4	;volatile
 10152  001A  281F               	goto	i1l381
 10153                           
 10154                           ;interrupt_manager.c: 59: {
 10155                           ;interrupt_manager.c: 60: EUSART_Transmit_ISR();
 10156  001B  318C  249B  3180   	fcall	_EUSART_Transmit_ISR
 10157                           
 10158                           ;interrupt_manager.c: 61: }
 10159  001E  284B               	goto	i1l391
 10160  001F                     i1l381:	
 10161                           
 10162                           ;interrupt_manager.c: 62: else if(INTCONbits.PEIE == 1 && PIE1bits.RCIE == 1 && PIR1bits
      +                          .RCIF == 1)
 10163  001F  1F0B               	btfss	11,6	;volatile
 10164  0020  282B               	goto	i1l383
 10165  0021  0021               	movlb	1	; select bank1
 10166  0022  1E91               	btfss	17,5	;volatile
 10167  0023  282B               	goto	i1l383
 10168  0024  0020               	movlb	0	; select bank0
 10169  0025  1E91               	btfss	17,5	;volatile
 10170  0026  282B               	goto	i1l383
 10171                           
 10172                           ;interrupt_manager.c: 63: {
 10173                           ;interrupt_manager.c: 64: EUSART_Receive_ISR();
 10174  0027  318C  2463  3180   	fcall	_EUSART_Receive_ISR
 10175                           
 10176                           ;interrupt_manager.c: 65: }
 10177  002A  284B               	goto	i1l391
 10178  002B                     i1l383:	
 10179                           
 10180                           ;interrupt_manager.c: 66: else if(INTCONbits.PEIE == 1 && PIE3bits.TMR3IE == 1 && PIR3bi
      +                          ts.TMR3IF == 1)
 10181  002B  1F0B               	btfss	11,6	;volatile
 10182  002C  2837               	goto	i1l385
 10183  002D  0021               	movlb	1	; select bank1
 10184  002E  1E13               	btfss	19,4	;volatile
 10185  002F  2837               	goto	i1l385
 10186  0030  0020               	movlb	0	; select bank0
 10187  0031  1E13               	btfss	19,4	;volatile
 10188  0032  2837               	goto	i1l385
 10189                           
 10190                           ;interrupt_manager.c: 67: {
 10191                           ;interrupt_manager.c: 68: TMR3_ISR();
 10192  0033  318B  23A8  3180   	fcall	_TMR3_ISR
 10193                           
 10194                           ;interrupt_manager.c: 69: }
 10195  0036  284B               	goto	i1l391
 10196  0037                     i1l385:	
 10197                           
 10198                           ;interrupt_manager.c: 70: else if(INTCONbits.PEIE == 1 && PIE4bits.CCP1IE == 1 && PIR4bi
      +                          ts.CCP1IF == 1)
 10199  0037  1F0B               	btfss	11,6	;volatile
 10200  0038  2843               	goto	i1l387
 10201  0039  0021               	movlb	1	; select bank1
 10202  003A  1C14               	btfss	20,0	;volatile
 10203  003B  2843               	goto	i1l387
 10204  003C  0020               	movlb	0	; select bank0
 10205  003D  1C14               	btfss	20,0	;volatile
 10206  003E  2843               	goto	i1l387
 10207                           
 10208                           ;interrupt_manager.c: 71: {
 10209                           ;interrupt_manager.c: 72: CCP1_CaptureISR();
 10210  003F  318B  23BC  3180   	fcall	_CCP1_CaptureISR
 10211                           
 10212                           ;interrupt_manager.c: 73: }
 10213  0042  284B               	goto	i1l391
 10214  0043                     i1l387:	
 10215                           
 10216                           ;interrupt_manager.c: 74: else if(PIE0bits.IOCIE == 1 && PIR0bits.IOCIF == 1)
 10217  0043  0021               	movlb	1	; select bank1
 10218  0044  1E10               	btfss	16,4	;volatile
 10219  0045  284B               	goto	i1l391
 10220  0046  0020               	movlb	0	; select bank0
 10221  0047  1E10               	btfss	16,4	;volatile
 10222  0048  284B               	goto	i1l391
 10223                           
 10224                           ;interrupt_manager.c: 75: {
 10225                           ;interrupt_manager.c: 76: PIN_MANAGER_IOC();
 10226  0049  318B  230A         	fcall	_PIN_MANAGER_IOC
 10227  004B                     i1l391:	
 10228                           ;interrupt_manager.c: 78: else
 10229                           ;interrupt_manager.c: 79: {
 10230                           
 10231                           ;interrupt_manager.c: 77: }
 10232                           
 10233  004B  0020               	movlb	0	; select bank0
 10234  004C  0824               	movf	??_INTERRUPT_InterruptManager,w
 10235  004D  00FF               	movwf	127
 10236  004E  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10237  004F  0009               	retfie
 10238  0050                     __end_of_INTERRUPT_InterruptManager:	
 10239                           
 10240                           	psect	text43
 10241  0BA8                     __ptext43:	
 10242 ;; *************** function _TMR3_ISR *****************
 10243 ;; Defined at:
 10244 ;;		line 156 in file "mcc_generated_files/tmr3.c"
 10245 ;; Parameters:    Size  Location     Type
 10246 ;;		None
 10247 ;; Auto vars:     Size  Location     Type
 10248 ;;		None
 10249 ;; Return value:  Size  Location     Type
 10250 ;;                  1    wreg      void 
 10251 ;; Registers used:
 10252 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10253 ;; Tracked objects:
 10254 ;;		On entry : 0/0
 10255 ;;		On exit  : 0/0
 10256 ;;		Unchanged: 0/0
 10257 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10258 ;;      Params:         0       0       0       0       0       0       0       0
 10259 ;;      Locals:         0       0       0       0       0       0       0       0
 10260 ;;      Temps:          0       0       0       0       0       0       0       0
 10261 ;;      Totals:         0       0       0       0       0       0       0       0
 10262 ;;Total ram usage:        0 bytes
 10263 ;; Hardware stack levels used:    1
 10264 ;; Hardware stack levels required when called:    4
 10265 ;; This function calls:
 10266 ;;		Absolute function
 10267 ;;		_TMR3_DefaultInterruptHandler
 10268 ;; This function is called by:
 10269 ;;		_INTERRUPT_InterruptManager
 10270 ;; This function uses a non-reentrant model
 10271 ;;
 10272                           
 10273                           
 10274                           ;psect for function _TMR3_ISR
 10275  0BA8                     _TMR3_ISR:	
 10276                           
 10277                           ;tmr3.c: 160: PIR3bits.TMR3IF = 0;
 10278                           
 10279                           ;incstack = 0
 10280                           ; Regs used in _TMR3_ISR: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10281  0BA8  0020               	movlb	0	; select bank0
 10282  0BA9  1213               	bcf	19,4	;volatile
 10283                           
 10284                           ;tmr3.c: 162: TMR3H = (timer3ReloadVal >> 8);
 10285  0BAA  085A               	movf	_timer3ReloadVal+1,w	;volatile
 10286  0BAB  0028               	movlb	8	; select bank8
 10287  0BAC  0092               	movwf	18	;volatile
 10288                           
 10289                           ;tmr3.c: 163: TMR3L = timer3ReloadVal;
 10290  0BAD  0020               	movlb	0	; select bank0
 10291  0BAE  0859               	movf	_timer3ReloadVal,w	;volatile
 10292  0BAF  0028               	movlb	8	; select bank8
 10293  0BB0  0091               	movwf	17	;volatile
 10294                           
 10295                           ;tmr3.c: 165: if(TMR3_InterruptHandler)
 10296  0BB1  0021               	movlb	1	; select bank1
 10297  0BB2  085A               	movf	_TMR3_InterruptHandler^(0+128),w
 10298  0BB3  045B               	iorwf	(_TMR3_InterruptHandler+1)^(0+128),w
 10299  0BB4  1903               	btfsc	3,2
 10300  0BB5  0008               	return
 10301                           
 10302                           ;tmr3.c: 166: {
 10303                           ;tmr3.c: 167: TMR3_InterruptHandler();
 10304  0BB6  085B               	movf	(_TMR3_InterruptHandler+1)^(0+128),w
 10305  0BB7  008A               	movwf	10
 10306  0BB8  085A               	movf	_TMR3_InterruptHandler^(0+128),w
 10307  0BB9  000A               	callw
 10308  0BBA  318B               	pagesel	$
 10309  0BBB  0008               	return
 10310  0BBC                     __end_of_TMR3_ISR:	
 10311                           
 10312                           	psect	text44
 10313  0AA0                     __ptext44:	
 10314 ;; *************** function _TMR3_DefaultInterruptHandler *****************
 10315 ;; Defined at:
 10316 ;;		line 176 in file "mcc_generated_files/tmr3.c"
 10317 ;; Parameters:    Size  Location     Type
 10318 ;;		None
 10319 ;; Auto vars:     Size  Location     Type
 10320 ;;		None
 10321 ;; Return value:  Size  Location     Type
 10322 ;;                  1    wreg      void 
 10323 ;; Registers used:
 10324 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10325 ;; Tracked objects:
 10326 ;;		On entry : 0/0
 10327 ;;		On exit  : 0/0
 10328 ;;		Unchanged: 0/0
 10329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10330 ;;      Params:         0       0       0       0       0       0       0       0
 10331 ;;      Locals:         0       0       0       0       0       0       0       0
 10332 ;;      Temps:          0       0       0       0       0       0       0       0
 10333 ;;      Totals:         0       0       0       0       0       0       0       0
 10334 ;;Total ram usage:        0 bytes
 10335 ;; Hardware stack levels used:    1
 10336 ;; Hardware stack levels required when called:    3
 10337 ;; This function calls:
 10338 ;;		_Timer3_Overflow
 10339 ;; This function is called by:
 10340 ;;		_TMR3_Initialize
 10341 ;;		_TMR3_ISR
 10342 ;; This function uses a non-reentrant model
 10343 ;;
 10344                           
 10345                           
 10346                           ;psect for function _TMR3_DefaultInterruptHandler
 10347  0AA0                     _TMR3_DefaultInterruptHandler:	
 10348                           
 10349                           ;tmr3.c: 178: Timer3_Overflow();
 10350                           
 10351                           ;incstack = 0
 10352                           ; Regs used in _TMR3_DefaultInterruptHandler: [wreg-fsr1h+status,2+status,0+pclath+cstac
      +                          k]
 10353  0AA0  3183  237A         	fcall	_Timer3_Overflow
 10354  0AA2  0008               	return
 10355  0AA3                     __end_of_TMR3_DefaultInterruptHandler:	
 10356                           
 10357                           	psect	text45
 10358  037A                     __ptext45:	
 10359 ;; *************** function _Timer3_Overflow *****************
 10360 ;; Defined at:
 10361 ;;		line 283 in file "main.c"
 10362 ;; Parameters:    Size  Location     Type
 10363 ;;		None
 10364 ;; Auto vars:     Size  Location     Type
 10365 ;;		None
 10366 ;; Return value:  Size  Location     Type
 10367 ;;                  1    wreg      void 
 10368 ;; Registers used:
 10369 ;;		wreg, fsr0l, fsr0h, fsr1l, fsr1h, status,2, status,0, pclath, cstack
 10370 ;; Tracked objects:
 10371 ;;		On entry : 0/0
 10372 ;;		On exit  : 0/0
 10373 ;;		Unchanged: 0/0
 10374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10375 ;;      Params:         0       0       0       0       0       0       0       0
 10376 ;;      Locals:         0       0       0       0       0       0       0       0
 10377 ;;      Temps:          0       4       0       0       0       0       0       0
 10378 ;;      Totals:         0       4       0       0       0       0       0       0
 10379 ;;Total ram usage:        4 bytes
 10380 ;; Hardware stack levels used:    1
 10381 ;; Hardware stack levels required when called:    2
 10382 ;; This function calls:
 10383 ;;		___lldiv
 10384 ;;		i1_LedONStartConfig
 10385 ;;		i1_TMR3_StopTimer
 10386 ;; This function is called by:
 10387 ;;		_TMR3_DefaultInterruptHandler
 10388 ;; This function uses a non-reentrant model
 10389 ;;
 10390                           
 10391                           
 10392                           ;psect for function _Timer3_Overflow
 10393  037A                     _Timer3_Overflow:	
 10394                           
 10395                           ;main.c: 286: TMR3_StopTimer();
 10396                           
 10397                           ;incstack = 0
 10398                           ; Regs used in _Timer3_Overflow: [wreg-fsr1h+status,2+status,0+pclath+cstack]
 10399  037A  318A  229D  3183   	fcall	i1_TMR3_StopTimer
 10400                           
 10401                           ;main.c: 287: do { LATCbits.LATC2 = 0; } while(0);
 10402  037D  0022               	movlb	2	; select bank2
 10403  037E  110E               	bcf	14,2	;volatile
 10404                           
 10405                           ;main.c: 289: if(ModbusData.mcuTOplcData.NutRunState == RUNNING)
 10406  037F  0021               	movlb	1	; select bank1
 10407  0380  0363               	decf	(_ModbusData^(0+128)+4),w
 10408  0381  0464               	iorwf	((_ModbusData+1)^(0+128)+4),w
 10409  0382  1D03               	btfss	3,2
 10410  0383  0008               	return
 10411                           
 10412                           ;main.c: 290: {
 10413                           ;main.c: 291: if(EPCPulseCountClock >= EPCPulseCountAntiClock)
 10414  0384  0020               	movlb	0	; select bank0
 10415  0385  0856               	movf	_EPCPulseCountAntiClock+1,w
 10416  0386  0258               	subwf	_EPCPulseCountClock+1,w
 10417  0387  1D03               	skipz
 10418  0388  2B8B               	goto	u238_25
 10419  0389  0855               	movf	_EPCPulseCountAntiClock,w
 10420  038A  0257               	subwf	_EPCPulseCountClock,w
 10421  038B                     u238_25:	
 10422  038B  1C03               	skipc
 10423  038C  2B9B               	goto	i1l3290
 10424                           
 10425                           ;main.c: 292: ModbusData.mcuTOplcData.MeasurePulseCount = EPCPulseCountClock - EPCPulseC
      +                          ountAntiClock;
 10426  038D  0955               	comf	_EPCPulseCountAntiClock,w
 10427  038E  00A0               	movwf	??_Timer3_Overflow
 10428  038F  0956               	comf	_EPCPulseCountAntiClock+1,w
 10429  0390  00A1               	movwf	??_Timer3_Overflow+1
 10430  0391  0AA0               	incf	??_Timer3_Overflow,f
 10431  0392  1903               	skipnz
 10432  0393  0AA1               	incf	??_Timer3_Overflow+1,f
 10433  0394  0857               	movf	_EPCPulseCountClock,w
 10434  0395  0720               	addwf	??_Timer3_Overflow,w
 10435  0396  0021               	movlb	1	; select bank1
 10436  0397  00DF               	movwf	_ModbusData^(0+128)
 10437  0398  0020               	movlb	0	; select bank0
 10438  0399  0858               	movf	_EPCPulseCountClock+1,w
 10439  039A  2BA9               	goto	L2
 10440  039B                     i1l3290:	
 10441                           
 10442                           ;main.c: 293: else
 10443                           ;main.c: 294: ModbusData.mcuTOplcData.MeasurePulseCount = EPCPulseCountAntiClock - EPCPu
      +                          lseCountClock;
 10444  039B  0020               	movlb	0	; select bank0
 10445  039C  0957               	comf	_EPCPulseCountClock,w
 10446  039D  00A0               	movwf	??_Timer3_Overflow
 10447  039E  0958               	comf	_EPCPulseCountClock+1,w
 10448  039F  00A1               	movwf	??_Timer3_Overflow+1
 10449  03A0  0AA0               	incf	??_Timer3_Overflow,f
 10450  03A1  1903               	skipnz
 10451  03A2  0AA1               	incf	??_Timer3_Overflow+1,f
 10452  03A3  0855               	movf	_EPCPulseCountAntiClock,w
 10453  03A4  0720               	addwf	??_Timer3_Overflow,w
 10454  03A5  0021               	movlb	1	; select bank1
 10455  03A6  00DF               	movwf	_ModbusData^(0+128)
 10456  03A7  0020               	movlb	0	; select bank0
 10457  03A8  0856               	movf	_EPCPulseCountAntiClock+1,w
 10458  03A9                     L2:	
 10459  03A9  3D21               	addwfc	??_Timer3_Overflow+1,w
 10460  03AA  0021               	movlb	1	; select bank1
 10461  03AB  00E0               	movwf	(_ModbusData+1)^(0+128)
 10462                           
 10463                           ;main.c: 296: ModbusData.mcuTOplcData.MeasureRunTime = (uint16_t)(EPCRunTime/1000);
 10464  03AC  3000               	movlw	0
 10465  03AD  00F3               	movwf	___lldiv@divisor+3
 10466  03AE  3000               	movlw	0
 10467  03AF  00F2               	movwf	___lldiv@divisor+2
 10468  03B0  3003               	movlw	3
 10469  03B1  00F1               	movwf	___lldiv@divisor+1
 10470  03B2  30E8               	movlw	232
 10471  03B3  00F0               	movwf	___lldiv@divisor
 10472  03B4  084B               	movf	(_EPCRunTime+3)^(0+128),w
 10473  03B5  00F7               	movwf	___lldiv@dividend+3
 10474  03B6  084A               	movf	(_EPCRunTime+2)^(0+128),w
 10475  03B7  00F6               	movwf	___lldiv@dividend+2
 10476  03B8  0849               	movf	(_EPCRunTime+1)^(0+128),w
 10477  03B9  00F5               	movwf	___lldiv@dividend+1
 10478  03BA  0848               	movf	_EPCRunTime^(0+128),w
 10479  03BB  00F4               	movwf	___lldiv@dividend
 10480  03BC  318D  25E1  3183   	fcall	___lldiv
 10481  03BF  0871               	movf	?___lldiv+1,w
 10482  03C0  0021               	movlb	1	; select bank1
 10483  03C1  00E2               	movwf	((_ModbusData+1)^(0+128)+2)
 10484  03C2  0870               	movf	?___lldiv,w
 10485  03C3  00E1               	movwf	(_ModbusData^(0+128)+2)
 10486                           
 10487                           ;main.c: 298: if(EPCPulseCountClock > 0)
 10488  03C4  0020               	movlb	0	; select bank0
 10489  03C5  0857               	movf	_EPCPulseCountClock,w
 10490  03C6  0458               	iorwf	_EPCPulseCountClock+1,w
 10491  03C7  1903               	btfsc	3,2
 10492  03C8  2BCC               	goto	i1l3298
 10493                           
 10494                           ;main.c: 299: ModbusData.mcuTOplcData.NutRunDirection = CLOCKWISE;
 10495  03C9  0021               	movlb	1	; select bank1
 10496  03CA  01E5               	clrf	(_ModbusData^(0+128)+6)
 10497  03CB  01E6               	clrf	((_ModbusData+1)^(0+128)+6)
 10498  03CC                     i1l3298:	
 10499                           
 10500                           ;main.c: 301: EPCRunTime = 0;
 10501  03CC  3000               	movlw	0
 10502  03CD  0021               	movlb	1	; select bank1
 10503  03CE  00CB               	movwf	(_EPCRunTime+3)^(0+128)
 10504  03CF  3000               	movlw	0
 10505  03D0  00CA               	movwf	(_EPCRunTime+2)^(0+128)
 10506  03D1  3000               	movlw	0
 10507  03D2  00C9               	movwf	(_EPCRunTime+1)^(0+128)
 10508  03D3  3000               	movlw	0
 10509  03D4  00C8               	movwf	_EPCRunTime^(0+128)
 10510                           
 10511                           ;main.c: 302: EPCPulseCountClock = 0;
 10512  03D5  0020               	movlb	0	; select bank0
 10513  03D6  01D7               	clrf	_EPCPulseCountClock
 10514  03D7  01D8               	clrf	_EPCPulseCountClock+1
 10515                           
 10516                           ;main.c: 303: EPCPulseCountAntiClock = 0;
 10517  03D8  01D5               	clrf	_EPCPulseCountAntiClock
 10518  03D9  01D6               	clrf	_EPCPulseCountAntiClock+1
 10519                           
 10520                           ;main.c: 306: do { LATCbits.LATC1 = 0; } while(0);
 10521  03DA  0022               	movlb	2	; select bank2
 10522  03DB  108E               	bcf	14,1	;volatile
 10523                           
 10524                           ;main.c: 307: do { LATCbits.LATC2 = 0; } while(0);
 10525  03DC  110E               	bcf	14,2	;volatile
 10526                           
 10527                           ;main.c: 308: do { LATCbits.LATC0 = 0; } while(0);
 10528  03DD  100E               	bcf	14,0	;volatile
 10529                           
 10530                           ;main.c: 310: if((ModbusData.mcuTOplcData.MeasurePulseCount > (ModbusData.plcTOmcuData.S
      +                          etTotalPulseRun - ModbusData.plcTOmcuData.PulseInRevolution))
 10531                           ;main.c: 311: && (ModbusData.mcuTOplcData.MeasurePulseCount < (ModbusData.plcTOmcuData.S
      +                          etTotalPulseRun + ModbusData.plcTOmcuData.PulseInRevolution)))
 10532  03DE  300A               	movlw	10
 10533  03DF  3EDF               	addlw	(low (_ModbusData| 0))& (0+255)
 10534  03E0  0086               	movwf	6
 10535  03E1  0187               	clrf	7
 10536  03E2  0021               	movlb	1	; select bank1
 10537  03E3  0967               	comf	(_ModbusData^(0+128)+8),w
 10538  03E4  0020               	movlb	0	; select bank0
 10539  03E5  00A0               	movwf	??_Timer3_Overflow
 10540  03E6  0021               	movlb	1	; select bank1
 10541  03E7  0968               	comf	((_ModbusData+1)^(0+128)+8),w
 10542  03E8  0020               	movlb	0	; select bank0
 10543  03E9  00A1               	movwf	??_Timer3_Overflow+1
 10544  03EA  0AA0               	incf	??_Timer3_Overflow,f
 10545  03EB  1903               	skipnz
 10546  03EC  0AA1               	incf	??_Timer3_Overflow+1,f
 10547  03ED  3F40               	moviw [0]fsr1
 10548  03EE  0720               	addwf	??_Timer3_Overflow,w
 10549  03EF  00A2               	movwf	??_Timer3_Overflow+2
 10550  03F0  3F41               	moviw [1]fsr1
 10551  03F1  3D21               	addwfc	??_Timer3_Overflow+1,w
 10552  03F2  00A3               	movwf	??_Timer3_Overflow+3
 10553  03F3  0021               	movlb	1	; select bank1
 10554  03F4  0860               	movf	(_ModbusData+1)^(0+128),w
 10555  03F5  0020               	movlb	0	; select bank0
 10556  03F6  0223               	subwf	??_Timer3_Overflow+3,w
 10557  03F7  1D03               	skipz
 10558  03F8  2BFD               	goto	u240_25
 10559  03F9  0021               	movlb	1	; select bank1
 10560  03FA  085F               	movf	_ModbusData^(0+128),w
 10561  03FB  0020               	movlb	0	; select bank0
 10562  03FC  0222               	subwf	??_Timer3_Overflow+2,w
 10563  03FD                     u240_25:	
 10564  03FD  1803               	skipnc
 10565  03FE  2C28               	goto	i1l3318
 10566  03FF  3008               	movlw	8
 10567  0400  3EDF               	addlw	(low (_ModbusData| 0))& (0+255)
 10568  0401  0086               	movwf	6
 10569  0402  0187               	clrf	7
 10570  0403  300A               	movlw	10
 10571  0404  3EDF               	addlw	(low (_ModbusData| 0))& (0+255)
 10572  0405  0084               	movwf	4
 10573  0406  0185               	clrf	5
 10574  0407  3F40               	moviw [0]fsr1
 10575  0408  0700               	addwf	0,w
 10576  0409  00A0               	movwf	??_Timer3_Overflow
 10577  040A  3101               	addfsr 0,1
 10578  040B  3F41               	moviw [1]fsr1
 10579  040C  3D00               	addwfc	0,w
 10580  040D  00A1               	movwf	??_Timer3_Overflow+1
 10581  040E  0821               	movf	??_Timer3_Overflow+1,w
 10582  040F  0021               	movlb	1	; select bank1
 10583  0410  0260               	subwf	(_ModbusData+1)^(0+128),w
 10584  0411  1D03               	skipz
 10585  0412  2C17               	goto	u241_25
 10586  0413  0020               	movlb	0	; select bank0
 10587  0414  0820               	movf	??_Timer3_Overflow,w
 10588  0415  0021               	movlb	1	; select bank1
 10589  0416  025F               	subwf	_ModbusData^(0+128),w
 10590  0417                     u241_25:	
 10591  0417  1803               	skipnc
 10592  0418  2C28               	goto	i1l3318
 10593                           
 10594                           ;main.c: 312: {
 10595                           ;main.c: 313: ModbusData.mcuTOplcData.NutRunState = STOP_OK;
 10596  0419  3002               	movlw	2
 10597  041A  00E3               	movwf	(_ModbusData^(0+128)+4)
 10598  041B  3000               	movlw	0
 10599  041C  00E4               	movwf	(_ModbusData^(0+128)+5)
 10600                           
 10601                           ;main.c: 315: LedONStartConfig(1, 1, 5);
 10602  041D  01F8               	clrf	i1LedONStartConfig@LedONDurationSec
 10603  041E  0AF8               	incf	i1LedONStartConfig@LedONDurationSec,f
 10604  041F  3005               	movlw	5
 10605  0420  0020               	movlb	0	; select bank0
 10606  0421  00A0               	movwf	??_Timer3_Overflow
 10607  0422  0820               	movf	??_Timer3_Overflow,w
 10608  0423  00F9               	movwf	i1LedONStartConfig@LedONNumBlink
 10609  0424  3001               	movlw	1
 10610  0425  318F  2736         	fcall	i1_LedONStartConfig
 10611                           
 10612                           ;main.c: 316: }
 10613  0427  0008               	return
 10614  0428                     i1l3318:	
 10615                           
 10616                           ;main.c: 317: else
 10617                           ;main.c: 318: {
 10618                           ;main.c: 319: ModbusData.mcuTOplcData.NutRunState = STOP_NOK;
 10619  0428  3003               	movlw	3
 10620  0429  0021               	movlb	1	; select bank1
 10621  042A  00E3               	movwf	(_ModbusData^(0+128)+4)
 10622  042B  3000               	movlw	0
 10623  042C  00E4               	movwf	(_ModbusData^(0+128)+5)
 10624                           
 10625                           ;main.c: 321: LedONStartConfig(0, 1, 5);
 10626  042D  01F8               	clrf	i1LedONStartConfig@LedONDurationSec
 10627  042E  0AF8               	incf	i1LedONStartConfig@LedONDurationSec,f
 10628  042F  3005               	movlw	5
 10629  0430  0020               	movlb	0	; select bank0
 10630  0431  00A0               	movwf	??_Timer3_Overflow
 10631  0432  0820               	movf	??_Timer3_Overflow,w
 10632  0433  00F9               	movwf	i1LedONStartConfig@LedONNumBlink
 10633  0434  3000               	movlw	0
 10634  0435  318F  2736         	fcall	i1_LedONStartConfig
 10635  0437  0008               	return
 10636  0438                     __end_of_Timer3_Overflow:	
 10637                           
 10638                           	psect	text46
 10639  0F36                     __ptext46:	
 10640 ;; *************** function i1_LedONStartConfig *****************
 10641 ;; Defined at:
 10642 ;;		line 18 in file "LED_Ctrl.c"
 10643 ;; Parameters:    Size  Location     Type
 10644 ;;  LEDcolor        1    wreg     unsigned char 
 10645 ;;  LedONDuratio    1    8[COMMON] unsigned char 
 10646 ;;  LedONNumBlin    1    9[COMMON] unsigned char 
 10647 ;; Auto vars:     Size  Location     Type
 10648 ;;  LEDcolor        1   12[COMMON] unsigned char 
 10649 ;; Return value:  Size  Location     Type
 10650 ;;                  1    wreg      unsigned char 
 10651 ;; Registers used:
 10652 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 10653 ;; Tracked objects:
 10654 ;;		On entry : 0/0
 10655 ;;		On exit  : 0/0
 10656 ;;		Unchanged: 0/0
 10657 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10658 ;;      Params:         2       0       0       0       0       0       0       0
 10659 ;;      Locals:         1       0       0       0       0       0       0       0
 10660 ;;      Temps:          2       0       0       0       0       0       0       0
 10661 ;;      Totals:         5       0       0       0       0       0       0       0
 10662 ;;Total ram usage:        5 bytes
 10663 ;; Hardware stack levels used:    1
 10664 ;; Hardware stack levels required when called:    1
 10665 ;; This function calls:
 10666 ;;		i1___lwdiv
 10667 ;;		i1___wmul
 10668 ;; This function is called by:
 10669 ;;		_Timer3_Overflow
 10670 ;; This function uses a non-reentrant model
 10671 ;;
 10672                           
 10673                           
 10674                           ;psect for function i1_LedONStartConfig
 10675  0F36                     i1_LedONStartConfig:	
 10676                           
 10677                           ;incstack = 0
 10678                           ; Regs used in i1_LedONStartConfig: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 10679                           ;i1LedONStartConfig@LEDcolor stored from wreg
 10680  0F36  00FC               	movwf	i1LedONStartConfig@LEDcolor
 10681                           
 10682                           ;LED_Ctrl.c: 20: if(Led_ON!=1 && (LedONDurationSec!=0)&& (LedONDurationSec <= 60))
 10683  0F37  0020               	movlb	0	; select bank0
 10684  0F38  0361               	decf	_Led_ON,w
 10685  0F39  1903               	btfsc	3,2
 10686  0F3A  0008               	return
 10687  0F3B  0878               	movf	i1LedONStartConfig@LedONDurationSec,w
 10688  0F3C  1903               	btfsc	3,2
 10689  0F3D  0008               	return
 10690  0F3E  303D               	movlw	61
 10691  0F3F  0278               	subwf	i1LedONStartConfig@LedONDurationSec,w
 10692  0F40  1803               	skipnc
 10693  0F41  0008               	return
 10694                           
 10695                           ;LED_Ctrl.c: 21: {
 10696                           ;LED_Ctrl.c: 22: Led_ON=1;
 10697  0F42  01E1               	clrf	_Led_ON
 10698  0F43  0AE1               	incf	_Led_ON,f
 10699                           
 10700                           ;LED_Ctrl.c: 23: LED_Color=LEDcolor;
 10701  0F44  087C               	movf	i1LedONStartConfig@LEDcolor,w
 10702  0F45  00FA               	movwf	??i1_LedONStartConfig
 10703  0F46  087A               	movf	??i1_LedONStartConfig,w
 10704  0F47  00EA               	movwf	_LED_Color
 10705                           
 10706                           ;LED_Ctrl.c: 25: switch(LED_Color)
 10707  0F48  2F52               	goto	i1l3260
 10708  0F49                     i1l616:	
 10709                           ;LED_Ctrl.c: 26: {
 10710                           ;LED_Ctrl.c: 27: case 0 : do { LATCbits.LATC0 = 1; } while(0);
 10711                           
 10712  0F49  0022               	movlb	2	; select bank2
 10713  0F4A  140E               	bsf	14,0	;volatile
 10714                           
 10715                           ;LED_Ctrl.c: 28: break;
 10716  0F4B  2F5E               	goto	i1l3262
 10717  0F4C                     i1l620:	
 10718                           ;LED_Ctrl.c: 29: case 1 : do { LATCbits.LATC1 = 1; } while(0);
 10719                           
 10720  0F4C  0022               	movlb	2	; select bank2
 10721  0F4D  148E               	bsf	14,1	;volatile
 10722                           
 10723                           ;LED_Ctrl.c: 30: break;
 10724  0F4E  2F5E               	goto	i1l3262
 10725  0F4F                     i1l623:	
 10726                           ;LED_Ctrl.c: 31: case 2 : do { LATCbits.LATC2 = 1; } while(0);
 10727                           
 10728  0F4F  0022               	movlb	2	; select bank2
 10729  0F50  150E               	bsf	14,2	;volatile
 10730                           
 10731                           ;LED_Ctrl.c: 34: }
 10732                           
 10733                           ;LED_Ctrl.c: 33: default : break;
 10734                           
 10735                           ;LED_Ctrl.c: 32: break;
 10736  0F51  2F5E               	goto	i1l3262
 10737  0F52                     i1l3260:	
 10738  0F52  0020               	movlb	0	; select bank0
 10739  0F53  086A               	movf	_LED_Color,w
 10740                           
 10741                           ; Switch size 1, requested type "space"
 10742                           ; Number of cases is 3, Range of values is 0 to 2
 10743                           ; switch strategies available:
 10744                           ; Name         Instructions Cycles
 10745                           ; simple_byte           10     6 (average)
 10746                           ; direct_byte           12     6 (fixed)
 10747                           ; jumptable            260     6 (fixed)
 10748                           ;	Chosen strategy is simple_byte
 10749  0F54  3A00               	xorlw	0	; case 0
 10750  0F55  1903               	skipnz
 10751  0F56  2F49               	goto	i1l616
 10752  0F57  3A01               	xorlw	1	; case 1
 10753  0F58  1903               	skipnz
 10754  0F59  2F4C               	goto	i1l620
 10755  0F5A  3A03               	xorlw	3	; case 2
 10756  0F5B  1903               	skipnz
 10757  0F5C  2F4F               	goto	i1l623
 10758  0F5D  2F5E               	goto	i1l3262
 10759  0F5E                     i1l3262:	
 10760                           
 10761                           ;LED_Ctrl.c: 36: LED_msec_Cnt=0;
 10762  0F5E  0021               	movlb	1	; select bank1
 10763  0F5F  01D2               	clrf	_LED_msec_Cnt^(0+128)
 10764  0F60  01D3               	clrf	(_LED_msec_Cnt+1)^(0+128)
 10765                           
 10766                           ;LED_Ctrl.c: 37: LedON_Duration_msec=((unsigned int)LedONDurationSec)*1000;
 10767  0F61  0878               	movf	i1LedONStartConfig@LedONDurationSec,w
 10768  0F62  00FA               	movwf	??i1_LedONStartConfig
 10769  0F63  01FB               	clrf	??i1_LedONStartConfig+1
 10770  0F64  087A               	movf	??i1_LedONStartConfig,w
 10771  0F65  00F0               	movwf	i1___wmul@multiplier
 10772  0F66  087B               	movf	??i1_LedONStartConfig+1,w
 10773  0F67  00F1               	movwf	i1___wmul@multiplier+1
 10774  0F68  30E8               	movlw	232
 10775  0F69  00F2               	movwf	i1___wmul@multiplicand
 10776  0F6A  3003               	movlw	3
 10777  0F6B  00F3               	movwf	i1___wmul@multiplicand+1
 10778  0F6C  318C  242D  318F   	fcall	i1___wmul
 10779  0F6F  0871               	movf	?i1___wmul+1,w
 10780  0F70  0020               	movlb	0	; select bank0
 10781  0F71  00D2               	movwf	_LedON_Duration_msec+1
 10782  0F72  0870               	movf	?i1___wmul,w
 10783  0F73  00D1               	movwf	_LedON_Duration_msec
 10784                           
 10785                           ;LED_Ctrl.c: 38: if(LedONNumBlink > 1)
 10786  0F74  3002               	movlw	2
 10787  0F75  0279               	subwf	i1LedONStartConfig@LedONNumBlink,w
 10788  0F76  1C03               	skipc
 10789  0F77  2F8F               	goto	i1l3270
 10790                           
 10791                           ;LED_Ctrl.c: 39: Blick_tickPointMsec=(LedON_Duration_msec/(((LedONNumBlink-1)*2)+1));
 10792  0F78  0879               	movf	i1LedONStartConfig@LedONNumBlink,w
 10793  0F79  00FA               	movwf	??i1_LedONStartConfig
 10794  0F7A  01FB               	clrf	??i1_LedONStartConfig+1
 10795  0F7B  35FA               	lslf	??i1_LedONStartConfig,f
 10796  0F7C  0DFB               	rlf	??i1_LedONStartConfig+1,f
 10797  0F7D  087A               	movf	??i1_LedONStartConfig,w
 10798  0F7E  3EFF               	addlw	255
 10799  0F7F  00F0               	movwf	i1___lwdiv@divisor
 10800  0F80  30FF               	movlw	255
 10801  0F81  3D7B               	addwfc	??i1_LedONStartConfig+1,w
 10802  0F82  00F1               	movwf	i1___lwdiv@divisor+1
 10803  0F83  0852               	movf	_LedON_Duration_msec+1,w
 10804  0F84  00F3               	movwf	i1___lwdiv@dividend+1
 10805  0F85  0851               	movf	_LedON_Duration_msec,w
 10806  0F86  00F2               	movwf	i1___lwdiv@dividend
 10807  0F87  318D  2573  318F   	fcall	i1___lwdiv
 10808  0F8A  0871               	movf	?i1___lwdiv+1,w
 10809  0F8B  0020               	movlb	0	; select bank0
 10810  0F8C  00D4               	movwf	_Blick_tickPointMsec+1
 10811  0F8D  0870               	movf	?i1___lwdiv,w
 10812  0F8E  2F92               	goto	L3
 10813  0F8F                     i1l3270:	
 10814                           
 10815                           ;LED_Ctrl.c: 40: else
 10816                           ;LED_Ctrl.c: 41: Blick_tickPointMsec=LedON_Duration_msec;
 10817  0F8F  0852               	movf	_LedON_Duration_msec+1,w
 10818  0F90  00D4               	movwf	_Blick_tickPointMsec+1
 10819  0F91  0851               	movf	_LedON_Duration_msec,w
 10820  0F92                     L3:	
 10821  0F92  00D3               	movwf	_Blick_tickPointMsec
 10822                           
 10823                           ;LED_Ctrl.c: 43: Blick_tickPoint=Blick_tickPointMsec;
 10824  0F93  0854               	movf	_Blick_tickPointMsec+1,w
 10825  0F94  0021               	movlb	1	; select bank1
 10826  0F95  00D1               	movwf	(_Blick_tickPoint+1)^(0+128)
 10827  0F96  0020               	movlb	0	; select bank0
 10828  0F97  0853               	movf	_Blick_tickPointMsec,w
 10829  0F98  0021               	movlb	1	; select bank1
 10830  0F99  00D0               	movwf	_Blick_tickPoint^(0+128)
 10831                           
 10832                           ;LED_Ctrl.c: 46: else
 10833                           ;LED_Ctrl.c: 47: {
 10834                           ;LED_Ctrl.c: 48: return 0;
 10835                           ;	Return value of i1_LedONStartConfig is never used
 10836                           
 10837                           ;LED_Ctrl.c: 45: }
 10838                           
 10839                           ;LED_Ctrl.c: 44: return 1;
 10840                           ;	Return value of i1_LedONStartConfig is never used
 10841  0F9A  0008               	return
 10842  0F9B                     __end_ofi1_LedONStartConfig:	
 10843                           
 10844                           	psect	text47
 10845  0C2D                     __ptext47:	
 10846 ;; *************** function i1___wmul *****************
 10847 ;; Defined at:
 10848 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\Umul16.c"
 10849 ;; Parameters:    Size  Location     Type
 10850 ;;  multiplier      2    0[COMMON] unsigned int 
 10851 ;;  multiplicand    2    2[COMMON] unsigned int 
 10852 ;; Auto vars:     Size  Location     Type
 10853 ;;  __wmul          2    4[COMMON] unsigned int 
 10854 ;; Return value:  Size  Location     Type
 10855 ;;                  2    0[COMMON] unsigned int 
 10856 ;; Registers used:
 10857 ;;		wreg, status,2, status,0
 10858 ;; Tracked objects:
 10859 ;;		On entry : 0/0
 10860 ;;		On exit  : 0/0
 10861 ;;		Unchanged: 0/0
 10862 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10863 ;;      Params:         4       0       0       0       0       0       0       0
 10864 ;;      Locals:         2       0       0       0       0       0       0       0
 10865 ;;      Temps:          0       0       0       0       0       0       0       0
 10866 ;;      Totals:         6       0       0       0       0       0       0       0
 10867 ;;Total ram usage:        6 bytes
 10868 ;; Hardware stack levels used:    1
 10869 ;; This function calls:
 10870 ;;		Nothing
 10871 ;; This function is called by:
 10872 ;;		i1_LedONStartConfig
 10873 ;; This function uses a non-reentrant model
 10874 ;;
 10875                           
 10876                           
 10877                           ;psect for function i1___wmul
 10878  0C2D                     i1___wmul:	
 10879                           
 10880                           ;incstack = 0
 10881                           ; Regs used in i1___wmul: [wreg+status,2+status,0]
 10882  0C2D  01F4               	clrf	i1___wmul@product
 10883  0C2E  01F5               	clrf	i1___wmul@product+1
 10884  0C2F                     i1l3066:	
 10885  0C2F  1C70               	btfss	i1___wmul@multiplier,0
 10886  0C30  2C35               	goto	i1l1084
 10887  0C31  0872               	movf	i1___wmul@multiplicand,w
 10888  0C32  07F4               	addwf	i1___wmul@product,f
 10889  0C33  0873               	movf	i1___wmul@multiplicand+1,w
 10890  0C34  3DF5               	addwfc	i1___wmul@product+1,f
 10891  0C35                     i1l1084:	
 10892  0C35  3001               	movlw	1
 10893  0C36                     u192_25:	
 10894  0C36  35F2               	lslf	i1___wmul@multiplicand,f
 10895  0C37  0DF3               	rlf	i1___wmul@multiplicand+1,f
 10896  0C38  0B89               	decfsz	9,f
 10897  0C39  2C36               	goto	u192_25
 10898  0C3A  3001               	movlw	1
 10899  0C3B                     u193_25:	
 10900  0C3B  36F1               	lsrf	i1___wmul@multiplier+1,f
 10901  0C3C  0CF0               	rrf	i1___wmul@multiplier,f
 10902  0C3D  0B89               	decfsz	9,f
 10903  0C3E  2C3B               	goto	u193_25
 10904  0C3F  0870               	movf	i1___wmul@multiplier,w
 10905  0C40  0471               	iorwf	i1___wmul@multiplier+1,w
 10906  0C41  1D03               	btfss	3,2
 10907  0C42  2C2F               	goto	i1l3066
 10908  0C43  0875               	movf	i1___wmul@product+1,w
 10909  0C44  00F1               	movwf	?i1___wmul+1
 10910  0C45  0874               	movf	i1___wmul@product,w
 10911  0C46  00F0               	movwf	?i1___wmul
 10912  0C47  0008               	return
 10913  0C48                     __end_ofi1___wmul:	
 10914                           
 10915                           	psect	text48
 10916  0D73                     __ptext48:	
 10917 ;; *************** function i1___lwdiv *****************
 10918 ;; Defined at:
 10919 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lwdiv.c"
 10920 ;; Parameters:    Size  Location     Type
 10921 ;;  divisor         2    0[COMMON] unsigned int 
 10922 ;;  dividend        2    2[COMMON] unsigned int 
 10923 ;; Auto vars:     Size  Location     Type
 10924 ;;  __lwdiv         2    5[COMMON] unsigned int 
 10925 ;;  __lwdiv         1    7[COMMON] unsigned char 
 10926 ;; Return value:  Size  Location     Type
 10927 ;;                  2    0[COMMON] unsigned int 
 10928 ;; Registers used:
 10929 ;;		wreg, status,2, status,0
 10930 ;; Tracked objects:
 10931 ;;		On entry : 0/0
 10932 ;;		On exit  : 0/0
 10933 ;;		Unchanged: 0/0
 10934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 10935 ;;      Params:         4       0       0       0       0       0       0       0
 10936 ;;      Locals:         3       0       0       0       0       0       0       0
 10937 ;;      Temps:          1       0       0       0       0       0       0       0
 10938 ;;      Totals:         8       0       0       0       0       0       0       0
 10939 ;;Total ram usage:        8 bytes
 10940 ;; Hardware stack levels used:    1
 10941 ;; This function calls:
 10942 ;;		Nothing
 10943 ;; This function is called by:
 10944 ;;		i1_LedONStartConfig
 10945 ;; This function uses a non-reentrant model
 10946 ;;
 10947                           
 10948                           
 10949                           ;psect for function i1___lwdiv
 10950  0D73                     i1___lwdiv:	
 10951                           
 10952                           ;incstack = 0
 10953                           ; Regs used in i1___lwdiv: [wreg+status,2+status,0]
 10954  0D73  01F5               	clrf	i1___lwdiv@quotient
 10955  0D74  01F6               	clrf	i1___lwdiv@quotient+1
 10956  0D75  0870               	movf	i1___lwdiv@divisor,w
 10957  0D76  0471               	iorwf	i1___lwdiv@divisor+1,w
 10958  0D77  1903               	btfsc	3,2
 10959  0D78  2DA2               	goto	i1l3100
 10960  0D79  01F7               	clrf	i1___lwdiv@counter
 10961  0D7A  0AF7               	incf	i1___lwdiv@counter,f
 10962  0D7B                     i1l3088:	
 10963  0D7B  1BF1               	btfsc	i1___lwdiv@divisor+1,7
 10964  0D7C  2D87               	goto	i1l3090
 10965  0D7D  3001               	movlw	1
 10966  0D7E                     u196_25:	
 10967  0D7E  35F0               	lslf	i1___lwdiv@divisor,f
 10968  0D7F  0DF1               	rlf	i1___lwdiv@divisor+1,f
 10969  0D80  0B89               	decfsz	9,f
 10970  0D81  2D7E               	goto	u196_25
 10971  0D82  3001               	movlw	1
 10972  0D83  00F4               	movwf	??i1___lwdiv
 10973  0D84  0874               	movf	??i1___lwdiv,w
 10974  0D85  07F7               	addwf	i1___lwdiv@counter,f
 10975  0D86  2D7B               	goto	i1l3088
 10976  0D87                     i1l3090:	
 10977  0D87  3001               	movlw	1
 10978  0D88                     u198_25:	
 10979  0D88  35F5               	lslf	i1___lwdiv@quotient,f
 10980  0D89  0DF6               	rlf	i1___lwdiv@quotient+1,f
 10981  0D8A  0B89               	decfsz	9,f
 10982  0D8B  2D88               	goto	u198_25
 10983  0D8C  0871               	movf	i1___lwdiv@divisor+1,w
 10984  0D8D  0273               	subwf	i1___lwdiv@dividend+1,w
 10985  0D8E  1D03               	skipz
 10986  0D8F  2D92               	goto	u199_25
 10987  0D90  0870               	movf	i1___lwdiv@divisor,w
 10988  0D91  0272               	subwf	i1___lwdiv@dividend,w
 10989  0D92                     u199_25:	
 10990  0D92  1C03               	skipc
 10991  0D93  2D99               	goto	i1l3096
 10992  0D94  0870               	movf	i1___lwdiv@divisor,w
 10993  0D95  02F2               	subwf	i1___lwdiv@dividend,f
 10994  0D96  0871               	movf	i1___lwdiv@divisor+1,w
 10995  0D97  3BF3               	subwfb	i1___lwdiv@dividend+1,f
 10996  0D98  1475               	bsf	i1___lwdiv@quotient,0
 10997  0D99                     i1l3096:	
 10998  0D99  3001               	movlw	1
 10999  0D9A                     u200_25:	
 11000  0D9A  36F1               	lsrf	i1___lwdiv@divisor+1,f
 11001  0D9B  0CF0               	rrf	i1___lwdiv@divisor,f
 11002  0D9C  0B89               	decfsz	9,f
 11003  0D9D  2D9A               	goto	u200_25
 11004  0D9E  3001               	movlw	1
 11005  0D9F  02F7               	subwf	i1___lwdiv@counter,f
 11006  0DA0  1D03               	btfss	3,2
 11007  0DA1  2D87               	goto	i1l3090
 11008  0DA2                     i1l3100:	
 11009  0DA2  0876               	movf	i1___lwdiv@quotient+1,w
 11010  0DA3  00F1               	movwf	?i1___lwdiv+1
 11011  0DA4  0875               	movf	i1___lwdiv@quotient,w
 11012  0DA5  00F0               	movwf	?i1___lwdiv
 11013  0DA6  0008               	return
 11014  0DA7                     __end_ofi1___lwdiv:	
 11015                           
 11016                           	psect	text49
 11017  0DE1                     __ptext49:	
 11018 ;; *************** function ___lldiv *****************
 11019 ;; Defined at:
 11020 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.41\sources\common\lldiv.c"
 11021 ;; Parameters:    Size  Location     Type
 11022 ;;  divisor         4    0[COMMON] unsigned long 
 11023 ;;  dividend        4    4[COMMON] unsigned long 
 11024 ;; Auto vars:     Size  Location     Type
 11025 ;;  quotient        4    9[COMMON] unsigned long 
 11026 ;;  counter         1   13[COMMON] unsigned char 
 11027 ;; Return value:  Size  Location     Type
 11028 ;;                  4    0[COMMON] unsigned long 
 11029 ;; Registers used:
 11030 ;;		wreg, status,2, status,0
 11031 ;; Tracked objects:
 11032 ;;		On entry : 0/0
 11033 ;;		On exit  : 0/0
 11034 ;;		Unchanged: 0/0
 11035 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11036 ;;      Params:         8       0       0       0       0       0       0       0
 11037 ;;      Locals:         5       0       0       0       0       0       0       0
 11038 ;;      Temps:          1       0       0       0       0       0       0       0
 11039 ;;      Totals:        14       0       0       0       0       0       0       0
 11040 ;;Total ram usage:       14 bytes
 11041 ;; Hardware stack levels used:    1
 11042 ;; This function calls:
 11043 ;;		Nothing
 11044 ;; This function is called by:
 11045 ;;		_Timer3_Overflow
 11046 ;; This function uses a non-reentrant model
 11047 ;;
 11048                           
 11049                           
 11050                           ;psect for function ___lldiv
 11051  0DE1                     ___lldiv:	
 11052                           
 11053                           ;incstack = 0
 11054                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
 11055  0DE1  3000               	movlw	0
 11056  0DE2  00FC               	movwf	___lldiv@quotient+3
 11057  0DE3  3000               	movlw	0
 11058  0DE4  00FB               	movwf	___lldiv@quotient+2
 11059  0DE5  3000               	movlw	0
 11060  0DE6  00FA               	movwf	___lldiv@quotient+1
 11061  0DE7  3000               	movlw	0
 11062  0DE8  00F9               	movwf	___lldiv@quotient
 11063  0DE9  0873               	movf	___lldiv@divisor+3,w
 11064  0DEA  0472               	iorwf	___lldiv@divisor+2,w
 11065  0DEB  0471               	iorwf	___lldiv@divisor+1,w
 11066  0DEC  0470               	iorwf	___lldiv@divisor,w
 11067  0DED  1903               	skipnz
 11068  0DEE  2E2A               	goto	i1l3244
 11069  0DEF  01FD               	clrf	___lldiv@counter
 11070  0DF0  0AFD               	incf	___lldiv@counter,f
 11071  0DF1                     i1l3230:	
 11072  0DF1  1BF3               	btfsc	___lldiv@divisor+3,7
 11073  0DF2  2DFF               	goto	i1l3232
 11074  0DF3  3001               	movlw	1
 11075  0DF4                     u227_25:	
 11076  0DF4  35F0               	lslf	___lldiv@divisor,f
 11077  0DF5  0DF1               	rlf	___lldiv@divisor+1,f
 11078  0DF6  0DF2               	rlf	___lldiv@divisor+2,f
 11079  0DF7  0DF3               	rlf	___lldiv@divisor+3,f
 11080  0DF8  0B89               	decfsz	9,f
 11081  0DF9  2DF4               	goto	u227_25
 11082  0DFA  3001               	movlw	1
 11083  0DFB  00F8               	movwf	??___lldiv
 11084  0DFC  0878               	movf	??___lldiv,w
 11085  0DFD  07FD               	addwf	___lldiv@counter,f
 11086  0DFE  2DF1               	goto	i1l3230
 11087  0DFF                     i1l3232:	
 11088  0DFF  3001               	movlw	1
 11089  0E00                     u229_25:	
 11090  0E00  35F9               	lslf	___lldiv@quotient,f
 11091  0E01  0DFA               	rlf	___lldiv@quotient+1,f
 11092  0E02  0DFB               	rlf	___lldiv@quotient+2,f
 11093  0E03  0DFC               	rlf	___lldiv@quotient+3,f
 11094  0E04  0B89               	decfsz	9,f
 11095  0E05  2E00               	goto	u229_25
 11096  0E06  0873               	movf	___lldiv@divisor+3,w
 11097  0E07  0277               	subwf	___lldiv@dividend+3,w
 11098  0E08  1D03               	skipz
 11099  0E09  2E14               	goto	u230_25
 11100  0E0A  0872               	movf	___lldiv@divisor+2,w
 11101  0E0B  0276               	subwf	___lldiv@dividend+2,w
 11102  0E0C  1D03               	skipz
 11103  0E0D  2E14               	goto	u230_25
 11104  0E0E  0871               	movf	___lldiv@divisor+1,w
 11105  0E0F  0275               	subwf	___lldiv@dividend+1,w
 11106  0E10  1D03               	skipz
 11107  0E11  2E14               	goto	u230_25
 11108  0E12  0870               	movf	___lldiv@divisor,w
 11109  0E13  0274               	subwf	___lldiv@dividend,w
 11110  0E14                     u230_25:	
 11111  0E14  1C03               	skipc
 11112  0E15  2E1F               	goto	i1l3240
 11113  0E16  0870               	movf	___lldiv@divisor,w
 11114  0E17  02F4               	subwf	___lldiv@dividend,f
 11115  0E18  0871               	movf	___lldiv@divisor+1,w
 11116  0E19  3BF5               	subwfb	___lldiv@dividend+1,f
 11117  0E1A  0872               	movf	___lldiv@divisor+2,w
 11118  0E1B  3BF6               	subwfb	___lldiv@dividend+2,f
 11119  0E1C  0873               	movf	___lldiv@divisor+3,w
 11120  0E1D  3BF7               	subwfb	___lldiv@dividend+3,f
 11121  0E1E  1479               	bsf	___lldiv@quotient,0
 11122  0E1F                     i1l3240:	
 11123  0E1F  3001               	movlw	1
 11124  0E20                     u231_25:	
 11125  0E20  36F3               	lsrf	___lldiv@divisor+3,f
 11126  0E21  0CF2               	rrf	___lldiv@divisor+2,f
 11127  0E22  0CF1               	rrf	___lldiv@divisor+1,f
 11128  0E23  0CF0               	rrf	___lldiv@divisor,f
 11129  0E24  0B89               	decfsz	9,f
 11130  0E25  2E20               	goto	u231_25
 11131  0E26  3001               	movlw	1
 11132  0E27  02FD               	subwf	___lldiv@counter,f
 11133  0E28  1D03               	btfss	3,2
 11134  0E29  2DFF               	goto	i1l3232
 11135  0E2A                     i1l3244:	
 11136  0E2A  087C               	movf	___lldiv@quotient+3,w
 11137  0E2B  00F3               	movwf	?___lldiv+3
 11138  0E2C  087B               	movf	___lldiv@quotient+2,w
 11139  0E2D  00F2               	movwf	?___lldiv+2
 11140  0E2E  087A               	movf	___lldiv@quotient+1,w
 11141  0E2F  00F1               	movwf	?___lldiv+1
 11142  0E30  0879               	movf	___lldiv@quotient,w
 11143  0E31  00F0               	movwf	?___lldiv
 11144  0E32  0008               	return
 11145  0E33                     __end_of___lldiv:	
 11146                           
 11147                           	psect	text50
 11148  0ABC                     __ptext50:	
 11149 ;; *************** function _TMR0_ISR *****************
 11150 ;; Defined at:
 11151 ;;		line 123 in file "mcc_generated_files/tmr0.c"
 11152 ;; Parameters:    Size  Location     Type
 11153 ;;		None
 11154 ;; Auto vars:     Size  Location     Type
 11155 ;;		None
 11156 ;; Return value:  Size  Location     Type
 11157 ;;                  1    wreg      void 
 11158 ;; Registers used:
 11159 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11160 ;; Tracked objects:
 11161 ;;		On entry : 0/0
 11162 ;;		On exit  : 0/0
 11163 ;;		Unchanged: 0/0
 11164 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11165 ;;      Params:         0       0       0       0       0       0       0       0
 11166 ;;      Locals:         0       0       0       0       0       0       0       0
 11167 ;;      Temps:          0       0       0       0       0       0       0       0
 11168 ;;      Totals:         0       0       0       0       0       0       0       0
 11169 ;;Total ram usage:        0 bytes
 11170 ;; Hardware stack levels used:    1
 11171 ;; Hardware stack levels required when called:    3
 11172 ;; This function calls:
 11173 ;;		_TMR0_CallBack
 11174 ;; This function is called by:
 11175 ;;		_INTERRUPT_InterruptManager
 11176 ;; This function uses a non-reentrant model
 11177 ;;
 11178                           
 11179                           
 11180                           ;psect for function _TMR0_ISR
 11181  0ABC                     _TMR0_ISR:	
 11182                           
 11183                           ;tmr0.c: 126: PIR0bits.TMR0IF = 0;
 11184                           
 11185                           ;incstack = 0
 11186                           ; Regs used in _TMR0_ISR: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11187  0ABC  0020               	movlb	0	; select bank0
 11188  0ABD  1290               	bcf	16,5	;volatile
 11189                           
 11190                           ;tmr0.c: 129: TMR0_CallBack();
 11191  0ABE  318B  233C         	fcall	_TMR0_CallBack
 11192  0AC0  0008               	return
 11193  0AC1                     __end_of_TMR0_ISR:	
 11194                           
 11195                           	psect	text51
 11196  0B3C                     __ptext51:	
 11197 ;; *************** function _TMR0_CallBack *****************
 11198 ;; Defined at:
 11199 ;;		line 134 in file "mcc_generated_files/tmr0.c"
 11200 ;; Parameters:    Size  Location     Type
 11201 ;;		None
 11202 ;; Auto vars:     Size  Location     Type
 11203 ;;		None
 11204 ;; Return value:  Size  Location     Type
 11205 ;;                  1    wreg      void 
 11206 ;; Registers used:
 11207 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11208 ;; Tracked objects:
 11209 ;;		On entry : 0/0
 11210 ;;		On exit  : 0/0
 11211 ;;		Unchanged: 0/0
 11212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11213 ;;      Params:         0       0       0       0       0       0       0       0
 11214 ;;      Locals:         0       0       0       0       0       0       0       0
 11215 ;;      Temps:          0       0       0       0       0       0       0       0
 11216 ;;      Totals:         0       0       0       0       0       0       0       0
 11217 ;;Total ram usage:        0 bytes
 11218 ;; Hardware stack levels used:    1
 11219 ;; Hardware stack levels required when called:    2
 11220 ;; This function calls:
 11221 ;;		Absolute function
 11222 ;;		_TMR0_DefaultInterruptHandler
 11223 ;;		_Timer0_tick10msecFunc
 11224 ;; This function is called by:
 11225 ;;		_TMR0_ISR
 11226 ;; This function uses a non-reentrant model
 11227 ;;
 11228                           
 11229                           
 11230                           ;psect for function _TMR0_CallBack
 11231  0B3C                     _TMR0_CallBack:	
 11232                           
 11233                           ;tmr0.c: 137: Timer0_tick10msecFunc();
 11234                           
 11235                           ;incstack = 0
 11236                           ; Regs used in _TMR0_CallBack: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11237  0B3C  318D  251B  318B   	fcall	_Timer0_tick10msecFunc
 11238                           
 11239                           ;tmr0.c: 139: if(TMR0_InterruptHandler)
 11240  0B3F  0021               	movlb	1	; select bank1
 11241  0B40  0858               	movf	_TMR0_InterruptHandler^(0+128),w
 11242  0B41  0459               	iorwf	(_TMR0_InterruptHandler+1)^(0+128),w
 11243  0B42  1903               	btfsc	3,2
 11244  0B43  0008               	return
 11245                           
 11246                           ;tmr0.c: 140: {
 11247                           ;tmr0.c: 141: TMR0_InterruptHandler();
 11248  0B44  0859               	movf	(_TMR0_InterruptHandler+1)^(0+128),w
 11249  0B45  008A               	movwf	10
 11250  0B46  0858               	movf	_TMR0_InterruptHandler^(0+128),w
 11251  0B47  000A               	callw
 11252  0B48  318B               	pagesel	$
 11253  0B49  0008               	return
 11254  0B4A                     __end_of_TMR0_CallBack:	
 11255                           
 11256                           	psect	text52
 11257  0D1B                     __ptext52:	
 11258 ;; *************** function _Timer0_tick10msecFunc *****************
 11259 ;; Defined at:
 11260 ;;		line 364 in file "main.c"
 11261 ;; Parameters:    Size  Location     Type
 11262 ;;		None
 11263 ;; Auto vars:     Size  Location     Type
 11264 ;;		None
 11265 ;; Return value:  Size  Location     Type
 11266 ;;                  1    wreg      void 
 11267 ;; Registers used:
 11268 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
 11269 ;; Tracked objects:
 11270 ;;		On entry : 0/0
 11271 ;;		On exit  : 0/0
 11272 ;;		Unchanged: 0/0
 11273 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11274 ;;      Params:         0       0       0       0       0       0       0       0
 11275 ;;      Locals:         0       0       0       0       0       0       0       0
 11276 ;;      Temps:          4       0       0       0       0       0       0       0
 11277 ;;      Totals:         4       0       0       0       0       0       0       0
 11278 ;;Total ram usage:        4 bytes
 11279 ;; Hardware stack levels used:    1
 11280 ;; Hardware stack levels required when called:    1
 11281 ;; This function calls:
 11282 ;;		_LedON_Control_10msec
 11283 ;; This function is called by:
 11284 ;;		_TMR0_CallBack
 11285 ;; This function uses a non-reentrant model
 11286 ;;
 11287                           
 11288                           
 11289                           ;psect for function _Timer0_tick10msecFunc
 11290  0D1B                     _Timer0_tick10msecFunc:	
 11291                           
 11292                           ;main.c: 366: LedON_Control_10msec();
 11293                           
 11294                           ;incstack = 0
 11295                           ; Regs used in _Timer0_tick10msecFunc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
 11296  0D1B  3186  26EE  318D   	fcall	_LedON_Control_10msec
 11297                           
 11298                           ;main.c: 368: TimertickMsec= TimertickMsec+10;
 11299  0D1E  300A               	movlw	10
 11300  0D1F  00F0               	movwf	??_Timer0_tick10msecFunc
 11301  0D20  3000               	movlw	0
 11302  0D21  00F1               	movwf	??_Timer0_tick10msecFunc+1
 11303  0D22  3000               	movlw	0
 11304  0D23  00F2               	movwf	??_Timer0_tick10msecFunc+2
 11305  0D24  3000               	movlw	0
 11306  0D25  00F3               	movwf	??_Timer0_tick10msecFunc+3
 11307  0D26  0021               	movlb	1	; select bank1
 11308  0D27  0844               	movf	_TimertickMsec^(0+128),w
 11309  0D28  07F0               	addwf	??_Timer0_tick10msecFunc,f
 11310  0D29  0845               	movf	(_TimertickMsec+1)^(0+128),w
 11311  0D2A  3DF1               	addwfc	??_Timer0_tick10msecFunc+1,f
 11312  0D2B  0846               	movf	(_TimertickMsec+2)^(0+128),w
 11313  0D2C  3DF2               	addwfc	??_Timer0_tick10msecFunc+2,f
 11314  0D2D  0847               	movf	(_TimertickMsec+3)^(0+128),w
 11315  0D2E  3DF3               	addwfc	??_Timer0_tick10msecFunc+3,f
 11316  0D2F  0873               	movf	??_Timer0_tick10msecFunc+3,w
 11317  0D30  00C7               	movwf	(_TimertickMsec+3)^(0+128)
 11318  0D31  0872               	movf	??_Timer0_tick10msecFunc+2,w
 11319  0D32  00C6               	movwf	(_TimertickMsec+2)^(0+128)
 11320  0D33  0871               	movf	??_Timer0_tick10msecFunc+1,w
 11321  0D34  00C5               	movwf	(_TimertickMsec+1)^(0+128)
 11322  0D35  0870               	movf	??_Timer0_tick10msecFunc,w
 11323  0D36  00C4               	movwf	_TimertickMsec^(0+128)
 11324                           
 11325                           ;main.c: 370: if(delayFlag==1)
 11326  0D37  0020               	movlb	0	; select bank0
 11327  0D38  0362               	decf	_delayFlag,w
 11328  0D39  1D03               	btfss	3,2
 11329  0D3A  0008               	return
 11330                           
 11331                           ;main.c: 371: delayCount+=10;
 11332  0D3B  300A               	movlw	10
 11333  0D3C  0021               	movlb	1	; select bank1
 11334  0D3D  07D4               	addwf	_delayCount^(0+128),f
 11335  0D3E  3000               	movlw	0
 11336  0D3F  3DD5               	addwfc	(_delayCount+1)^(0+128),f
 11337  0D40  0008               	return
 11338  0D41                     __end_of_Timer0_tick10msecFunc:	
 11339                           
 11340                           	psect	text53
 11341  06EE                     __ptext53:	
 11342 ;; *************** function _LedON_Control_10msec *****************
 11343 ;; Defined at:
 11344 ;;		line 54 in file "LED_Ctrl.c"
 11345 ;; Parameters:    Size  Location     Type
 11346 ;;		None
 11347 ;; Auto vars:     Size  Location     Type
 11348 ;;		None
 11349 ;; Return value:  Size  Location     Type
 11350 ;;                  1    wreg      void 
 11351 ;; Registers used:
 11352 ;;		wreg, fsr0l, fsr0h, status,2, status,0
 11353 ;; Tracked objects:
 11354 ;;		On entry : 0/0
 11355 ;;		On exit  : 0/0
 11356 ;;		Unchanged: 0/0
 11357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11358 ;;      Params:         0       0       0       0       0       0       0       0
 11359 ;;      Locals:         0       0       0       0       0       0       0       0
 11360 ;;      Temps:          0       0       0       0       0       0       0       0
 11361 ;;      Totals:         0       0       0       0       0       0       0       0
 11362 ;;Total ram usage:        0 bytes
 11363 ;; Hardware stack levels used:    1
 11364 ;; This function calls:
 11365 ;;		Nothing
 11366 ;; This function is called by:
 11367 ;;		_Timer0_tick10msecFunc
 11368 ;; This function uses a non-reentrant model
 11369 ;;
 11370                           
 11371                           
 11372                           ;psect for function _LedON_Control_10msec
 11373  06EE                     _LedON_Control_10msec:	
 11374                           
 11375                           ;LED_Ctrl.c: 56: if(1==Led_ON)
 11376                           
 11377                           ;incstack = 0
 11378                           ; Regs used in _LedON_Control_10msec: [wreg-fsr0h+status,2+status,0]
 11379  06EE  0020               	movlb	0	; select bank0
 11380  06EF  0361               	decf	_Led_ON,w
 11381  06F0  1D03               	btfss	3,2
 11382  06F1  0008               	return
 11383                           
 11384                           ;LED_Ctrl.c: 57: {
 11385                           ;LED_Ctrl.c: 59: if(LED_msec_Cnt >= Blick_tickPoint)
 11386  06F2  0021               	movlb	1	; select bank1
 11387  06F3  0851               	movf	(_Blick_tickPoint+1)^(0+128),w
 11388  06F4  0253               	subwf	(_LED_msec_Cnt+1)^(0+128),w
 11389  06F5  1D03               	skipz
 11390  06F6  2EF9               	goto	u211_25
 11391  06F7  0850               	movf	_Blick_tickPoint^(0+128),w
 11392  06F8  0252               	subwf	_LED_msec_Cnt^(0+128),w
 11393  06F9                     u211_25:	
 11394  06F9  1803               	btfsc	3,0
 11395  06FA  2F20               	goto	i1l3156
 11396  06FB  2F36               	goto	i1l3160
 11397  06FC                     i1l3148:	
 11398                           ;LED_Ctrl.c: 62: {
 11399                           ;LED_Ctrl.c: 63: case 0 : do { LATCbits.LATC0 = ~LATCbits.LATC0; } while(0);
 11400                           
 11401                           ;LED_Ctrl.c: 60: {
 11402                           ;LED_Ctrl.c: 61: switch(LED_Color)
 11403                           
 11404  06FC  1003               	clrc
 11405  06FD  0022               	movlb	2	; select bank2
 11406  06FE  1C0E               	btfss	14,0	;volatile
 11407  06FF  1403               	setc
 11408  0700  1C03               	btfss	3,0
 11409  0701  2F05               	goto	u212_20
 11410  0702  0022               	movlb	2	; select bank2
 11411  0703  140E               	bsf	14,0	;volatile
 11412  0704  2F2C               	goto	i1l3158
 11413  0705                     u212_20:	
 11414  0705  0022               	movlb	2	; select bank2
 11415  0706  100E               	bcf	14,0	;volatile
 11416                           
 11417                           ;LED_Ctrl.c: 64: break;
 11418  0707  2F2C               	goto	i1l3158
 11419  0708                     i1l3150:	
 11420                           ;LED_Ctrl.c: 65: case 1 : do { LATCbits.LATC1 = ~LATCbits.LATC1; } while(0);
 11421                           
 11422  0708  1003               	clrc
 11423  0709  0022               	movlb	2	; select bank2
 11424  070A  1C8E               	btfss	14,1	;volatile
 11425  070B  1403               	setc
 11426  070C  1C03               	btfss	3,0
 11427  070D  2F11               	goto	u214_20
 11428  070E  0022               	movlb	2	; select bank2
 11429  070F  148E               	bsf	14,1	;volatile
 11430  0710  2F2C               	goto	i1l3158
 11431  0711                     u214_20:	
 11432  0711  0022               	movlb	2	; select bank2
 11433  0712  108E               	bcf	14,1	;volatile
 11434                           
 11435                           ;LED_Ctrl.c: 66: break;
 11436  0713  2F2C               	goto	i1l3158
 11437  0714                     i1l3152:	
 11438                           ;LED_Ctrl.c: 67: case 2 : do { LATCbits.LATC2 = ~LATCbits.LATC2; } while(0);
 11439                           
 11440  0714  1003               	clrc
 11441  0715  0022               	movlb	2	; select bank2
 11442  0716  1D0E               	btfss	14,2	;volatile
 11443  0717  1403               	setc
 11444  0718  1C03               	btfss	3,0
 11445  0719  2F1D               	goto	u216_20
 11446  071A  0022               	movlb	2	; select bank2
 11447  071B  150E               	bsf	14,2	;volatile
 11448  071C  2F2C               	goto	i1l3158
 11449  071D                     u216_20:	
 11450  071D  0022               	movlb	2	; select bank2
 11451  071E  110E               	bcf	14,2	;volatile
 11452                           
 11453                           ;LED_Ctrl.c: 70: }
 11454                           
 11455                           ;LED_Ctrl.c: 69: default : break;
 11456                           
 11457                           ;LED_Ctrl.c: 68: break;
 11458  071F  2F2C               	goto	i1l3158
 11459  0720                     i1l3156:	
 11460  0720  0020               	movlb	0	; select bank0
 11461  0721  086A               	movf	_LED_Color,w
 11462                           
 11463                           ; Switch size 1, requested type "space"
 11464                           ; Number of cases is 3, Range of values is 0 to 2
 11465                           ; switch strategies available:
 11466                           ; Name         Instructions Cycles
 11467                           ; simple_byte           10     6 (average)
 11468                           ; direct_byte           12     6 (fixed)
 11469                           ; jumptable            260     6 (fixed)
 11470                           ;	Chosen strategy is simple_byte
 11471  0722  3A00               	xorlw	0	; case 0
 11472  0723  1903               	skipnz
 11473  0724  2EFC               	goto	i1l3148
 11474  0725  3A01               	xorlw	1	; case 1
 11475  0726  1903               	skipnz
 11476  0727  2F08               	goto	i1l3150
 11477  0728  3A03               	xorlw	3	; case 2
 11478  0729  1903               	skipnz
 11479  072A  2F14               	goto	i1l3152
 11480  072B  2F2C               	goto	i1l3158
 11481  072C                     i1l3158:	
 11482                           
 11483                           ;LED_Ctrl.c: 73: Blick_tickPoint=Blick_tickPoint+Blick_tickPointMsec;
 11484  072C  0020               	movlb	0	; select bank0
 11485  072D  0853               	movf	_Blick_tickPointMsec,w
 11486  072E  0021               	movlb	1	; select bank1
 11487  072F  0750               	addwf	_Blick_tickPoint^(0+128),w
 11488  0730  00D0               	movwf	_Blick_tickPoint^(0+128)
 11489  0731  0020               	movlb	0	; select bank0
 11490  0732  0854               	movf	_Blick_tickPointMsec+1,w
 11491  0733  0021               	movlb	1	; select bank1
 11492  0734  3D51               	addwfc	(_Blick_tickPoint+1)^(0+128),w
 11493  0735  00D1               	movwf	(_Blick_tickPoint+1)^(0+128)
 11494  0736                     i1l3160:	
 11495                           
 11496                           ;LED_Ctrl.c: 75: }
 11497                           ;LED_Ctrl.c: 77: if(LED_msec_Cnt > LedON_Duration_msec)
 11498  0736  0853               	movf	(_LED_msec_Cnt+1)^(0+128),w
 11499  0737  0020               	movlb	0	; select bank0
 11500  0738  0252               	subwf	_LedON_Duration_msec+1,w
 11501  0739  1D03               	skipz
 11502  073A  2F3F               	goto	u218_25
 11503  073B  0021               	movlb	1	; select bank1
 11504  073C  0852               	movf	_LED_msec_Cnt^(0+128),w
 11505  073D  0020               	movlb	0	; select bank0
 11506  073E  0251               	subwf	_LedON_Duration_msec,w
 11507  073F                     u218_25:	
 11508  073F  1C03               	btfss	3,0
 11509  0740  2F4B               	goto	i1l3166
 11510  0741  2F5C               	goto	i1l3170
 11511  0742                     i1l649:	
 11512                           ;LED_Ctrl.c: 80: {
 11513                           ;LED_Ctrl.c: 81: case 0 : do { LATCbits.LATC0 = 0; } while(0);
 11514                           
 11515                           ;LED_Ctrl.c: 78: {
 11516                           ;LED_Ctrl.c: 79: switch(LED_Color)
 11517                           
 11518  0742  0022               	movlb	2	; select bank2
 11519  0743  100E               	bcf	14,0	;volatile
 11520                           
 11521                           ;LED_Ctrl.c: 82: break;
 11522  0744  2F57               	goto	i1l3168
 11523  0745                     i1l653:	
 11524                           ;LED_Ctrl.c: 83: case 1 : do { LATCbits.LATC1 = 0; } while(0);
 11525                           
 11526  0745  0022               	movlb	2	; select bank2
 11527  0746  108E               	bcf	14,1	;volatile
 11528                           
 11529                           ;LED_Ctrl.c: 84: break;
 11530  0747  2F57               	goto	i1l3168
 11531  0748                     i1l656:	
 11532                           ;LED_Ctrl.c: 85: case 2 : do { LATCbits.LATC2 = 0; } while(0);
 11533                           
 11534  0748  0022               	movlb	2	; select bank2
 11535  0749  110E               	bcf	14,2	;volatile
 11536                           
 11537                           ;LED_Ctrl.c: 88: }
 11538                           
 11539                           ;LED_Ctrl.c: 87: default : break;
 11540                           
 11541                           ;LED_Ctrl.c: 86: break;
 11542  074A  2F57               	goto	i1l3168
 11543  074B                     i1l3166:	
 11544  074B  0020               	movlb	0	; select bank0
 11545  074C  086A               	movf	_LED_Color,w
 11546                           
 11547                           ; Switch size 1, requested type "space"
 11548                           ; Number of cases is 3, Range of values is 0 to 2
 11549                           ; switch strategies available:
 11550                           ; Name         Instructions Cycles
 11551                           ; simple_byte           10     6 (average)
 11552                           ; direct_byte           12     6 (fixed)
 11553                           ; jumptable            260     6 (fixed)
 11554                           ;	Chosen strategy is simple_byte
 11555  074D  3A00               	xorlw	0	; case 0
 11556  074E  1903               	skipnz
 11557  074F  2F42               	goto	i1l649
 11558  0750  3A01               	xorlw	1	; case 1
 11559  0751  1903               	skipnz
 11560  0752  2F45               	goto	i1l653
 11561  0753  3A03               	xorlw	3	; case 2
 11562  0754  1903               	skipnz
 11563  0755  2F48               	goto	i1l656
 11564  0756  2F57               	goto	i1l3168
 11565  0757                     i1l3168:	
 11566                           
 11567                           ;LED_Ctrl.c: 90: Led_ON=0;
 11568  0757  0020               	movlb	0	; select bank0
 11569  0758  01E1               	clrf	_Led_ON
 11570                           
 11571                           ;LED_Ctrl.c: 91: LED_msec_Cnt=0;
 11572  0759  0021               	movlb	1	; select bank1
 11573  075A  01D2               	clrf	_LED_msec_Cnt^(0+128)
 11574  075B  01D3               	clrf	(_LED_msec_Cnt+1)^(0+128)
 11575  075C                     i1l3170:	
 11576                           
 11577                           ;LED_Ctrl.c: 92: }
 11578                           ;LED_Ctrl.c: 94: LED_msec_Cnt+=10;
 11579  075C  300A               	movlw	10
 11580  075D  0021               	movlb	1	; select bank1
 11581  075E  07D2               	addwf	_LED_msec_Cnt^(0+128),f
 11582  075F  3000               	movlw	0
 11583  0760  3DD3               	addwfc	(_LED_msec_Cnt+1)^(0+128),f
 11584  0761  0008               	return
 11585  0762                     __end_of_LedON_Control_10msec:	
 11586                           
 11587                           	psect	text54
 11588  0002                     __ptext54:	
 11589 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 11590 ;; Defined at:
 11591 ;;		line 149 in file "mcc_generated_files/tmr0.c"
 11592 ;; Parameters:    Size  Location     Type
 11593 ;;		None
 11594 ;; Auto vars:     Size  Location     Type
 11595 ;;		None
 11596 ;; Return value:  Size  Location     Type
 11597 ;;                  1    wreg      void 
 11598 ;; Registers used:
 11599 ;;		None
 11600 ;; Tracked objects:
 11601 ;;		On entry : 0/0
 11602 ;;		On exit  : 0/0
 11603 ;;		Unchanged: 0/0
 11604 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11605 ;;      Params:         0       0       0       0       0       0       0       0
 11606 ;;      Locals:         0       0       0       0       0       0       0       0
 11607 ;;      Temps:          0       0       0       0       0       0       0       0
 11608 ;;      Totals:         0       0       0       0       0       0       0       0
 11609 ;;Total ram usage:        0 bytes
 11610 ;; Hardware stack levels used:    1
 11611 ;; This function calls:
 11612 ;;		Nothing
 11613 ;; This function is called by:
 11614 ;;		_TMR0_Initialize
 11615 ;;		_TMR0_CallBack
 11616 ;; This function uses a non-reentrant model
 11617 ;;
 11618                           
 11619                           
 11620                           ;psect for function _TMR0_DefaultInterruptHandler
 11621  0002                     _TMR0_DefaultInterruptHandler:	
 11622                           
 11623                           ;incstack = 0
 11624                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 11625  0002  0008               	return
 11626  0003                     __end_of_TMR0_DefaultInterruptHandler:	
 11627                           
 11628                           	psect	text55
 11629  0B0A                     __ptext55:	
 11630 ;; *************** function _PIN_MANAGER_IOC *****************
 11631 ;; Defined at:
 11632 ;;		line 130 in file "mcc_generated_files/pin_manager.c"
 11633 ;; Parameters:    Size  Location     Type
 11634 ;;		None
 11635 ;; Auto vars:     Size  Location     Type
 11636 ;;		None
 11637 ;; Return value:  Size  Location     Type
 11638 ;;                  1    wreg      void 
 11639 ;; Registers used:
 11640 ;;		wreg, status,2, status,0, pclath, cstack
 11641 ;; Tracked objects:
 11642 ;;		On entry : 0/0
 11643 ;;		On exit  : 0/0
 11644 ;;		Unchanged: 0/0
 11645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11646 ;;      Params:         0       0       0       0       0       0       0       0
 11647 ;;      Locals:         0       0       0       0       0       0       0       0
 11648 ;;      Temps:          0       0       0       0       0       0       0       0
 11649 ;;      Totals:         0       0       0       0       0       0       0       0
 11650 ;;Total ram usage:        0 bytes
 11651 ;; Hardware stack levels used:    1
 11652 ;; Hardware stack levels required when called:    2
 11653 ;; This function calls:
 11654 ;;		_IOCCF4_ISR
 11655 ;;		_IOCCF5_ISR
 11656 ;; This function is called by:
 11657 ;;		_INTERRUPT_InterruptManager
 11658 ;; This function uses a non-reentrant model
 11659 ;;
 11660                           
 11661                           
 11662                           ;psect for function _PIN_MANAGER_IOC
 11663  0B0A                     _PIN_MANAGER_IOC:	
 11664                           
 11665                           ;pin_manager.c: 133: if(IOCCFbits.IOCCF4 == 1)
 11666                           
 11667                           ;incstack = 0
 11668                           ; Regs used in _PIN_MANAGER_IOC: [wreg+status,2+status,0+pclath+cstack]
 11669  0B0A  0027               	movlb	7	; select bank7
 11670  0B0B  1E19               	btfss	25,4	;volatile
 11671  0B0C  2B10               	goto	i1l3930
 11672                           
 11673                           ;pin_manager.c: 134: {
 11674                           ;pin_manager.c: 135: IOCCF4_ISR();
 11675  0B0D  318B  2322  318B   	fcall	_IOCCF4_ISR
 11676  0B10                     i1l3930:	
 11677                           
 11678                           ;pin_manager.c: 136: }
 11679                           ;pin_manager.c: 139: if(IOCCFbits.IOCCF5 == 1)
 11680  0B10  0027               	movlb	7	; select bank7
 11681  0B11  1E99               	btfss	25,5	;volatile
 11682  0B12  0008               	return
 11683                           
 11684                           ;pin_manager.c: 140: {
 11685                           ;pin_manager.c: 141: IOCCF5_ISR();
 11686  0B13  318B  232F         	fcall	_IOCCF5_ISR
 11687  0B15  0008               	return
 11688  0B16                     __end_of_PIN_MANAGER_IOC:	
 11689                           
 11690                           	psect	text56
 11691  0B2F                     __ptext56:	
 11692 ;; *************** function _IOCCF5_ISR *****************
 11693 ;; Defined at:
 11694 ;;		line 180 in file "mcc_generated_files/pin_manager.c"
 11695 ;; Parameters:    Size  Location     Type
 11696 ;;		None
 11697 ;; Auto vars:     Size  Location     Type
 11698 ;;		None
 11699 ;; Return value:  Size  Location     Type
 11700 ;;                  1    wreg      void 
 11701 ;; Registers used:
 11702 ;;		wreg, status,2, status,0, pclath, cstack
 11703 ;; Tracked objects:
 11704 ;;		On entry : 0/0
 11705 ;;		On exit  : 0/0
 11706 ;;		Unchanged: 0/0
 11707 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11708 ;;      Params:         0       0       0       0       0       0       0       0
 11709 ;;      Locals:         0       0       0       0       0       0       0       0
 11710 ;;      Temps:          0       0       0       0       0       0       0       0
 11711 ;;      Totals:         0       0       0       0       0       0       0       0
 11712 ;;Total ram usage:        0 bytes
 11713 ;; Hardware stack levels used:    1
 11714 ;; Hardware stack levels required when called:    1
 11715 ;; This function calls:
 11716 ;;		Absolute function
 11717 ;;		_IOCCF5_DefaultInterruptHandler
 11718 ;; This function is called by:
 11719 ;;		_PIN_MANAGER_IOC
 11720 ;; This function uses a non-reentrant model
 11721 ;;
 11722                           
 11723                           
 11724                           ;psect for function _IOCCF5_ISR
 11725  0B2F                     _IOCCF5_ISR:	
 11726                           
 11727                           ;pin_manager.c: 185: if(IOCCF5_InterruptHandler)
 11728                           
 11729                           ;incstack = 0
 11730                           ; Regs used in _IOCCF5_ISR: [wreg+status,2+status,0+pclath+cstack]
 11731  0B2F  0022               	movlb	2	; select bank2
 11732  0B30  085A               	movf	_IOCCF5_InterruptHandler^(0+256),w
 11733  0B31  045B               	iorwf	(_IOCCF5_InterruptHandler+1)^(0+256),w
 11734  0B32  1903               	btfsc	3,2
 11735  0B33  2B39               	goto	i1l3514
 11736                           
 11737                           ;pin_manager.c: 186: {
 11738                           ;pin_manager.c: 187: IOCCF5_InterruptHandler();
 11739  0B34  085B               	movf	(_IOCCF5_InterruptHandler+1)^(0+256),w
 11740  0B35  008A               	movwf	10
 11741  0B36  085A               	movf	_IOCCF5_InterruptHandler^(0+256),w
 11742  0B37  000A               	callw
 11743  0B38  318B               	pagesel	$
 11744  0B39                     i1l3514:	
 11745                           
 11746                           ;pin_manager.c: 188: }
 11747                           ;pin_manager.c: 189: IOCCFbits.IOCCF5 = 0;
 11748  0B39  0027               	movlb	7	; select bank7
 11749  0B3A  1299               	bcf	25,5	;volatile
 11750  0B3B  0008               	return
 11751  0B3C                     __end_of_IOCCF5_ISR:	
 11752                           
 11753                           	psect	text57
 11754  0A99                     __ptext57:	
 11755 ;; *************** function _IOCCF5_DefaultInterruptHandler *****************
 11756 ;; Defined at:
 11757 ;;		line 202 in file "mcc_generated_files/pin_manager.c"
 11758 ;; Parameters:    Size  Location     Type
 11759 ;;		None
 11760 ;; Auto vars:     Size  Location     Type
 11761 ;;		None
 11762 ;; Return value:  Size  Location     Type
 11763 ;;                  1    wreg      void 
 11764 ;; Registers used:
 11765 ;;		None
 11766 ;; Tracked objects:
 11767 ;;		On entry : 0/0
 11768 ;;		On exit  : 0/0
 11769 ;;		Unchanged: 0/0
 11770 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11771 ;;      Params:         0       0       0       0       0       0       0       0
 11772 ;;      Locals:         0       0       0       0       0       0       0       0
 11773 ;;      Temps:          0       0       0       0       0       0       0       0
 11774 ;;      Totals:         0       0       0       0       0       0       0       0
 11775 ;;Total ram usage:        0 bytes
 11776 ;; Hardware stack levels used:    1
 11777 ;; This function calls:
 11778 ;;		Nothing
 11779 ;; This function is called by:
 11780 ;;		_PIN_MANAGER_Initialize
 11781 ;;		_IOCCF5_ISR
 11782 ;; This function uses a non-reentrant model
 11783 ;;
 11784                           
 11785                           
 11786                           ;psect for function _IOCCF5_DefaultInterruptHandler
 11787  0A99                     _IOCCF5_DefaultInterruptHandler:	
 11788                           
 11789                           ;incstack = 0
 11790                           ; Regs used in _IOCCF5_DefaultInterruptHandler: []
 11791  0A99  0008               	return
 11792  0A9A                     __end_of_IOCCF5_DefaultInterruptHandler:	
 11793                           
 11794                           	psect	text58
 11795  0B22                     __ptext58:	
 11796 ;; *************** function _IOCCF4_ISR *****************
 11797 ;; Defined at:
 11798 ;;		line 150 in file "mcc_generated_files/pin_manager.c"
 11799 ;; Parameters:    Size  Location     Type
 11800 ;;		None
 11801 ;; Auto vars:     Size  Location     Type
 11802 ;;		None
 11803 ;; Return value:  Size  Location     Type
 11804 ;;                  1    wreg      void 
 11805 ;; Registers used:
 11806 ;;		wreg, status,2, status,0, pclath, cstack
 11807 ;; Tracked objects:
 11808 ;;		On entry : 0/0
 11809 ;;		On exit  : 0/0
 11810 ;;		Unchanged: 0/0
 11811 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11812 ;;      Params:         0       0       0       0       0       0       0       0
 11813 ;;      Locals:         0       0       0       0       0       0       0       0
 11814 ;;      Temps:          0       0       0       0       0       0       0       0
 11815 ;;      Totals:         0       0       0       0       0       0       0       0
 11816 ;;Total ram usage:        0 bytes
 11817 ;; Hardware stack levels used:    1
 11818 ;; Hardware stack levels required when called:    1
 11819 ;; This function calls:
 11820 ;;		Absolute function
 11821 ;;		_IOCCF4_DefaultInterruptHandler
 11822 ;; This function is called by:
 11823 ;;		_PIN_MANAGER_IOC
 11824 ;; This function uses a non-reentrant model
 11825 ;;
 11826                           
 11827                           
 11828                           ;psect for function _IOCCF4_ISR
 11829  0B22                     _IOCCF4_ISR:	
 11830                           
 11831                           ;pin_manager.c: 155: if(IOCCF4_InterruptHandler)
 11832                           
 11833                           ;incstack = 0
 11834                           ; Regs used in _IOCCF4_ISR: [wreg+status,2+status,0+pclath+cstack]
 11835  0B22  0022               	movlb	2	; select bank2
 11836  0B23  085C               	movf	_IOCCF4_InterruptHandler^(0+256),w
 11837  0B24  045D               	iorwf	(_IOCCF4_InterruptHandler+1)^(0+256),w
 11838  0B25  1903               	btfsc	3,2
 11839  0B26  2B2C               	goto	i1l3508
 11840                           
 11841                           ;pin_manager.c: 156: {
 11842                           ;pin_manager.c: 157: IOCCF4_InterruptHandler();
 11843  0B27  085D               	movf	(_IOCCF4_InterruptHandler+1)^(0+256),w
 11844  0B28  008A               	movwf	10
 11845  0B29  085C               	movf	_IOCCF4_InterruptHandler^(0+256),w
 11846  0B2A  000A               	callw
 11847  0B2B  318B               	pagesel	$
 11848  0B2C                     i1l3508:	
 11849                           
 11850                           ;pin_manager.c: 158: }
 11851                           ;pin_manager.c: 159: IOCCFbits.IOCCF4 = 0;
 11852  0B2C  0027               	movlb	7	; select bank7
 11853  0B2D  1219               	bcf	25,4	;volatile
 11854  0B2E  0008               	return
 11855  0B2F                     __end_of_IOCCF4_ISR:	
 11856                           
 11857                           	psect	text59
 11858  0A98                     __ptext59:	
 11859 ;; *************** function _IOCCF4_DefaultInterruptHandler *****************
 11860 ;; Defined at:
 11861 ;;		line 172 in file "mcc_generated_files/pin_manager.c"
 11862 ;; Parameters:    Size  Location     Type
 11863 ;;		None
 11864 ;; Auto vars:     Size  Location     Type
 11865 ;;		None
 11866 ;; Return value:  Size  Location     Type
 11867 ;;                  1    wreg      void 
 11868 ;; Registers used:
 11869 ;;		None
 11870 ;; Tracked objects:
 11871 ;;		On entry : 0/0
 11872 ;;		On exit  : 0/0
 11873 ;;		Unchanged: 0/0
 11874 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11875 ;;      Params:         0       0       0       0       0       0       0       0
 11876 ;;      Locals:         0       0       0       0       0       0       0       0
 11877 ;;      Temps:          0       0       0       0       0       0       0       0
 11878 ;;      Totals:         0       0       0       0       0       0       0       0
 11879 ;;Total ram usage:        0 bytes
 11880 ;; Hardware stack levels used:    1
 11881 ;; This function calls:
 11882 ;;		Nothing
 11883 ;; This function is called by:
 11884 ;;		_PIN_MANAGER_Initialize
 11885 ;;		_IOCCF4_ISR
 11886 ;; This function uses a non-reentrant model
 11887 ;;
 11888                           
 11889                           
 11890                           ;psect for function _IOCCF4_DefaultInterruptHandler
 11891  0A98                     _IOCCF4_DefaultInterruptHandler:	
 11892                           
 11893                           ;incstack = 0
 11894                           ; Regs used in _IOCCF4_DefaultInterruptHandler: []
 11895  0A98  0008               	return
 11896  0A99                     __end_of_IOCCF4_DefaultInterruptHandler:	
 11897                           
 11898                           	psect	text60
 11899  0C9B                     __ptext60:	
 11900 ;; *************** function _EUSART_Transmit_ISR *****************
 11901 ;; Defined at:
 11902 ;;		line 155 in file "mcc_generated_files/eusart.c"
 11903 ;; Parameters:    Size  Location     Type
 11904 ;;		None
 11905 ;; Auto vars:     Size  Location     Type
 11906 ;;		None
 11907 ;; Return value:  Size  Location     Type
 11908 ;;                  1    wreg      void 
 11909 ;; Registers used:
 11910 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 11911 ;; Tracked objects:
 11912 ;;		On entry : 0/0
 11913 ;;		On exit  : 0/0
 11914 ;;		Unchanged: 0/0
 11915 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 11916 ;;      Params:         0       0       0       0       0       0       0       0
 11917 ;;      Locals:         0       0       0       0       0       0       0       0
 11918 ;;      Temps:          1       0       0       0       0       0       0       0
 11919 ;;      Totals:         1       0       0       0       0       0       0       0
 11920 ;;Total ram usage:        1 bytes
 11921 ;; Hardware stack levels used:    1
 11922 ;; This function calls:
 11923 ;;		Nothing
 11924 ;; This function is called by:
 11925 ;;		_INTERRUPT_InterruptManager
 11926 ;; This function uses a non-reentrant model
 11927 ;;
 11928                           
 11929                           
 11930                           ;psect for function _EUSART_Transmit_ISR
 11931  0C9B                     _EUSART_Transmit_ISR:	
 11932                           
 11933                           ;eusart.c: 159: if(sizeof(eusartTxBuffer) > eusartTxBufferRemaining)
 11934                           
 11935                           ;incstack = 0
 11936                           ; Regs used in _EUSART_Transmit_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 11937  0C9B  3020               	movlw	32
 11938  0C9C  0020               	movlb	0	; select bank0
 11939  0C9D  0267               	subwf	_eusartTxBufferRemaining,w	;volatile
 11940  0C9E  1803               	skipnc
 11941  0C9F  2CB6               	goto	i1l120
 11942                           
 11943                           ;eusart.c: 160: {
 11944                           ;eusart.c: 161: TX1REG = eusartTxBuffer[eusartTxTail++];
 11945  0CA0  0868               	movf	_eusartTxTail,w
 11946  0CA1  3E20               	addlw	(low (_eusartTxBuffer| (0+256)))& (0+255)
 11947  0CA2  0086               	movwf	6
 11948  0CA3  3001               	movlw	1	; select bank2/3
 11949  0CA4  0087               	movwf	7
 11950  0CA5  0801               	movf	1,w
 11951  0CA6  0023               	movlb	3	; select bank3
 11952  0CA7  009A               	movwf	26	;volatile
 11953  0CA8  3001               	movlw	1
 11954  0CA9  00F0               	movwf	??_EUSART_Transmit_ISR
 11955  0CAA  0870               	movf	??_EUSART_Transmit_ISR,w
 11956  0CAB  0020               	movlb	0	; select bank0
 11957  0CAC  07E8               	addwf	_eusartTxTail,f	;volatile
 11958                           
 11959                           ;eusart.c: 162: if(sizeof(eusartTxBuffer) <= eusartTxTail)
 11960  0CAD  3020               	movlw	32
 11961  0CAE  0268               	subwf	_eusartTxTail,w	;volatile
 11962  0CAF  1803               	btfsc	3,0
 11963                           
 11964                           ;eusart.c: 163: {
 11965                           ;eusart.c: 164: eusartTxTail = 0;
 11966  0CB0  01E8               	clrf	_eusartTxTail	;volatile
 11967                           
 11968                           ;eusart.c: 165: }
 11969                           ;eusart.c: 166: eusartTxBufferRemaining++;
 11970  0CB1  3001               	movlw	1
 11971  0CB2  00F0               	movwf	??_EUSART_Transmit_ISR
 11972  0CB3  0870               	movf	??_EUSART_Transmit_ISR,w
 11973  0CB4  07E7               	addwf	_eusartTxBufferRemaining,f	;volatile
 11974                           
 11975                           ;eusart.c: 167: }
 11976  0CB5  0008               	return
 11977  0CB6                     i1l120:	
 11978                           
 11979                           ;eusart.c: 168: else
 11980                           ;eusart.c: 169: {
 11981                           ;eusart.c: 170: PIE1bits.TXIE = 0;
 11982  0CB6  0021               	movlb	1	; select bank1
 11983  0CB7  1211               	bcf	17,4	;volatile
 11984  0CB8  0008               	return
 11985  0CB9                     __end_of_EUSART_Transmit_ISR:	
 11986                           
 11987                           	psect	text61
 11988  0C63                     __ptext61:	
 11989 ;; *************** function _EUSART_Receive_ISR *****************
 11990 ;; Defined at:
 11991 ;;		line 174 in file "mcc_generated_files/eusart.c"
 11992 ;; Parameters:    Size  Location     Type
 11993 ;;		None
 11994 ;; Auto vars:     Size  Location     Type
 11995 ;;		None
 11996 ;; Return value:  Size  Location     Type
 11997 ;;                  1    wreg      void 
 11998 ;; Registers used:
 11999 ;;		wreg, fsr1l, fsr1h, status,2, status,0
 12000 ;; Tracked objects:
 12001 ;;		On entry : 0/0
 12002 ;;		On exit  : 0/0
 12003 ;;		Unchanged: 0/0
 12004 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12005 ;;      Params:         0       0       0       0       0       0       0       0
 12006 ;;      Locals:         0       0       0       0       0       0       0       0
 12007 ;;      Temps:          1       0       0       0       0       0       0       0
 12008 ;;      Totals:         1       0       0       0       0       0       0       0
 12009 ;;Total ram usage:        1 bytes
 12010 ;; Hardware stack levels used:    1
 12011 ;; This function calls:
 12012 ;;		Nothing
 12013 ;; This function is called by:
 12014 ;;		_INTERRUPT_InterruptManager
 12015 ;; This function uses a non-reentrant model
 12016 ;;
 12017                           
 12018                           
 12019                           ;psect for function _EUSART_Receive_ISR
 12020  0C63                     _EUSART_Receive_ISR:	
 12021                           
 12022                           ;eusart.c: 177: if(1 == RC1STAbits.OERR)
 12023                           
 12024                           ;incstack = 0
 12025                           ; Regs used in _EUSART_Receive_ISR: [wreg+fsr1l+fsr1h+status,2+status,0]
 12026  0C63  0023               	movlb	3	; select bank3
 12027  0C64  1C9D               	btfss	29,1	;volatile
 12028  0C65  2C68               	goto	i1l3912
 12029                           
 12030                           ;eusart.c: 178: {
 12031                           ;eusart.c: 181: RC1STAbits.CREN = 0;
 12032  0C66  121D               	bcf	29,4	;volatile
 12033                           
 12034                           ;eusart.c: 182: RC1STAbits.CREN = 1;
 12035  0C67  161D               	bsf	29,4	;volatile
 12036  0C68                     i1l3912:	
 12037                           
 12038                           ;eusart.c: 183: }
 12039                           ;eusart.c: 186: eusartRxBuffer[eusartRxHead++] = RC1REG;
 12040  0C68  0819               	movf	25,w	;volatile
 12041  0C69  00F0               	movwf	??_EUSART_Receive_ISR
 12042  0C6A  0020               	movlb	0	; select bank0
 12043  0C6B  0866               	movf	_eusartRxHead,w
 12044  0C6C  3EA0               	addlw	(low (_eusartRxBuffer| (0+256)))& (0+255)
 12045  0C6D  0086               	movwf	6
 12046  0C6E  3001               	movlw	1	; select bank3/4
 12047  0C6F  0087               	movwf	7
 12048  0C70  0870               	movf	??_EUSART_Receive_ISR,w
 12049  0C71  0081               	movwf	1
 12050  0C72  3001               	movlw	1
 12051  0C73  00F0               	movwf	??_EUSART_Receive_ISR
 12052  0C74  0870               	movf	??_EUSART_Receive_ISR,w
 12053  0C75  07E6               	addwf	_eusartRxHead,f	;volatile
 12054                           
 12055                           ;eusart.c: 187: if(sizeof(eusartRxBuffer) <= eusartRxHead)
 12056  0C76  3020               	movlw	32
 12057  0C77  0266               	subwf	_eusartRxHead,w	;volatile
 12058  0C78  1803               	btfsc	3,0
 12059                           
 12060                           ;eusart.c: 188: {
 12061                           ;eusart.c: 189: eusartRxHead = 0;
 12062  0C79  01E6               	clrf	_eusartRxHead	;volatile
 12063                           
 12064                           ;eusart.c: 190: }
 12065                           ;eusart.c: 191: eusartRxCount++;
 12066  0C7A  3001               	movlw	1
 12067  0C7B  00F0               	movwf	??_EUSART_Receive_ISR
 12068  0C7C  0870               	movf	??_EUSART_Receive_ISR,w
 12069  0C7D  07E4               	addwf	_eusartRxCount,f	;volatile
 12070  0C7E  0008               	return
 12071  0C7F                     __end_of_EUSART_Receive_ISR:	
 12072                           
 12073                           	psect	text62
 12074  0BBC                     __ptext62:	
 12075 ;; *************** function _CCP1_CaptureISR *****************
 12076 ;; Defined at:
 12077 ;;		line 84 in file "mcc_generated_files/ccp1.c"
 12078 ;; Parameters:    Size  Location     Type
 12079 ;;		None
 12080 ;; Auto vars:     Size  Location     Type
 12081 ;;  module          2    0[BANK0 ] struct CCPR1Reg_tag
 12082 ;; Return value:  Size  Location     Type
 12083 ;;                  1    wreg      void 
 12084 ;; Registers used:
 12085 ;;		wreg, status,2, status,0, pclath, cstack
 12086 ;; Tracked objects:
 12087 ;;		On entry : 0/0
 12088 ;;		On exit  : 0/0
 12089 ;;		Unchanged: 0/0
 12090 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12091 ;;      Params:         0       0       0       0       0       0       0       0
 12092 ;;      Locals:         0       2       0       0       0       0       0       0
 12093 ;;      Temps:          1       0       0       0       0       0       0       0
 12094 ;;      Totals:         1       2       0       0       0       0       0       0
 12095 ;;Total ram usage:        3 bytes
 12096 ;; Hardware stack levels used:    1
 12097 ;; Hardware stack levels required when called:    4
 12098 ;; This function calls:
 12099 ;;		_CCP1_CallBack
 12100 ;; This function is called by:
 12101 ;;		_INTERRUPT_InterruptManager
 12102 ;; This function uses a non-reentrant model
 12103 ;;
 12104                           
 12105                           
 12106                           ;psect for function _CCP1_CaptureISR
 12107  0BBC                     _CCP1_CaptureISR:	
 12108                           
 12109                           ;ccp1.c: 86: CCP_PERIOD_REG_T module;
 12110                           ;ccp1.c: 89: PIR4bits.CCP1IF = 0;
 12111                           
 12112                           ;incstack = 0
 12113                           ; Regs used in _CCP1_CaptureISR: [wreg+status,2+status,0+pclath+cstack]
 12114  0BBC  0020               	movlb	0	; select bank0
 12115  0BBD  1014               	bcf	20,0	;volatile
 12116                           
 12117                           ;ccp1.c: 92: module.ccpr1l = CCPR1L;
 12118  0BBE  0025               	movlb	5	; select bank5
 12119  0BBF  0811               	movf	17,w	;volatile
 12120  0BC0  00FC               	movwf	??_CCP1_CaptureISR
 12121  0BC1  087C               	movf	??_CCP1_CaptureISR,w
 12122  0BC2  0020               	movlb	0	; select bank0
 12123  0BC3  00A0               	movwf	CCP1_CaptureISR@module
 12124                           
 12125                           ;ccp1.c: 93: module.ccpr1h = CCPR1H;
 12126  0BC4  0025               	movlb	5	; select bank5
 12127  0BC5  0812               	movf	18,w	;volatile
 12128  0BC6  00FC               	movwf	??_CCP1_CaptureISR
 12129  0BC7  087C               	movf	??_CCP1_CaptureISR,w
 12130  0BC8  0020               	movlb	0	; select bank0
 12131  0BC9  00A1               	movwf	CCP1_CaptureISR@module+1
 12132                           
 12133                           ;ccp1.c: 96: CCP1_CallBack(module.ccpr1_16Bit);
 12134  0BCA  0821               	movf	CCP1_CaptureISR@module+1,w
 12135  0BCB  00FB               	movwf	CCP1_CallBack@capturedValue+1
 12136  0BCC  0820               	movf	CCP1_CaptureISR@module,w
 12137  0BCD  00FA               	movwf	CCP1_CallBack@capturedValue
 12138  0BCE  318A  22C1         	fcall	_CCP1_CallBack
 12139  0BD0  0008               	return
 12140  0BD1                     __end_of_CCP1_CaptureISR:	
 12141                           
 12142                           	psect	text63
 12143  0AC1                     __ptext63:	
 12144 ;; *************** function _CCP1_CallBack *****************
 12145 ;; Defined at:
 12146 ;;		line 99 in file "mcc_generated_files/ccp1.c"
 12147 ;; Parameters:    Size  Location     Type
 12148 ;;  capturedValu    2   10[COMMON] unsigned int 
 12149 ;; Auto vars:     Size  Location     Type
 12150 ;;		None
 12151 ;; Return value:  Size  Location     Type
 12152 ;;                  1    wreg      void 
 12153 ;; Registers used:
 12154 ;;		wreg, status,2, status,0, pclath, cstack
 12155 ;; Tracked objects:
 12156 ;;		On entry : 0/0
 12157 ;;		On exit  : 0/0
 12158 ;;		Unchanged: 0/0
 12159 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12160 ;;      Params:         2       0       0       0       0       0       0       0
 12161 ;;      Locals:         0       0       0       0       0       0       0       0
 12162 ;;      Temps:          0       0       0       0       0       0       0       0
 12163 ;;      Totals:         2       0       0       0       0       0       0       0
 12164 ;;Total ram usage:        2 bytes
 12165 ;; Hardware stack levels used:    1
 12166 ;; Hardware stack levels required when called:    3
 12167 ;; This function calls:
 12168 ;;		_EncA_PulseEdgeEvent
 12169 ;; This function is called by:
 12170 ;;		_CCP1_CaptureISR
 12171 ;; This function uses a non-reentrant model
 12172 ;;
 12173                           
 12174                           
 12175                           ;psect for function _CCP1_CallBack
 12176  0AC1                     _CCP1_CallBack:	
 12177                           
 12178                           ;ccp1.c: 102: EncA_PulseEdgeEvent(capturedValue);
 12179                           
 12180                           ;incstack = 0
 12181                           ; Regs used in _CCP1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 12182  0AC1  087B               	movf	CCP1_CallBack@capturedValue+1,w
 12183  0AC2  00F9               	movwf	EncA_PulseEdgeEvent@capturedValue+1
 12184  0AC3  087A               	movf	CCP1_CallBack@capturedValue,w
 12185  0AC4  00F8               	movwf	EncA_PulseEdgeEvent@capturedValue
 12186  0AC5  318B  2367         	fcall	_EncA_PulseEdgeEvent
 12187  0AC7  0008               	return
 12188  0AC8                     __end_of_CCP1_CallBack:	
 12189                           
 12190                           	psect	text64
 12191  0B67                     __ptext64:	
 12192 ;; *************** function _EncA_PulseEdgeEvent *****************
 12193 ;; Defined at:
 12194 ;;		line 268 in file "main.c"
 12195 ;; Parameters:    Size  Location     Type
 12196 ;;  capturedValu    2    8[COMMON] unsigned int 
 12197 ;; Auto vars:     Size  Location     Type
 12198 ;;		None
 12199 ;; Return value:  Size  Location     Type
 12200 ;;                  1    wreg      void 
 12201 ;; Registers used:
 12202 ;;		wreg, status,2, status,0, pclath, cstack
 12203 ;; Tracked objects:
 12204 ;;		On entry : 0/0
 12205 ;;		On exit  : 0/0
 12206 ;;		Unchanged: 0/0
 12207 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12208 ;;      Params:         2       0       0       0       0       0       0       0
 12209 ;;      Locals:         0       0       0       0       0       0       0       0
 12210 ;;      Temps:          0       0       0       0       0       0       0       0
 12211 ;;      Totals:         2       0       0       0       0       0       0       0
 12212 ;;Total ram usage:        2 bytes
 12213 ;; Hardware stack levels used:    1
 12214 ;; Hardware stack levels required when called:    2
 12215 ;; This function calls:
 12216 ;;		_OnEncPulseEdgeEvent
 12217 ;; This function is called by:
 12218 ;;		_CCP1_CallBack
 12219 ;; This function uses a non-reentrant model
 12220 ;;
 12221                           
 12222                           
 12223                           ;psect for function _EncA_PulseEdgeEvent
 12224  0B67                     _EncA_PulseEdgeEvent:	
 12225                           
 12226                           ;incstack = 0
 12227                           ; Regs used in _EncA_PulseEdgeEvent: [wreg+status,2+status,0+pclath+cstack]
 12228                           ;main.c: 271: do { LATCbits.LATC3 = 1; } while(0);
 12229  0B67  0022               	movlb	2	; select bank2
 12230  0B68  158E               	bsf	14,3	;volatile
 12231                           
 12232                           ;main.c: 273: PIE4bits.CCP1IE = 0;
 12233  0B69  0021               	movlb	1	; select bank1
 12234  0B6A  1014               	bcf	20,0	;volatile
 12235                           
 12236                           ;main.c: 275: OnEncPulseEdgeEvent(capturedValue);
 12237  0B6B  0879               	movf	EncA_PulseEdgeEvent@capturedValue+1,w
 12238  0B6C  00F5               	movwf	OnEncPulseEdgeEvent@capturevalue+1
 12239  0B6D  0878               	movf	EncA_PulseEdgeEvent@capturedValue,w
 12240  0B6E  00F4               	movwf	OnEncPulseEdgeEvent@capturevalue
 12241  0B6F  3185  25F8         	fcall	_OnEncPulseEdgeEvent
 12242                           
 12243                           ;main.c: 277: PIE4bits.CCP1IE = 1;
 12244  0B71  0021               	movlb	1	; select bank1
 12245  0B72  1414               	bsf	20,0	;volatile
 12246                           
 12247                           ;main.c: 279: do { LATCbits.LATC3 = 0; } while(0);
 12248  0B73  0022               	movlb	2	; select bank2
 12249  0B74  118E               	bcf	14,3	;volatile
 12250  0B75  0008               	return
 12251  0B76                     __end_of_EncA_PulseEdgeEvent:	
 12252                           
 12253                           	psect	text65
 12254  05F8                     __ptext65:	
 12255 ;; *************** function _OnEncPulseEdgeEvent *****************
 12256 ;; Defined at:
 12257 ;;		line 326 in file "main.c"
 12258 ;; Parameters:    Size  Location     Type
 12259 ;;  capturevalue    2    4[COMMON] unsigned int 
 12260 ;; Auto vars:     Size  Location     Type
 12261 ;;		None
 12262 ;; Return value:  Size  Location     Type
 12263 ;;                  1    wreg      void 
 12264 ;; Registers used:
 12265 ;;		wreg, status,2, status,0, pclath, cstack
 12266 ;; Tracked objects:
 12267 ;;		On entry : 0/0
 12268 ;;		On exit  : 0/0
 12269 ;;		Unchanged: 0/0
 12270 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12271 ;;      Params:         2       0       0       0       0       0       0       0
 12272 ;;      Locals:         0       0       0       0       0       0       0       0
 12273 ;;      Temps:          2       0       0       0       0       0       0       0
 12274 ;;      Totals:         4       0       0       0       0       0       0       0
 12275 ;;Total ram usage:        4 bytes
 12276 ;; Hardware stack levels used:    1
 12277 ;; Hardware stack levels required when called:    1
 12278 ;; This function calls:
 12279 ;;		_TMR3_ReadTimer
 12280 ;;		i1_TMR3_StartTimer
 12281 ;;		i1_TMR3_StopTimer
 12282 ;;		i1_TMR3_WriteTimer
 12283 ;; This function is called by:
 12284 ;;		_EncA_PulseEdgeEvent
 12285 ;; This function uses a non-reentrant model
 12286 ;;
 12287                           
 12288                           
 12289                           ;psect for function _OnEncPulseEdgeEvent
 12290  05F8                     _OnEncPulseEdgeEvent:	
 12291                           
 12292                           ;incstack = 0
 12293                           ; Regs used in _OnEncPulseEdgeEvent: [wreg+status,2+status,0+pclath+cstack]
 12294                           ;main.c: 329: do { LATCbits.LATC2 = 1; } while(0);
 12295  05F8  0022               	movlb	2	; select bank2
 12296  05F9  150E               	bsf	14,2	;volatile
 12297                           
 12298                           ;main.c: 331: TMR3_StopTimer();
 12299  05FA  318A  229D  3185   	fcall	i1_TMR3_StopTimer
 12300                           
 12301                           ;main.c: 332: capturePulseusec = TMR3_ReadTimer();
 12302  05FD  318A  22EC  3185   	fcall	_TMR3_ReadTimer
 12303  0600  0871               	movf	?_TMR3_ReadTimer+1,w
 12304  0601  0021               	movlb	1	; select bank1
 12305  0602  00D7               	movwf	(_capturePulseusec+1)^(0+128)
 12306  0603  0870               	movf	?_TMR3_ReadTimer,w
 12307  0604  00D6               	movwf	_capturePulseusec^(0+128)
 12308                           
 12309                           ;main.c: 333: TMR3_WriteTimer(0);
 12310  0605  3000               	movlw	0
 12311  0606  00F0               	movwf	i1TMR3_WriteTimer@timerVal
 12312  0607  00F1               	movwf	i1TMR3_WriteTimer@timerVal+1
 12313  0608  318B  2358  3185   	fcall	i1_TMR3_WriteTimer
 12314                           
 12315                           ;main.c: 334: TMR3_StartTimer();
 12316  060B  318A  229A  3185   	fcall	i1_TMR3_StartTimer
 12317                           
 12318                           ;main.c: 335: PulseStatus = (((PORTCbits.RC5) + (PORTCbits.RC4<<1))& 0x03);
 12319  060E  0020               	movlb	0	; select bank0
 12320  060F  0E0E               	swapf	14,w	;volatile
 12321  0610  3901               	andlw	1
 12322  0611  00F6               	movwf	??_OnEncPulseEdgeEvent
 12323  0612  3001               	movlw	1
 12324  0613                     u202_25:	
 12325  0613  35F6               	lslf	??_OnEncPulseEdgeEvent,f
 12326  0614  0B89               	decfsz	9,f
 12327  0615  2E13               	goto	u202_25
 12328  0616  0E0E               	swapf	14,w	;volatile
 12329  0617  0C89               	rrf	9,f
 12330  0618  3901               	andlw	1
 12331  0619  0776               	addwf	??_OnEncPulseEdgeEvent,w
 12332  061A  3903               	andlw	3
 12333  061B  00F7               	movwf	??_OnEncPulseEdgeEvent+1
 12334  061C  0877               	movf	??_OnEncPulseEdgeEvent+1,w
 12335  061D  00E3               	movwf	_PulseStatus
 12336                           
 12337                           ;main.c: 337: if(capturePulseusec>5)
 12338  061E  3000               	movlw	0
 12339  061F  0021               	movlb	1	; select bank1
 12340  0620  0257               	subwf	(_capturePulseusec+1)^(0+128),w
 12341  0621  3006               	movlw	6
 12342  0622  1903               	skipnz
 12343  0623  0256               	subwf	_capturePulseusec^(0+128),w
 12344  0624  1C03               	skipc
 12345  0625  0008               	return
 12346                           
 12347                           ;main.c: 338: {
 12348                           ;main.c: 339: EPCRunTime += capturePulseusec;
 12349  0626  0856               	movf	_capturePulseusec^(0+128),w
 12350  0627  07C8               	addwf	_EPCRunTime^(0+128),f
 12351  0628  0857               	movf	(_capturePulseusec+1)^(0+128),w
 12352  0629  3DC9               	addwfc	(_EPCRunTime+1)^(0+128),f
 12353  062A  3000               	movlw	0
 12354  062B  3DCA               	addwfc	(_EPCRunTime+2)^(0+128),f
 12355  062C  3DCB               	addwfc	(_EPCRunTime+3)^(0+128),f
 12356                           
 12357                           ;main.c: 340: if(PulseStatus==0 || PulseStatus==3)
 12358  062D  0020               	movlb	0	; select bank0
 12359  062E  0863               	movf	_PulseStatus,w
 12360  062F  1903               	btfsc	3,2
 12361  0630  2E35               	goto	i1l3120
 12362  0631  3003               	movlw	3
 12363  0632  0663               	xorwf	_PulseStatus,w
 12364  0633  1D03               	btfss	3,2
 12365  0634  2E3A               	goto	i1l3122
 12366  0635                     i1l3120:	
 12367                           
 12368                           ;main.c: 341: EPCPulseCountClock++;
 12369  0635  3001               	movlw	1
 12370  0636  07D7               	addwf	_EPCPulseCountClock,f
 12371  0637  3000               	movlw	0
 12372  0638  3DD8               	addwfc	_EPCPulseCountClock+1,f
 12373  0639  2E45               	goto	i1l3128
 12374  063A                     i1l3122:	
 12375                           
 12376                           ;main.c: 342: else if(PulseStatus==1 || PulseStatus==2)
 12377  063A  0363               	decf	_PulseStatus,w
 12378  063B  1903               	btfsc	3,2
 12379  063C  2E41               	goto	i1l3126
 12380  063D  3002               	movlw	2
 12381  063E  0663               	xorwf	_PulseStatus,w
 12382  063F  1D03               	btfss	3,2
 12383  0640  2E45               	goto	i1l3128
 12384  0641                     i1l3126:	
 12385                           
 12386                           ;main.c: 343: EPCPulseCountAntiClock++;
 12387  0641  3001               	movlw	1
 12388  0642  07D5               	addwf	_EPCPulseCountAntiClock,f
 12389  0643  3000               	movlw	0
 12390  0644  3DD6               	addwfc	_EPCPulseCountAntiClock+1,f
 12391  0645                     i1l3128:	
 12392                           
 12393                           ;main.c: 345: if(ModbusData.mcuTOplcData.NutRunState != RUNNING )
 12394  0645  0021               	movlb	1	; select bank1
 12395  0646  0363               	decf	(_ModbusData^(0+128)+4),w
 12396  0647  0464               	iorwf	((_ModbusData+1)^(0+128)+4),w
 12397  0648  1903               	btfsc	3,2
 12398  0649  2E6D               	goto	i1l525
 12399                           
 12400                           ;main.c: 346: {
 12401                           ;main.c: 348: ModbusData.mcuTOplcData.MeasurePulseCount = 0;
 12402  064A  01DF               	clrf	_ModbusData^(0+128)
 12403  064B  01E0               	clrf	(_ModbusData+1)^(0+128)
 12404                           
 12405                           ;main.c: 349: ModbusData.mcuTOplcData.MeasureRunTime = 0;
 12406  064C  01E1               	clrf	(_ModbusData^(0+128)+2)
 12407  064D  01E2               	clrf	((_ModbusData+1)^(0+128)+2)
 12408                           
 12409                           ;main.c: 350: if(EPCPulseCountClock >= EPCPulseCountAntiClock)
 12410  064E  0020               	movlb	0	; select bank0
 12411  064F  0856               	movf	_EPCPulseCountAntiClock+1,w
 12412  0650  0258               	subwf	_EPCPulseCountClock+1,w
 12413  0651  1D03               	skipz
 12414  0652  2E55               	goto	u209_25
 12415  0653  0855               	movf	_EPCPulseCountAntiClock,w
 12416  0654  0257               	subwf	_EPCPulseCountClock,w
 12417  0655                     u209_25:	
 12418  0655  1C03               	skipc
 12419  0656  2E5B               	goto	i1l3136
 12420                           
 12421                           ;main.c: 351: ModbusData.mcuTOplcData.NutRunDirection = CLOCKWISE;
 12422  0657  0021               	movlb	1	; select bank1
 12423  0658  01E5               	clrf	(_ModbusData^(0+128)+6)
 12424  0659  01E6               	clrf	((_ModbusData+1)^(0+128)+6)
 12425  065A  2E60               	goto	i1l527
 12426  065B                     i1l3136:	
 12427                           
 12428                           ;main.c: 352: else
 12429                           ;main.c: 353: ModbusData.mcuTOplcData.NutRunDirection = ANTICLOCKWISE;
 12430  065B  3001               	movlw	1
 12431  065C  0021               	movlb	1	; select bank1
 12432  065D  00E5               	movwf	(_ModbusData^(0+128)+6)
 12433  065E  3000               	movlw	0
 12434  065F  00E6               	movwf	(_ModbusData^(0+128)+7)
 12435  0660                     i1l527:	
 12436                           
 12437                           ;main.c: 354: EPCRunTime = 0;
 12438  0660  3000               	movlw	0
 12439  0661  00CB               	movwf	(_EPCRunTime+3)^(0+128)
 12440  0662  3000               	movlw	0
 12441  0663  00CA               	movwf	(_EPCRunTime+2)^(0+128)
 12442  0664  3000               	movlw	0
 12443  0665  00C9               	movwf	(_EPCRunTime+1)^(0+128)
 12444  0666  3000               	movlw	0
 12445  0667  00C8               	movwf	_EPCRunTime^(0+128)
 12446                           
 12447                           ;main.c: 355: EPCPulseCountClock = 0;
 12448  0668  0020               	movlb	0	; select bank0
 12449  0669  01D7               	clrf	_EPCPulseCountClock
 12450  066A  01D8               	clrf	_EPCPulseCountClock+1
 12451                           
 12452                           ;main.c: 356: EPCPulseCountAntiClock = 0;
 12453  066B  01D5               	clrf	_EPCPulseCountAntiClock
 12454  066C  01D6               	clrf	_EPCPulseCountAntiClock+1
 12455  066D                     i1l525:	
 12456                           
 12457                           ;main.c: 357: }
 12458                           ;main.c: 359: ModbusData.mcuTOplcData.NutRunState = RUNNING;
 12459  066D  3001               	movlw	1
 12460  066E  0021               	movlb	1	; select bank1
 12461  066F  00E3               	movwf	(_ModbusData^(0+128)+4)
 12462  0670  3000               	movlw	0
 12463  0671  00E4               	movwf	(_ModbusData^(0+128)+5)
 12464                           
 12465                           ;main.c: 360: ModbusData.mcuTOplcData.MeasureRunTime = EPCRunTime;
 12466  0672  0849               	movf	(_EPCRunTime+1)^(0+128),w
 12467  0673  00E2               	movwf	((_ModbusData+1)^(0+128)+2)
 12468  0674  0848               	movf	_EPCRunTime^(0+128),w
 12469  0675  00E1               	movwf	(_ModbusData^(0+128)+2)
 12470  0676  0008               	return
 12471  0677                     __end_of_OnEncPulseEdgeEvent:	
 12472                           
 12473                           	psect	text66
 12474  0B58                     __ptext66:	
 12475 ;; *************** function i1_TMR3_WriteTimer *****************
 12476 ;; Defined at:
 12477 ;;		line 117 in file "mcc_generated_files/tmr3.c"
 12478 ;; Parameters:    Size  Location     Type
 12479 ;;  timerVal        2    0[COMMON] unsigned int 
 12480 ;; Auto vars:     Size  Location     Type
 12481 ;;		None
 12482 ;; Return value:  Size  Location     Type
 12483 ;;                  1    wreg      void 
 12484 ;; Registers used:
 12485 ;;		wreg, status,2
 12486 ;; Tracked objects:
 12487 ;;		On entry : 0/0
 12488 ;;		On exit  : 0/0
 12489 ;;		Unchanged: 0/0
 12490 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12491 ;;      Params:         2       0       0       0       0       0       0       0
 12492 ;;      Locals:         0       0       0       0       0       0       0       0
 12493 ;;      Temps:          0       0       0       0       0       0       0       0
 12494 ;;      Totals:         2       0       0       0       0       0       0       0
 12495 ;;Total ram usage:        2 bytes
 12496 ;; Hardware stack levels used:    1
 12497 ;; This function calls:
 12498 ;;		Nothing
 12499 ;; This function is called by:
 12500 ;;		_OnEncPulseEdgeEvent
 12501 ;; This function uses a non-reentrant model
 12502 ;;
 12503                           
 12504                           
 12505                           ;psect for function i1_TMR3_WriteTimer
 12506  0B58                     i1_TMR3_WriteTimer:	
 12507                           
 12508                           ;tmr3.c: 119: if (T3CONbits.T3SYNC == 1)
 12509                           
 12510                           ;incstack = 0
 12511                           ; Regs used in i1_TMR3_WriteTimer: [wreg+status,2]
 12512  0B58  0028               	movlb	8	; select bank8
 12513  0B59  1D13               	btfss	19,2	;volatile
 12514  0B5A  2B62               	goto	i1l3060
 12515                           
 12516                           ;tmr3.c: 120: {
 12517                           ;tmr3.c: 122: T3CONbits.TMR3ON = 0;
 12518  0B5B  1013               	bcf	19,0	;volatile
 12519                           
 12520                           ;tmr3.c: 125: TMR3H = (timerVal >> 8);
 12521  0B5C  0871               	movf	i1TMR3_WriteTimer@timerVal+1,w
 12522  0B5D  0092               	movwf	18	;volatile
 12523                           
 12524                           ;tmr3.c: 126: TMR3L = timerVal;
 12525  0B5E  0870               	movf	i1TMR3_WriteTimer@timerVal,w
 12526  0B5F  0091               	movwf	17	;volatile
 12527                           
 12528                           ;tmr3.c: 129: T3CONbits.TMR3ON =1;
 12529  0B60  1413               	bsf	19,0	;volatile
 12530                           
 12531                           ;tmr3.c: 130: }
 12532  0B61  0008               	return
 12533  0B62                     i1l3060:	
 12534                           
 12535                           ;tmr3.c: 131: else
 12536                           ;tmr3.c: 132: {
 12537                           ;tmr3.c: 134: TMR3H = (timerVal >> 8);
 12538  0B62  0871               	movf	i1TMR3_WriteTimer@timerVal+1,w
 12539  0B63  0092               	movwf	18	;volatile
 12540                           
 12541                           ;tmr3.c: 135: TMR3L = timerVal;
 12542  0B64  0870               	movf	i1TMR3_WriteTimer@timerVal,w
 12543  0B65  0091               	movwf	17	;volatile
 12544  0B66  0008               	return
 12545  0B67                     __end_ofi1_TMR3_WriteTimer:	
 12546                           
 12547                           	psect	text67
 12548  0A9D                     __ptext67:	
 12549 ;; *************** function i1_TMR3_StopTimer *****************
 12550 ;; Defined at:
 12551 ;;		line 102 in file "mcc_generated_files/tmr3.c"
 12552 ;; Parameters:    Size  Location     Type
 12553 ;;		None
 12554 ;; Auto vars:     Size  Location     Type
 12555 ;;		None
 12556 ;; Return value:  Size  Location     Type
 12557 ;;                  1    wreg      void 
 12558 ;; Registers used:
 12559 ;;		None
 12560 ;; Tracked objects:
 12561 ;;		On entry : 0/0
 12562 ;;		On exit  : 0/0
 12563 ;;		Unchanged: 0/0
 12564 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12565 ;;      Params:         0       0       0       0       0       0       0       0
 12566 ;;      Locals:         0       0       0       0       0       0       0       0
 12567 ;;      Temps:          0       0       0       0       0       0       0       0
 12568 ;;      Totals:         0       0       0       0       0       0       0       0
 12569 ;;Total ram usage:        0 bytes
 12570 ;; Hardware stack levels used:    1
 12571 ;; This function calls:
 12572 ;;		Nothing
 12573 ;; This function is called by:
 12574 ;;		_Timer3_Overflow
 12575 ;;		_OnEncPulseEdgeEvent
 12576 ;; This function uses a non-reentrant model
 12577 ;;
 12578                           
 12579                           
 12580                           ;psect for function i1_TMR3_StopTimer
 12581  0A9D                     i1_TMR3_StopTimer:	
 12582                           
 12583                           ;tmr3.c: 105: T3CONbits.TMR3ON = 0;
 12584                           
 12585                           ;incstack = 0
 12586                           ; Regs used in i1_TMR3_StopTimer: []
 12587  0A9D  0028               	movlb	8	; select bank8
 12588  0A9E  1013               	bcf	19,0	;volatile
 12589  0A9F  0008               	return
 12590  0AA0                     __end_ofi1_TMR3_StopTimer:	
 12591                           
 12592                           	psect	text68
 12593  0A9A                     __ptext68:	
 12594 ;; *************** function i1_TMR3_StartTimer *****************
 12595 ;; Defined at:
 12596 ;;		line 96 in file "mcc_generated_files/tmr3.c"
 12597 ;; Parameters:    Size  Location     Type
 12598 ;;		None
 12599 ;; Auto vars:     Size  Location     Type
 12600 ;;		None
 12601 ;; Return value:  Size  Location     Type
 12602 ;;                  1    wreg      void 
 12603 ;; Registers used:
 12604 ;;		None
 12605 ;; Tracked objects:
 12606 ;;		On entry : 0/0
 12607 ;;		On exit  : 0/0
 12608 ;;		Unchanged: 0/0
 12609 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12610 ;;      Params:         0       0       0       0       0       0       0       0
 12611 ;;      Locals:         0       0       0       0       0       0       0       0
 12612 ;;      Temps:          0       0       0       0       0       0       0       0
 12613 ;;      Totals:         0       0       0       0       0       0       0       0
 12614 ;;Total ram usage:        0 bytes
 12615 ;; Hardware stack levels used:    1
 12616 ;; This function calls:
 12617 ;;		Nothing
 12618 ;; This function is called by:
 12619 ;;		_OnEncPulseEdgeEvent
 12620 ;; This function uses a non-reentrant model
 12621 ;;
 12622                           
 12623                           
 12624                           ;psect for function i1_TMR3_StartTimer
 12625  0A9A                     i1_TMR3_StartTimer:	
 12626                           
 12627                           ;tmr3.c: 99: T3CONbits.TMR3ON = 1;
 12628                           
 12629                           ;incstack = 0
 12630                           ; Regs used in i1_TMR3_StartTimer: []
 12631  0A9A  0028               	movlb	8	; select bank8
 12632  0A9B  1413               	bsf	19,0	;volatile
 12633  0A9C  0008               	return
 12634  0A9D                     __end_ofi1_TMR3_StartTimer:	
 12635                           
 12636                           	psect	text69
 12637  0AEC                     __ptext69:	
 12638 ;; *************** function _TMR3_ReadTimer *****************
 12639 ;; Defined at:
 12640 ;;		line 108 in file "mcc_generated_files/tmr3.c"
 12641 ;; Parameters:    Size  Location     Type
 12642 ;;		None
 12643 ;; Auto vars:     Size  Location     Type
 12644 ;;  readVal         2    2[COMMON] unsigned int 
 12645 ;; Return value:  Size  Location     Type
 12646 ;;                  2    0[COMMON] unsigned int 
 12647 ;; Registers used:
 12648 ;;		wreg
 12649 ;; Tracked objects:
 12650 ;;		On entry : 0/0
 12651 ;;		On exit  : 0/0
 12652 ;;		Unchanged: 0/0
 12653 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6
 12654 ;;      Params:         2       0       0       0       0       0       0       0
 12655 ;;      Locals:         2       0       0       0       0       0       0       0
 12656 ;;      Temps:          0       0       0       0       0       0       0       0
 12657 ;;      Totals:         4       0       0       0       0       0       0       0
 12658 ;;Total ram usage:        4 bytes
 12659 ;; Hardware stack levels used:    1
 12660 ;; This function calls:
 12661 ;;		Nothing
 12662 ;; This function is called by:
 12663 ;;		_OnEncPulseEdgeEvent
 12664 ;; This function uses a non-reentrant model
 12665 ;;
 12666                           
 12667                           
 12668                           ;psect for function _TMR3_ReadTimer
 12669  0AEC                     _TMR3_ReadTimer:	
 12670                           
 12671                           ;tmr3.c: 110: uint16_t readVal;
 12672                           ;tmr3.c: 112: readVal = (TMR3H << 8) | TMR3L;
 12673                           
 12674                           ;incstack = 0
 12675                           ; Regs used in _TMR3_ReadTimer: [wreg]
 12676  0AEC  0028               	movlb	8	; select bank8
 12677  0AED  0812               	movf	18,w	;volatile
 12678  0AEE  00F3               	movwf	TMR3_ReadTimer@readVal+1
 12679  0AEF  0811               	movf	17,w	;volatile
 12680  0AF0  00F2               	movwf	TMR3_ReadTimer@readVal
 12681                           
 12682                           ;tmr3.c: 114: return readVal;
 12683  0AF1  0873               	movf	TMR3_ReadTimer@readVal+1,w
 12684  0AF2  00F1               	movwf	?_TMR3_ReadTimer+1
 12685  0AF3  0872               	movf	TMR3_ReadTimer@readVal,w
 12686  0AF4  00F0               	movwf	?_TMR3_ReadTimer
 12687  0AF5  0008               	return
 12688  0AF6                     __end_of_TMR3_ReadTimer:	
 12689  007E                     btemp	set	126	;btemp
 12690  007E                     int$flags	set	126
 12691  007E                     wtemp0	set	126


Data Sizes:
    Strings     0
    Constant    8
    Data        1
    BSS         194
    Persistent  4
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     49      75
    BANK1            80      1      80
    BANK2            80      4      66
    BANK3            80      0      32
    BANK4            75      0       0
    BANK5             0      0       0
    BANK6             0      0       0

Pointer List with Targets:

    process_FC16@regs	PTR unsigned int  size(1) Largest target is 16
		 -> ModbusData(BANK1[16]), 

    process_FC15@regs	PTR unsigned int  size(1) Largest target is 16
		 -> ModbusData(BANK1[16]), 

    process_FC6@regs	PTR unsigned int  size(1) Largest target is 16
		 -> ModbusData(BANK1[16]), 

    process_FC5@regs	PTR unsigned int  size(1) Largest target is 16
		 -> ModbusData(BANK1[16]), 

    process_FC3@regs	PTR unsigned int  size(1) Largest target is 16
		 -> ModbusData(BANK1[16]), 

    process_FC1@regs	PTR unsigned int  size(1) Largest target is 16
		 -> ModbusData(BANK1[16]), 

    ModbuspollSlave@regs	PTR unsigned int  size(1) Largest target is 16
		 -> ModbusData(BANK1[16]), 

    au16regs	PTR unsigned int  size(1) Largest target is 16
		 -> NULL(NULL[0]), ModbusData(BANK1[16]), 

    telegram.au16reg	PTR unsigned int  size(1) Largest target is 16
		 -> ModbusData(BANK1[16]), 

    S918$au16reg	PTR unsigned int  size(1) Largest target is 16
		 -> ModbusData(BANK1[16]), 

    telegram.au16reg	PTR unsigned int  size(1) Largest target is 16
		 -> ModbusData.mcuTOplcData(BANK1[8]), ModbusData.plcTOmcuData(BANK1[8]), ModbusData(BANK1[16]), 

    IOCCF5_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> IOCCF5_DefaultInterruptHandler(), 

    IOCCF5_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF5_DefaultInterruptHandler(), Absolute function(), 

    IOCCF4_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> IOCCF4_DefaultInterruptHandler(), 

    IOCCF4_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> IOCCF4_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), Absolute function(), 

    TMR3_SetInterruptHandler@InterruptHandler	PTR void  size(2) Largest target is 1
		 -> TMR3_DefaultInterruptHandler(), 

    TMR3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR3_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    None.

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _Timer3_Overflow->___lldiv
    i1_LedONStartConfig->i1___lwdiv
    _TMR0_CallBack->_Timer0_tick10msecFunc
    _CCP1_CaptureISR->_CCP1_CallBack
    _CCP1_CallBack->_EncA_PulseEdgeEvent
    _EncA_PulseEdgeEvent->_OnEncPulseEdgeEvent
    _OnEncPulseEdgeEvent->_TMR3_ReadTimer

Critical Paths under _main in BANK0

    _main->_ModbuspollSlave
    _SYSTEM_Initialize->_PIN_MANAGER_Initialize
    _TMR3_Initialize->_TMR3_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF4_SetInterruptHandler
    _PIN_MANAGER_Initialize->_IOCCF5_SetInterruptHandler
    _ModbuspollSlave->_process_FC15
    _validateRequest->_calcCRC
    _process_FC6->_sendTxBuffer
    _process_FC5->_sendTxBuffer
    _process_FC3->_sendTxBuffer
    _process_FC16->_sendTxBuffer
    _process_FC15->_sendTxBuffer
    _process_FC1->_sendTxBuffer
    _sendTxBuffer->_calcCRC
    _ClearSerialRxBuffer->_EUSART_Read
    _Serialread->_EUSART_Read
    _Modbusinit->_Serialbegin
    _Serialbegin->_EUSART_Initialize
    _LedONStartConfig->___lwdiv

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    _TMR3_DefaultInterruptHandler->_Timer3_Overflow

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    _main->_ModbuspollSlave

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 1     1      0   20970
                                              0 BANK1      1     1      0
                   _LedONStartConfig
                    _LedONStatusBusy
                         _Modbusinit
                    _ModbuspollSlave
                  _SYSTEM_Initialize
                     _TMR3_StopTimer
                    _TMR3_WriteTimer
 ---------------------------------------------------------------------------------
 (1) _TMR3_WriteTimer                                      2     0      2     190
                                              5 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (1) _TMR3_StopTimer                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     367
                    _CCP1_Initialize
                  _EUSART_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR3_Initialize
                     _WDT_Initialize
 ---------------------------------------------------------------------------------
 (2) _WDT_Initialize                                       0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0      86
           _TMR3_SetInterruptHandler
                    _TMR3_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR3_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR3_SetInterruptHandler                             2     0      2      86
                                              5 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      0     0      0      86
           _TMR0_SetInterruptHandler
                    _TMR0_StartTimer
 ---------------------------------------------------------------------------------
 (3) _TMR0_StartTimer                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      86
                                              5 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               1     1      0     195
                                              7 BANK0      1     1      0
         _IOCCF4_SetInterruptHandler
         _IOCCF5_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _IOCCF5_SetInterruptHandler                           2     0      2      86
                                              5 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (3) _IOCCF4_SetInterruptHandler                           2     0      2      86
                                              5 BANK0      2     0      2
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _CCP1_Initialize                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _ModbuspollSlave                                      9     8      1   19149
                                             44 BANK0      5     4      1
                                              0 BANK2      4     4      0
                    _Serialavailable
                     _buildException
                        _getRxBuffer
                             _millis
                        _process_FC1
                       _process_FC15
                       _process_FC16
                        _process_FC3
                        _process_FC5
                        _process_FC6
                       _sendTxBuffer
                    _validateRequest
 ---------------------------------------------------------------------------------
 (2) _validateRequest                                     12    12      0    2304
                                             18 BANK0     12    12      0
                            _calcCRC
                        _wordConvert
 ---------------------------------------------------------------------------------
 (2) _process_FC6                                          8     7      1    2303
                                             25 BANK0      8     7      1
                       _sendTxBuffer
                        _wordConvert
 ---------------------------------------------------------------------------------
 (2) _process_FC5                                         10     9      1    2461
                                             25 BANK0     10     9      1
                       _sendTxBuffer
                        _wordConvert
 ---------------------------------------------------------------------------------
 (2) _process_FC3                                         10     9      1    2495
                                             25 BANK0     10     9      1
                       _sendTxBuffer
                        _wordConvert
 ---------------------------------------------------------------------------------
 (2) _process_FC16                                        11    10      1    2501
                                             25 BANK0     11    10      1
                       _sendTxBuffer
                        _wordConvert
 ---------------------------------------------------------------------------------
 (2) _process_FC15                                        19    18      1    2739
                                             25 BANK0     19    18      1
                       _sendTxBuffer
                        _wordConvert
 ---------------------------------------------------------------------------------
 (2) _process_FC1                                         18    17      1    2742
                                             25 BANK0     18    17      1
                       _sendTxBuffer
                        _wordConvert
 ---------------------------------------------------------------------------------
 (3) _wordConvert                                          8     6      2    1448
                                              5 BANK0      8     6      2
 ---------------------------------------------------------------------------------
 (2) _sendTxBuffer                                         7     7      0     612
                                             18 BANK0      7     7      0
                _ClearSerialRxBuffer
                        _Serialwrite
                            _calcCRC
                             _millis
 ---------------------------------------------------------------------------------
 (3) _millis                                               4     0      4       0
                                              5 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (3) _calcCRC                                             13    11      2     405
                                              5 BANK0     13    11      2
 ---------------------------------------------------------------------------------
 (3) _Serialwrite                                          1     1      0      31
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (3) _ClearSerialRxBuffer                                  2     2      0      40
                                              7 BANK0      2     2      0
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (2) _getRxBuffer                                          2     2      0      74
                                              7 BANK0      2     2      0
                    _Serialavailable
                         _Serialread
 ---------------------------------------------------------------------------------
 (3) _Serialread                                           0     0      0      37
                        _EUSART_Read
 ---------------------------------------------------------------------------------
 (4) _EUSART_Read                                          2     2      0      37
                                              5 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (3) _Serialavailable                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _buildException                                       3     3      0      65
                                              5 BANK0      3     3      0
 ---------------------------------------------------------------------------------
 (1) _Modbusinit                                           2     2      0      86
                                             10 BANK0      2     2      0
                        _Serialbegin
 ---------------------------------------------------------------------------------
 (2) _Serialbegin                                          4     0      4      64
                                              6 BANK0      4     0      4
                  _EUSART_Initialize
 ---------------------------------------------------------------------------------
 (2) _EUSART_Initialize                                    1     1      0       0
                                              5 BANK0      1     1      0
 ---------------------------------------------------------------------------------
 (1) _LedONStatusBusy                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _LedONStartConfig                                     5     3      2    1178
                                             13 BANK0      5     3      2
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4     220
                                              5 BANK0      6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4     290
                                              5 BANK0      8     4      4
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (6) _INTERRUPT_InterruptManager                           1     1      0    1304
                                              4 BANK0      1     1      0
                    _CCP1_CaptureISR
                 _EUSART_Receive_ISR
                _EUSART_Transmit_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                           _TMR3_ISR
 ---------------------------------------------------------------------------------
 (7) _TMR3_ISR                                             0     0      0     884
                   Absolute function *
       _TMR3_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _TMR3_DefaultInterruptHandler                         0     0      0     884
                    _Timer3_Overflow
 ---------------------------------------------------------------------------------
 (9) _Timer3_Overflow                                      4     4      0     884
                                              0 BANK0      4     4      0
                            ___lldiv
                 i1_LedONStartConfig
                   i1_TMR3_StopTimer
 ---------------------------------------------------------------------------------
 (10) i1_LedONStartConfig                                  5     3      2     594
                                              8 COMMON     5     3      2
                          i1___lwdiv
                           i1___wmul
 ---------------------------------------------------------------------------------
 (11) i1___wmul                                            6     2      4     144
                                              0 COMMON     6     2      4
 ---------------------------------------------------------------------------------
 (11) i1___lwdiv                                           8     4      4     214
                                              0 COMMON     8     4      4
 ---------------------------------------------------------------------------------
 (10) ___lldiv                                            14     6      8     290
                                              0 COMMON    14     6      8
 ---------------------------------------------------------------------------------
 (7) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (8) _TMR0_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
              _Timer0_tick10msecFunc
 ---------------------------------------------------------------------------------
 (9) _Timer0_tick10msecFunc                                4     4      0       0
                                              0 COMMON     4     4      0
               _LedON_Control_10msec
 ---------------------------------------------------------------------------------
 (10) _LedON_Control_10msec                                0     0      0       0
 ---------------------------------------------------------------------------------
 (9) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _PIN_MANAGER_IOC                                      0     0      0       0
                         _IOCCF4_ISR
                         _IOCCF5_ISR
 ---------------------------------------------------------------------------------
 (8) _IOCCF5_ISR                                           0     0      0       0
                   Absolute function *
     _IOCCF5_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (9) _IOCCF5_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _IOCCF4_ISR                                           0     0      0       0
                   Absolute function *
     _IOCCF4_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (9) _IOCCF4_DefaultInterruptHandler                       0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 (7) _EUSART_Transmit_ISR                                  1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _EUSART_Receive_ISR                                   1     1      0       0
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (7) _CCP1_CaptureISR                                      3     3      0     420
                                             12 COMMON     1     1      0
                                              0 BANK0      2     2      0
                      _CCP1_CallBack
 ---------------------------------------------------------------------------------
 (8) _CCP1_CallBack                                        2     0      2     373
                                             10 COMMON     2     0      2
                _EncA_PulseEdgeEvent
 ---------------------------------------------------------------------------------
 (9) _EncA_PulseEdgeEvent                                  2     0      2     287
                                              8 COMMON     2     0      2
                _OnEncPulseEdgeEvent
 ---------------------------------------------------------------------------------
 (10) _OnEncPulseEdgeEvent                                 4     2      2     201
                                              4 COMMON     4     2      2
                     _TMR3_ReadTimer
                  i1_TMR3_StartTimer
                   i1_TMR3_StopTimer
                  i1_TMR3_WriteTimer
 ---------------------------------------------------------------------------------
 (11) i1_TMR3_WriteTimer                                   2     0      2     114
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (10) i1_TMR3_StopTimer                                    0     0      0       0
 ---------------------------------------------------------------------------------
 (11) i1_TMR3_StartTimer                                   0     0      0       0
 ---------------------------------------------------------------------------------
 (11) _TMR3_ReadTimer                                      4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 11
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _LedONStartConfig
     ___lwdiv
     ___wmul
   _LedONStatusBusy
   _Modbusinit
     _Serialbegin
       _EUSART_Initialize
   _ModbuspollSlave
     _Serialavailable
     _buildException
     _getRxBuffer
       _Serialavailable
       _Serialread
         _EUSART_Read
     _millis
     _process_FC1
       _sendTxBuffer
         _ClearSerialRxBuffer
           _EUSART_Read
         _Serialwrite
         _calcCRC
         _millis
       _wordConvert
     _process_FC15
       _sendTxBuffer
         _ClearSerialRxBuffer
           _EUSART_Read
         _Serialwrite
         _calcCRC
         _millis
       _wordConvert
     _process_FC16
       _sendTxBuffer
         _ClearSerialRxBuffer
           _EUSART_Read
         _Serialwrite
         _calcCRC
         _millis
       _wordConvert
     _process_FC3
       _sendTxBuffer
         _ClearSerialRxBuffer
           _EUSART_Read
         _Serialwrite
         _calcCRC
         _millis
       _wordConvert
     _process_FC5
       _sendTxBuffer
         _ClearSerialRxBuffer
           _EUSART_Read
         _Serialwrite
         _calcCRC
         _millis
       _wordConvert
     _process_FC6
       _sendTxBuffer
         _ClearSerialRxBuffer
           _EUSART_Read
         _Serialwrite
         _calcCRC
         _millis
       _wordConvert
     _sendTxBuffer
       _ClearSerialRxBuffer
         _EUSART_Read
       _Serialwrite
       _calcCRC
       _millis
     _validateRequest
       _calcCRC
       _wordConvert
   _SYSTEM_Initialize
     _CCP1_Initialize
     _EUSART_Initialize
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
       _IOCCF4_SetInterruptHandler
       _IOCCF5_SetInterruptHandler
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
       _TMR0_StartTimer
     _TMR3_Initialize
       _TMR3_SetInterruptHandler
       _TMR3_StartTimer
     _WDT_Initialize
   _TMR3_StopTimer
   _TMR3_WriteTimer

 _INTERRUPT_InterruptManager (ROOT)
   _CCP1_CaptureISR
     _CCP1_CallBack
       _EncA_PulseEdgeEvent
         _OnEncPulseEdgeEvent
           _TMR3_ReadTimer
           i1_TMR3_StartTimer
           i1_TMR3_StopTimer
           i1_TMR3_WriteTimer
   _EUSART_Receive_ISR
   _EUSART_Transmit_ISR
   _PIN_MANAGER_IOC
     _IOCCF4_ISR
       Absolute function(Fake) *
       _IOCCF4_DefaultInterruptHandler *
     _IOCCF5_ISR
       Absolute function(Fake) *
       _IOCCF5_DefaultInterruptHandler *
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
       _Timer0_tick10msecFunc *
         _LedON_Control_10msec
   _TMR3_ISR
     Absolute function(Fake) *
     _TMR3_DefaultInterruptHandler *
       _Timer3_Overflow
         ___lldiv
         i1_LedONStartConfig
           i1___lwdiv
           i1___wmul
         i1_TMR3_StopTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             1F0      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      E       E       2      100.0%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
ABS                  0      0     10B       4        0.0%
BITBANK0            50      0       0       5        0.0%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BANK0               50     31      4B       6       93.8%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BITBANK1            50      0       0       7        0.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BANK1               50      1      50       8      100.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BITBANK2            50      0       0       9        0.0%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BANK2               50      4      42      10       82.5%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BITBANK3            50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BANK3               50      0      20      12       40.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BITBANK4            50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BANK4               4B      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BITBANK5            50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK5                0      0       0      16        0.0%
BITBANK6            10      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK6                0      0       0      18        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
DATA                 0      0     10B      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.41 build -162212810 
Symbol Table                                                                                   Thu Aug 09 17:49:46 2018

              process_FC5@u8currentRegister 0041      __end_of_IOCCF4_DefaultInterruptHandler 0A99  
   __size_of_IOCCF4_DefaultInterruptHandler 0001              _IOCCF4_DefaultInterruptHandler 0A98  
                               __CFG_CP$OFF 0000                         ___wmul@multiplicand 0027  
                          i1___wmul@product 0074                     __end_of_CCP1_Initialize 0B85  
                               __CFG_LVP$ON 0000                                         l340 0B07  
                                       l620 0778                                         l623 077B  
                                       l616 0775                                         l800 02AE  
                                       l590 0AFC                                         l904 0370  
                                       _GIE 005F                                __CFG_CPD$OFF 0000  
             LedONStartConfig@LedONNumBlink 002E                       ??_ClearSerialRxBuffer 0027  
                 __size_of_LedONStartConfig 0066                                         wreg 0009  
                              ?_EUSART_Read 0070                                process_FC3@i 0042  
                           ?_buildException 0070                                        l1084 0C88  
                           _timer3ReloadVal 0059                                        l5000 051C  
                                      l5042 056C                                        l4502 0B4A  
                                      l4504 0B56                                        l4530 0E60  
                                      l4522 0E4D                                        l4612 0D44  
                                      l4700 01A3                                        l4622 0D70  
                                      l4614 0D60                                        l4534 0E68  
                                      l3832 0C82                                        l4536 0E3A  
                                      l4800 0FF2                                        l4640 00C6  
                                      l4474 0CDB                                        l4538 0E6D  
                                      l4634 00BF                                        l4740 0340  
                                      l4724 02F1                                        l4644 00D6  
                                      l3862 07EF                                        l3854 07D1  
                                      l4750 035D                                        l4742 0350  
                                      l4654 00E9                                        l3856 07DD  
                                      l4584 05B0                                        l4752 02FE  
                                      l4840 04AA                                        l4656 00ED  
                                      l4648 00DF                                        l3866 07F8  
                                      l3954 077E                                        l4586 05C2  
                                      l4578 05AF                                        l4754 0362  
                                      l4850 04CE                                        l4842 04C1  
                                      l4666 0125                                        l4906 01DD  
                                      l3882 0C0A                                        l3964 07BC  
                                      l3956 078A                                        l4852 0461  
                                      l4780 06E3                                        l4676 0144  
                                      l4854 04D3                                        l4686 015E  
                                      l4942 0257                                        l4934 0227  
                                      l4880 0EA8                                        l4960 0275  
                                      l4882 0ED3                                        l4778 06A7  
                                      l4698 0188                                        l4954 026B  
                                      l4938 022F                                        l4972 0289  
                                      l4948 0261                                        l4980 0293  
                                      l4798 0FDA                                        l4966 027F  
                                      l4992 04FE                                        l4996 050D  
                                      _LATA 010C                                        _LATB 010D  
                                      _LATC 010E                                        u4005 0311  
                                      u4014 032C                                        u4015 032A  
                                      u4034 0335                                        u4114 0FCC  
                                      u4035 0334                                        u4115 0FCA  
                                      u4044 0345                                        u4124 0FE3  
                                      u4045 0344                                        u4125 0FE1  
                                      u2470 0F34                                        u4135 0474  
                                      u4144 048A                                        u4065 0304  
                                      u4145 0489                                        u4235 01F6  
                                      u4164 049C                                        u4165 049A  
                                      u4085 06B3                                        u4174 04B2  
                                      u4175 04B0                                        u4095 0FB2  
                                      u4195 0467                                        u2925 07D4  
                                      u2945 07DE                                        u2955 07E8  
                                      u2965 07F0                                        u2885 0C89  
                                      u2895 0C8E                                        u3945 0113  
                                      u3795 0E54                                        u3895 00B6  
                                      _PLLR 48E0                                        _WPUA 020C  
                                      _WPUB 020D                                        _WPUC 020E  
                                      _u8ID 0060                                __CFG_WRT$OFF 0000  
                             __CFG_FCMEN$ON 0000                                 _wordConvert 0B96  
                                      _main 04E1                             _TMR0_StartTimer 0AAF  
                                      fsr0h 0005                                        fsr1h 0007  
                                      indf0 0000                                        fsr0l 0004  
                                      indf1 0001                                        fsr1l 0006  
                                      btemp 007E            ??_IOCCF5_DefaultInterruptHandler 0070  
           ?_IOCCF5_DefaultInterruptHandler 0070                               __CFG_BOREN$ON 0000  
                             __CFG_BORV$LOW 0000                                        start 0050  
                   process_FC1@u8currentBit 003F                             _TMR3_Initialize 0C48  
                             __CFG_CSWEN$ON 0000                               __CFG_MCLRE$ON 0000  
                          ?_CCP1_CaptureISR 0070                           ??_ModbuspollSlave 004D  
                             process_FC16@i 0043                           ??_Serialavailable 0025  
                   __end_of_TMR0_Initialize 0BFC              ??_TMR0_DefaultInterruptHandler 0070  
                        _EPCPulseCountClock 0057              __size_of_OSCILLATOR_Initialize 000A  
             __end_of_OSCILLATOR_Initialize 0B0A                         __size_of_IOCCF4_ISR 000D  
                       __size_of_IOCCF5_ISR 000D                                       ?_main 0070  
                             __CFG_WDTE$OFF 0000                             __end_of___lldiv 0E33  
             process_FC15@u8currentRegister 0047                             __end_of_calcCRC 0E86  
                                     _T3CON 0413                              __CFG_DEBUG$OFF 0000  
                           __end_of___lwdiv 07FD                                       i1l120 0CB6  
                                     i1l620 0F4C                                       i1l525 066D  
                                     i1l381 001F                                       i1l527 0660  
                                     i1l623 0F4F                                       i1l383 002B  
                                     i1l391 004B                                       i1l616 0F49  
                                     i1l385 0037                                       i1l387 0043  
                                     i1l379 0013                                       i1l653 0745  
                                     i1l656 0748                                       i1l649 0742  
                                     _OSCEN 091D                            ?_validateRequest 0070  
                                     _TMR0H 0016                                       _TMR0L 0015  
                                     _TMR3H 0412                                       _TMR3L 0411  
                                     _TRISA 008C                                       _TRISB 008D  
                                     _TRISC 008E                      __size_of_CCP1_CallBack 0007  
         __size_of_TMR0_SetInterruptHandler 0009           __size_of_TMR3_SetInterruptHandler 0009  
                 ?_TMR0_SetInterruptHandler 0025                   ?_TMR3_SetInterruptHandler 0025  
                                     _Rbuff 218B                            __end_of_TMR0_ISR 0AC1  
                          __end_of_TMR3_ISR 0BBC                      ?_Timer0_tick10msecFunc 0070  
            ??_TMR3_DefaultInterruptHandler 007E                     __end_of_PIN_MANAGER_IOC 0B16  
                            _WDT_Initialize 0AB8                     process_FC15@u8frameByte 0043  
                 ClearSerialRxBuffer@bdummy 0028                                       pclath 000A  
                          __end_ofi1___wmul 0C48                    __end_ofi1_TMR3_StopTimer 0AA0  
                __end_ofi1_LedONStartConfig 0F9B                         _OnEncPulseEdgeEvent 05F8  
                                     status 0003                         i1___wmul@multiplier 0070  
                                     wtemp0 007E                          __size_ofi1___lwdiv 0034  
                           _LedONStatusBusy 0AA3                             __initialization 0052  
                              __end_of_main 0577                             calcCRC@u8length 0029  
               ?_INTERRUPT_InterruptManager 0070                        ?_OnEncPulseEdgeEvent 0074  
                         ??_Timer3_Overflow 0020                                      ??_main 00EF  
                                _u32timeOut 014E                                  _u16timeOut 00CC  
                          ?_CCP1_Initialize 0070                             _TMR3_StartTimer 0AB2  
                     _TMR3_InterruptHandler 00DA                                  _ModbusData 00DF  
                    __end_of_WDT_Initialize 0ABC                                  _Modbusinit 0CF9  
                   __end_of_TMR0_StartTimer 0AB2             i1LedONStartConfig@LedONNumBlink 0079  
                                    _CCPR1H 0292                                      _CCPR1L 0291  
                      __size_of_getRxBuffer 0032                ??_IOCCF4_SetInterruptHandler 0027  
                                    _ANSELA 018C                                      _ANSELB 018D  
                                    _ANSELC 018E                                      _T0CON0 0017  
                                    _T0CON1 0018                                      _T3GCON 0414  
                                    _RC1REG 0199                                      _RC1STA 019D  
                                    i1l3100 0DA2                                      i1l1084 0C35  
                                    i1l3120 0635                                      _ODCONA 028C  
                                    i1l3122 063A                                      _ODCONB 028D  
                                    _ODCONC 028E                                      i1l3060 0B62  
                                    u200_25 0D9A                                      i1l3126 0641  
                                    i1l3150 0708                                      i1l3230 0DF1  
                                    i1l3136 065B                                      i1l3128 0645  
                                    i1l3152 0714                                      i1l3160 0736  
                                    i1l3240 0E1F                                      i1l3232 0DFF  
                                    i1l3170 075C                                      i1l3090 0D87  
                                    i1l3066 0C2F                                      i1l3148 06FC  
                                    i1l3156 0720                                      i1l3244 0E2A  
                                    i1l3260 0F52                                      i1l3166 074B  
                                    i1l3158 072C                                      i1l3270 0F8F  
                                    i1l3262 0F5E                                      i1l3318 0428  
                                    i1l3168 0757                                      i1l3096 0D99  
                                    i1l3088 0D7B                                      i1l3514 0B39  
                                    i1l3290 039B                                      i1l3508 0B2C  
                   __end_of_TMR3_Initialize 0C63                                      u202_25 0613  
                                    i1l3298 03CC                                      u211_25 06F9  
                                    i1l3912 0C68                                      u212_20 0705  
                                    i1l3930 0B10                                      u214_20 0711  
                                    u230_25 0E14                                      u231_25 0E20  
                                    u216_20 071D                                      _INLVLA 038C  
                                    _INLVLC 038E                                      u240_25 03FD  
                                    u209_25 0655                                      u241_25 0417  
                                    u218_25 073F                                      u227_25 0DF4  
                                    u229_25 0E00                                      u238_25 038B  
                                    u192_25 0C36                                      u193_25 0C3B  
                                    u196_25 0D7E                                      u198_25 0D88  
                                    u199_25 0D92                                      _OSCFRQ 091F  
                                    _TX1REG 019A                                      _WDTCON 0097  
                                    _TX1STA 019E                               ??_Serialbegin 002A  
                     process_FC15@u16Coilno 003F                             _TMR3_WriteTimer 0BFC  
                                    _Led_ON 0061                               _CCP1_CallBack 0AC1  
                            __CFG_PWRTE$OFF 0000                               ??_Serialwrite 0025  
                                _Serialread 0AAC                           process_FC15@bTemp 0042  
                                    ___wmul 0C7F                              __CFG_STVREN$ON 0000  
                                 ??___lldiv 0078                                   ??_calcCRC 0027  
                                 ??___lwdiv 0029                         _EUSART_Transmit_ISR 0C9B  
                          ?_TMR0_Initialize 0070                                      _millis 0B85  
                     ??_OnEncPulseEdgeEvent 0076         __size_of_IOCCF4_SetInterruptHandler 0009  
                         __end_ofi1___lwdiv 0DA7                            _LedONStartConfig 0762  
                           ?_WDT_Initialize 0070                           process_FC1@u8size 0039  
                     __end_of_TMR0_CallBack 0B4A                           process_FC6@u16val 003C  
IOCCF5_SetInterruptHandler@InterruptHandler 0025  IOCCF4_SetInterruptHandler@InterruptHandler 0025  
  TMR0_SetInterruptHandler@InterruptHandler 0025    TMR3_SetInterruptHandler@InterruptHandler 0025  
                          ?_PIN_MANAGER_IOC 0070                 __end_of_EncA_PulseEdgeEvent 0B76  
                         process_FC3@u8size 0039                     __end_of_LedONStatusBusy 0AA6  
                              ?_process_FC1 0039                                ?_process_FC3 0039  
                              ?_process_FC5 0039                                ?_process_FC6 0039  
               process_FC5@u8CopyBufferSize 003D                        ?_EUSART_Transmit_ISR 0070  
                         process_FC5@u8size 0039                                ??_IOCCF4_ISR 0070  
                              ??_IOCCF5_ISR 0070                           process_FC6@u8size 0039  
                      __size_of_EUSART_Read 0020                           _SYSTEM_Initialize 0BD1  
                   __end_of__initialization 008C                    process_FC15@u8currentBit 0048  
                  validateRequest@u16MsgCRC 0037                              ?_CCP1_CallBack 007A  
                        ?_SYSTEM_Initialize 0070                __end_of_LedON_Control_10msec 0762  
                            __pcstackCOMMON 0070                                __pidataBANK0 0003  
                       ??_SYSTEM_Initialize 0028                                calcCRC@temp2 002A  
                   __end_of_TMR3_StartTimer 0AB5                                   ?_TMR0_ISR 0070  
                                 ?_TMR3_ISR 0070                         __end_of_Serialbegin 0AA9  
                      __end_of_fctsupported 0805                      _EPCPulseCountAntiClock 0055  
                       __end_of_Serialwrite 0B00                                   ?i1___wmul 0070  
                        __end_of_IOCCF4_ISR 0B2F                          __end_of_IOCCF5_ISR 0B3C  
                          ??_buildException 0025                                 ?_Modbusinit 0070  
                          ?_TMR0_StartTimer 0070                   __end_of_SYSTEM_Initialize 0BE6  
                     ??_EUSART_Transmit_ISR 0070                     __end_of_TMR3_WriteTimer 0C13  
                           process_FC1@regs 003D                                  __pbssBANK0 0051  
                                __pbssBANK1 00A0                                  __pbssBANK2 0120  
                                __pbssBANK3 01A0                             process_FC3@regs 003F  
                           process_FC5@regs 0040                             process_FC6@regs 003E  
                          ?_TMR3_Initialize 0070                                ?_wordConvert 0025  
                             ?_sendTxBuffer 0070                      validateRequest@u16regs 003C  
                           _ModbuspollSlave 01A5                             _Serialavailable 0AA9  
               __size_of_EUSART_Receive_ISR 001C                                  _delayCount 00D4  
                               ?_Serialread 0070                     __size_of_TMR3_ReadTimer 000A  
                                __pmaintext 04E1             OnEncPulseEdgeEvent@capturevalue 0074  
          __end_of_TMR0_SetInterruptHandler 0AE3            __end_of_TMR3_SetInterruptHandler 0AEC  
                                   ?___wmul 0025                                  ??_TMR0_ISR 0074  
                           __CFG_PPS1WAY$ON 0000                                  ??_TMR3_ISR 007E  
                                __pintentry 0004                                     _CCP1CAP 0294  
                                   _CCP1CON 0293                 __end_of_ClearSerialRxBuffer 0B58  
                                   ?_millis 0025      __end_of_IOCCF5_DefaultInterruptHandler 0A9A  
   __size_of_IOCCF5_DefaultInterruptHandler 0001              _IOCCF5_DefaultInterruptHandler 0A99  
                       __CFG_RSTOSC$HFINT32 0000                                  ??i1___wmul 0074  
                             _eusartRxCount 0064                     ??_Timer0_tick10msecFunc 0070  
                                   _SP1BRGH 019C                                     _SP1BRGL 019B  
                                   _OSCCON1 0919                                     _OSCCON3 091B  
                                   _OSCTUNE 091E          __end_of_IOCCF4_SetInterruptHandler 0AD1  
                _IOCCF4_SetInterruptHandler 0AC8                                     _PPSLOCK 0E0F  
                validateRequest@isSupported 0039                            ?_LedONStatusBusy 0070  
                        sendTxBuffer@u16crc 0036                             ??_CCP1_CallBack 007C  
                            ??_sendTxBuffer 0032                           ?i1_TMR3_StopTimer 0070  
                       _Blick_tickPointMsec 0053                     __size_of_TMR3_StopTimer 0003  
                               _Serialbegin 0AA6                          ??i1_TMR3_StopTimer 0070  
                                   _u32wait 0152                                     _u32time 00C0  
                           _Timer3_Overflow 037A                                 _Serialwrite 0AF6  
                          _capturePulseusec 00D6                   buildException@u8exception 0026  
                       __size_of_Modbusinit 0022                            ?_TMR3_StartTimer 0070  
                                   ___lldiv 0DE1                             __size_of___wmul 001C  
                                   _calcCRC 0E33                     process_FC1@u16StartCoil 0041  
                                   ___lwdiv 07C8                 process_FC6@u8CopyBufferSize 0040  
                        process_FC15@u8size 0039                          i1_LedONStartConfig 0F36  
                        process_FC16@u8func 003C                          process_FC16@u8size 0039  
                                   _u8state 005F                                     _u8query 00DD  
                           __size_of_millis 0011                               sendTxBuffer@i 0038  
                                   __ptext1 0BFC                                     __ptext2 0AB5  
                                   __ptext3 0BD1                                     __ptext4 0AB8  
                                   __ptext5 0C48                                     __ptext6 0AB2  
                                   __ptext7 0AE3                                     __ptext8 0BE6  
                                   __ptext9 0AAF                    __size_of_CCP1_CaptureISR 0015  
                         i1___lwdiv@divisor 0070                       _OSCILLATOR_Initialize 0B00  
                         i1___lwdiv@counter 0077                         ?i1_LedONStartConfig 0078  
                      _LedON_Control_10msec 06EE                                   _T3CONbits 0413  
                  ??_PIN_MANAGER_Initialize 0027                                   _IOCCFbits 0399  
                                 _IOCCNbits 0398                                   _IOCCPbits 0397  
                       __size_of_Serialread 0003                     __end_of_ModbuspollSlave 02AF  
                   __end_of_Serialavailable 0AAC                  __size_of_SYSTEM_Initialize 0015  
                                 _LED_Color 006A                                     clrloop0 0B17  
                      end_of_initialization 008C                            ?_TMR3_WriteTimer 0025  
                  __size_of_validateRequest 0115                        __size_of_process_FC1 00CB  
                      __size_of_process_FC3 0077                        __size_of_process_FC5 0065  
                      __size_of_process_FC6 003A                          process_FC1@u16coil 0044  
                         _EUSART_Initialize 0C13                        ??i1_LedONStartConfig 007A  
                           ___lldiv@divisor 0070                    __end_of_LedONStartConfig 07C8  
                           ___lldiv@counter 007D                          ?_EUSART_Initialize 0070  
                        process_FC5@u16coil 003E                       TMR3_ReadTimer@readVal 0072  
                               _PulseStatus 0063                                __pstringtext 07FD  
                     i1___wmul@multiplicand 0072            LedONStartConfig@LedONDurationSec 002D  
        i1LedONStartConfig@LedONDurationSec 0078                         ??_EUSART_Initialize 0025  
                             ?_process_FC15 0039                               ?_process_FC16 0039  
                          ??_WDT_Initialize 0025                    _TMR0_SetInterruptHandler 0ADA  
                                 _PORTCbits 000E                    _TMR3_SetInterruptHandler 0AE3  
                       ModbuspollSlave@regs 0161                       ?_LedON_Control_10msec 0070  
                   _IOCCF4_InterruptHandler 015C                               ??_getRxBuffer 0027  
                          wordConvert@hByte 002C                            wordConvert@lByte 0025  
                                 i1___lwdiv 0D73                    __size_of_CCP1_Initialize 000F  
                          __CFG_FEXTOSC$OFF 0000                ??_IOCCF5_SetInterruptHandler 0027  
                ModbuspollSlave@u8exception 0160                     __end_of_Timer3_Overflow 0438  
                                 _RXPPSbits 0E24                                _fctsupported 07FD  
                 __end_of_EUSART_Initialize 0C2D                            validateRequest@i 003A  
                      __size_of_wordConvert 0012                              _TMR3_ReadTimer 0AEC  
                process_FC15@u16currentCoil 0049                 __end_of_OnEncPulseEdgeEvent 0677  
                               _CCP1PPSbits 0E14                              ??_process_FC15 003A  
                            ??_process_FC16 003A                              __end_of___wmul 0C9B  
                         __size_of_TMR0_ISR 0005                           __size_of_TMR3_ISR 0014  
                      __end_of_sendTxBuffer 05F8                      process_FC16@u8StartAdd 0040  
                    ?_OSCILLATOR_Initialize 0070                              __end_of_millis 0B96  
       __size_of_IOCCF5_SetInterruptHandler 0009                                   _u16OutCnt 0158  
                       start_initialization 0052                           __size_ofi1___wmul 001B  
                              ??_Modbusinit 002A                                 _u8lastError 00DC  
                  __size_of_TMR0_Initialize 0016             __size_of_PIN_MANAGER_Initialize 0059  
                             ??_EUSART_Read 0025                                   _u16errCnt 0156  
                          ?_ModbuspollSlave 004C                            ?_Serialavailable 0070  
                                ?i1___lwdiv 0070                           ??_CCP1_CaptureISR 007C  
               process_FC1@u8CopyBufferSize 0040                         __end_of_getRxBuffer 0D73  
                 process_FC1@u16currentCoil 0046                    ModbuspollSlave@u8current 015F  
                            _TMR3_StopTimer 0AB5                      __end_of_TMR3_ReadTimer 0AF6  
              __size_of_EncA_PulseEdgeEvent 000F                    __size_of_PIN_MANAGER_IOC 000C  
                         ??_validateRequest 0032                                ??_Serialread 0027  
                          __CFG_LPBOREN$OFF 0000                    process_FC15@u16StartCoil 003D  
                   process_FC5@u8currentBit 0042                            process_FC15@regs 0046  
                          process_FC16@regs 003F                            process_FC16@temp 003D  
                                  ??___wmul 0029                          __end_of_Modbusinit 0D1B  
                              _LED_msec_Cnt 00D2                                 _CCPTMRSbits 029F  
                    __size_of_TMR0_CallBack 000E                                 __pdataBANK0 006A  
                                  ??_millis 0029                                   _au8Buffer 00A0  
                    ??_LedON_Control_10msec 0070                            process_FC6@u8add 003F  
                     CCP1_CaptureISR@module 0020                                 __pbssBIGRAM 218B  
               __end_of_EUSART_Transmit_ISR 0CB9                                   ___latbits 0001  
            __size_of_Timer0_tick10msecFunc 0026                               __pcstackBANK0 0020  
                             __pcstackBANK1 00EF                               __pcstackBANK2 015E  
             __end_of_Timer0_tick10msecFunc 0D41                                 calcCRC@flag 002C  
                               calcCRC@temp 0030                        process_FC15@u8bitsno 004B  
               ?_IOCCF4_SetInterruptHandler 0025                          __end_of_Serialread 0AAF  
                                 _u8lastRec 005D                      __end_of_TMR3_StopTimer 0AB8  
                __end_of_EUSART_Receive_ISR 0C7F                            ?_Timer3_Overflow 0070  
                                 _u8regsize 005B                  __size_of_EUSART_Initialize 001A  
                      process_FC16@u8regsno 0042                             ?_TMR3_ReadTimer 0070  
                                 _u8state_t 00DE                         __end_of_EUSART_Read 0CF9  
                     _TMR0_InterruptHandler 00D8                           ??_CCP1_Initialize 0025  
                                 __pnvBANK2 015A                                ?_Serialbegin 0026  
                  __size_of_TMR0_StartTimer 0003                                   _delayFlag 0062  
                           Serialbegin@baud 0026                     _IOCCF5_InterruptHandler 015A  
                          ___lwdiv@dividend 0027                      _PIN_MANAGER_Initialize 0EDD  
                              ?_Serialwrite 0070                    __size_of_TMR3_Initialize 001B  
                      EUSART_Read@readValue 0026                       validateRequest@u8regs 003B  
              process_FC1@u8currentRegister 003E                                    ?___lldiv 0070  
                                  ?_calcCRC 0025                                    ?___lwdiv 0025  
                              _eusartRxHead 0066                                _eusartTxHead 0069  
                              _eusartRxTail 0065                                _eusartTxTail 0068  
                 __size_ofi1_TMR3_StopTimer 0003                ??_INTERRUPT_InterruptManager 0024  
                   _eusartTxBufferRemaining 0067                                    _BAUD1CON 019F  
              __size_of_ClearSerialRxBuffer 000E                                 _getRxBuffer 0D41  
        __end_of_IOCCF5_SetInterruptHandler 0ADA                  _IOCCF5_SetInterruptHandler 0AD1  
                          ___lwdiv@quotient 002A                                 ??i1___lwdiv 0074  
                             _TMR0_CallBack 0B3C                             ?_TMR3_StopTimer 0070  
                            _eusartRxBuffer 01A0            ??_IOCCF4_DefaultInterruptHandler 0070  
           ?_IOCCF4_DefaultInterruptHandler 0070                        __end_of_process_FC15 04E1  
                      __end_of_process_FC16 0EDD                           ??_TMR0_Initialize 0027  
                            _eusartTxBuffer 0120                     __size_of_buildException 0020  
                            ___wmul@product 0029                                    _LATBbits 010D  
                                  _LATCbits 010E                       __end_of_CCP1_CallBack 0AC8  
                                 clear_ram0 0B16                                    _PIE0bits 0090  
                                  _PIE1bits 0091                                    _PIE3bits 0093  
                                  _PIE4bits 0094                    __size_of_LedONStatusBusy 0003  
       __size_of_INTERRUPT_InterruptManager 004C                  ??_TMR0_SetInterruptHandler 0027  
                                  _PIR0bits 0010                                    _PIR1bits 0011  
                         ?_LedONStartConfig 002D                                    _PIR3bits 0013  
                                  _PIR4bits 0014                  ??_TMR3_SetInterruptHandler 0027  
                     __size_of_sendTxBuffer 0081                                    _TMR0_ISR 0ABC  
                        ??_LedONStartConfig 002F                                    _TMR3_ISR 0BA8  
                         ??_PIN_MANAGER_IOC 0070                        buildException@u8func 0027  
                         i1_TMR3_StartTimer 0A9A                               _TimertickMsec 00C4  
                         ___wmul@multiplier 0025                                    i1___wmul 0C2D  
                        ?i1_TMR3_StartTimer 0070                    __size_of_TMR3_StartTimer 0003  
                            ?_TMR0_CallBack 0070                         ??i1_TMR3_StartTimer 0070  
                               _EUSART_Read 0CD9                               ??_process_FC1 003A  
                             ??_process_FC3 003A                               ??_process_FC5 003A  
                             ??_process_FC6 003A                                    _u16InCnt 00CE  
                         i1_TMR3_WriteTimer 0B58                process_FC15@u8CopyBufferSize 0041  
                              _sendTxBuffer 0577                       process_FC3@u8StartAdd 0040  
                        ?i1_TMR3_WriteTimer 0070                        process_FC1@u16Coilno 0049  
               __size_ofi1_LedONStartConfig 0065                    __size_of_TMR3_WriteTimer 0017  
                                  _au16regs 005C                         process_FC15@u16coil 0044  
                 __end_ofi1_TMR3_StartTimer 0A9D                         ??i1_TMR3_WriteTimer 0072  
                   ??_OSCILLATOR_Initialize 0025                           ??_TMR0_StartTimer 0025  
                          __size_of___lldiv 0052                            __size_of_calcCRC 0053  
                          __size_of___lwdiv 0035                  CCP1_CallBack@capturedValue 007A  
                           _CCP1_CaptureISR 0BBC                           ??_TMR3_Initialize 0027  
                            Modbusinit@u8id 002B                         _EncA_PulseEdgeEvent 0B67  
                              _u8BufferSize 005E                                  _T0CON0bits 0017  
                                  calcCRC@i 002E                                    calcCRC@j 002F  
                           ___lwdiv@divisor 0025                             ___lwdiv@counter 002C  
                                  __ptext10 0ADA                                    __ptext11 0EDD  
                                  __ptext20 0677                                    __ptext12 0AD1  
                                  __ptext21 0E86                                    __ptext13 0AC8  
                                  __ptext30 0D41                                    __ptext22 0438  
                                  __ptext14 0B00                                    __ptext31 0AAC  
                                  __ptext23 02AF                                    __ptext15 0B76  
                                  __ptext40 0C7F                                    __ptext32 0CD9  
                                  __ptext24 0B96                                    __ptext16 01A5  
                                  __ptext41 07C8                                    __ptext33 0AA9  
                                  __ptext25 0577                                    __ptext17 0090  
                                  __ptext50 0ABC                                    __ptext34 0CB9  
                                  __ptext26 0B85                                    __ptext18 0DA7  
                                  __ptext51 0B3C                                    __ptext43 0BA8  
                                  __ptext35 0CF9                                    __ptext27 0E33  
                                  __ptext19 0F9B                                    __ptext60 0C9B  
                                  __ptext52 0D1B                                    __ptext44 0AA0  
                                  __ptext36 0AA6                                    __ptext28 0AF6  
                                  __ptext61 0C63                                    __ptext53 06EE  
                                  __ptext45 037A                                    __ptext37 0C13  
                                  __ptext29 0B4A                                    __ptext62 0BBC  
                                  __ptext54 0002                                    __ptext46 0F36  
                                  __ptext38 0AA3                                    __ptext63 0AC1  
                                  __ptext55 0B0A                                    __ptext47 0C2D  
                                  __ptext39 0762                                    __ptext64 0B67  
                                  __ptext56 0B2F                                    __ptext48 0D73  
                                  __ptext65 05F8                                    __ptext57 0A99  
                                  __ptext49 0DE1                                    __ptext66 0B58  
                                  __ptext58 0B22                                    __ptext67 0A9D  
                                  __ptext59 0A98                                    __ptext68 0A9A  
                                  __ptext69 0AEC                             _validateRequest 0090  
                 __end_ofi1_TMR3_WriteTimer 0B67                                  _T3GCONbits 0414  
                                _IOCCF4_ISR 0B22                     TMR3_WriteTimer@timerVal 0025  
                                _IOCCF5_ISR 0B2F                          i1___lwdiv@dividend 0072  
                             ??_wordConvert 0027                               __size_of_main 0096  
                      ?_EncA_PulseEdgeEvent 0078                         __end_of_process_FC1 037A  
                       __end_of_process_FC3 06EE                         __end_of_process_FC5 1000  
                       __end_of_process_FC6 0DE1        __end_of_TMR0_DefaultInterruptHandler 0003  
     __size_of_TMR0_DefaultInterruptHandler 0001                _TMR0_DefaultInterruptHandler 0002  
                                  _telegram 0140                                  _RC1STAbits 019D  
                      __size_of_Serialbegin 0003                                  _RB5PPSbits 0E9D  
                 i1TMR3_WriteTimer@timerVal 0070                                    int$flags 007E  
                                _EPCRunTime 00C8                        __size_of_Serialwrite 000A  
        __end_of_INTERRUPT_InterruptManager 0050                  _INTERRUPT_InterruptManager 0004  
          EncA_PulseEdgeEvent@capturedValue 0078                           ??_LedONStatusBusy 0025  
                          i1_TMR3_StopTimer 0A9D        __end_of_TMR3_DefaultInterruptHandler 0AA3  
     __size_of_TMR3_DefaultInterruptHandler 0003                _TMR3_DefaultInterruptHandler 0AA0  
                      process_FC1@u8bytesno 0043                __size_of_OnEncPulseEdgeEvent 007F  
                    ModbuspollSlave@i8state 015E                 PIN_MANAGER_Initialize@state 0027  
                  LedONStartConfig@LEDcolor 0031                          i1___lwdiv@quotient 0075  
                                _INTCONbits 000B                             ??_TMR0_CallBack 0074  
                           _CCP1_Initialize 0B76                       __size_of_process_FC15 00A9  
                     __size_of_process_FC16 0057                            ??_TMR3_ReadTimer 0072  
                           Serialwrite@temp 0025                     __size_of_WDT_Initialize 0004  
               process_FC3@u8CopyBufferSize 003E                           ??_TMR3_StartTimer 0025  
                                  intlevel1 0000                              _buildException 0CB9  
                       _LedON_Duration_msec 0051                            ___lldiv@dividend 0074  
                   ?_PIN_MANAGER_Initialize 0070                       ??_EncA_PulseEdgeEvent 007A  
                         __CFG_CLKOUTEN$OFF 0000                    __size_of_ModbuspollSlave 010A  
                  __size_of_Serialavailable 0003                                 _PPSLOCKbits 0E0F  
                       _ClearSerialRxBuffer 0B4A               ?_TMR0_DefaultInterruptHandler 0070  
                   __end_of_CCP1_CaptureISR 0BD1                         __end_of_wordConvert 0BA8  
                i1LedONStartConfig@LEDcolor 007C                         process_FC1@u8bitsno 0048  
                __size_ofi1_TMR3_StartTimer 0003                          _EUSART_Receive_ISR 0C63  
                         ??_TMR3_WriteTimer 0027                       ModbuspollSlave@u8size 004C  
              process_FC16@u8CopyBufferSize 0041                                _process_FC15 0438  
                              _process_FC16 0E86                         ?_EUSART_Receive_ISR 0070  
             ?_TMR3_DefaultInterruptHandler 0070                     __end_of_validateRequest 01A5  
                          ___lldiv@quotient 0079               __size_of_LedON_Control_10msec 0074  
                       process_FC3@u8regsno 0041                             _TMR0_Initialize 0BE6  
                           _Blick_tickPoint 00D0                            ??_TMR3_StopTimer 0025  
                      ?_ClearSerialRxBuffer 0070                                ?_getRxBuffer 0070  
                  getRxBuffer@bBuffOverflow 0028                 ?_IOCCF5_SetInterruptHandler 0025  
                    __end_of_buildException 0CD9                       _Timer0_tick10msecFunc 0D1B  
                __size_ofi1_TMR3_WriteTimer 000F                                 _process_FC1 02AF  
                               _process_FC3 0677                                 _process_FC5 0F9B  
                               _process_FC6 0DA7                __size_of_EUSART_Transmit_ISR 001E  
                               ?_IOCCF4_ISR 0070                                 ?_IOCCF5_ISR 0070  
            __end_of_PIN_MANAGER_Initialize 0F36                             _PIN_MANAGER_IOC 0B0A  
                      ??_EUSART_Receive_ISR 0070                    __size_of_Timer3_Overflow 00BE  
